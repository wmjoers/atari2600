------- FILE metria.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE metria.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE metria.asm
      5  0000 ????
      6  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  0000 ????						;; Macros
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????
     10  0000 ????				      MAC	wait_x_wsync
     11  0000 ????			   .WaitX
     12  0000 ????				      sta	WSYNC	; Wait for horizontal blank
     13  0000 ????				      dex		; X--
     14  0000 ????				      bne	.WaitX	; Loop until X = 0
     15  0000 ????				      ENDM
     16  0000 ????
     17  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     18  0000 ????						;; Contants
     19  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     20  0000 ????	       00 38	   LOGO_BACKGROUND_COLOR =	#$38
     21  0000 ????	       00 08	   LOGO_BACKGROUND_BW =	#$08
     22  0000 ????	       00 0e	   LOGO_COLOR =	#$0E
     23  0000 ????	       00 18	   LOGO_LINE  =	#24
     24  0000 ????	       00 09	   LOGO_HEIGHT =	#9
     25  0000 ????	       00 28	   LOGO_FADE_INITIAL_DELAY =	40
     26  0000 ????	       00 14	   LOGO_FADE_DELAY =	20
     27  0000 ????
     28  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     29  0000 ????						;; RAM variables located outside ROM at address $0080
     30  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     31  0000 ????
     32 U0082 ????				      seg.u	variables
     33 U0080					      org	$80
     34 U0080
     35 U0080		       00	   LM_LogoFade ds	1
     36 U0081		       00	   LM_LogoTick ds	1
     37 U0082
     38 U0082							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     39 U0082							;; Program start - Located at top of ROM at address $F000
     40 U0082							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     41 U0082
     42  10000 ????				       seg	code
     43  f000					      org	$F000
     44  f000
     45  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     47  f00a
     48  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     49  f00a							;; Init variables
     50  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     51  f00a
     52  f00a		       a9 04		      lda	#4
     53  f00c		       85 80		      sta	LM_LogoFade
     54  f00e
     55  f00e		       a5 28		      lda	LOGO_FADE_INITIAL_DELAY
     56  f010		       85 81		      sta	LM_LogoTick
     57  f012
     58  f012							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     59  f012							;; MODE: LOGO - Start new frame
     60  f012							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     61  f012				   LM_NextFrame
     62  f012		       a9 02		      lda	#2	; A = 2 = #%00000010
     63  f014		       85 01		      sta	VBLANK	; Turn on VBLANK
      0  f016					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f016		       a9 0e		      lda	#%1110
      2  f018		       85 02	   .VSLP1     sta	WSYNC
      3  f01a		       85 00		      sta	VSYNC
      4  f01c		       4a		      lsr
      5  f01d		       d0 f9		      bne	.VSLP1
     65  f01f
     66  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     67  f01f							;; Vertical blank - 37 scanlines total
     68  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     69  f01f
     70  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     71  f01f							;; Wait for the remining scanlines - Total 37
     72  f01f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     73  f01f				   .LM_VBLankWait
     74  f01f		       a2 25		      ldx	#37	; X = 37
      0  f021					      WAIT_X_WSYNC		; Wait for X scanlines
      1  f021				   .WaitX
      2  f021		       85 02		      sta	WSYNC
      3  f023		       ca		      dex
      4  f024		       d0 fb		      bne	.WaitX
     76  f026
     77  f026		       a9 00		      lda	#0	; A = 0 = #%00000000
     78  f028		       85 01		      sta	VBLANK	; Turn off VBLANK
     79  f02a
     80  f02a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     81  f02a							;; Draw screen - 192 scanlines - 2 scanline kernel
     82  f02a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     83  f02a
     84  f02a		       a5 80		      lda	LM_LogoFade
     85  f02c		       c9 00		      cmp	#0
     86  f02e		       f0 0a		      beq	.LM_FadeDone
     87  f030
     88  f030		       c6 81		      dec	LM_LogoTick
     89  f032		       d0 06		      bne	.LM_FadeDone
     90  f034
     91  f034		       c6 80		      dec	LM_LogoFade
     92  f036		       a5 14		      lda	LOGO_FADE_DELAY
     93  f038		       85 81		      sta	LM_LogoTick
     94  f03a
     95  f03a				   .LM_FadeDone
     96  f03a		       a4 80		      ldy	LM_LogoFade
     97  f03c
     98  f03c		       a9 08		      lda	#%00001000
     99  f03e		       2c 82 02 	      bit	SWCHB
    100  f041		       f0 0c		      beq	.LM_BW
    101  f043				   .LM_Color
    102  f043		       a5 38		      lda	LOGO_BACKGROUND_COLOR
    103  f045		       85 09		      sta	COLUBK
    104  f047		       b9 4d f1 	      lda	LM_LogoFade_Color,Y
    105  f04a		       85 08		      sta	COLUPF
    106  f04c		       4c 58 f0 	      jmp	.LM_Top
    107  f04f				   .LM_BW
    108  f04f		       a5 08		      lda	LOGO_BACKGROUND_BW
    109  f051		       85 09		      sta	COLUBK
    110  f053		       b9 52 f1 	      lda	LM_LogoFade_BW,Y
    111  f056		       85 08		      sta	COLUPF
    112  f058
    113  f058				   .LM_Top		; 68
    114  f058		       a2 44		      ldx	#68
      0  f05a					      WAIT_X_WSYNC
      1  f05a				   .WaitX
      2  f05a		       85 02		      sta	WSYNC
      3  f05c		       ca		      dex
      4  f05d		       d0 fb		      bne	.WaitX
    116  f05f
    117  f05f				   .LM_Middle		; 36
    118  f05f		       a0 00		      ldy	#0
    119  f061				   .LM_LoopY
    120  f061		       a2 04		      ldx	#4	;
    121  f063				   .LM_LoopX
    122  f063		       85 02		      sta	WSYNC
    123  f065		       b9 17 f1 	      lda	LM_LogoPF0,Y
    124  f068		       85 0d		      sta	PF0
    125  f06a		       b9 29 f1 	      lda	LM_LogoPF1,Y
    126  f06d		       85 0e		      sta	PF1
    127  f06f		       b9 3b f1 	      lda	LM_LogoPF2,Y
    128  f072		       85 0f		      sta	PF2
    129  f074		       c8		      iny
    130  f075		       b9 17 f1 	      lda	LM_LogoPF0,Y
    131  f078		       85 0d		      sta	PF0
    132  f07a		       b9 29 f1 	      lda	LM_LogoPF1,Y
    133  f07d		       85 0e		      sta	PF1
    134  f07f		       b9 3b f1 	      lda	LM_LogoPF2,Y
    135  f082		       88		      dey
    136  f083		       ea		      nop
    137  f084		       85 0f		      sta	PF2
    138  f086
    139  f086		       ca		      dex
    140  f087		       d0 da		      bne	.LM_LoopX
    141  f089		       c8		      iny
    142  f08a		       c8		      iny
    143  f08b		       98		      tya
    144  f08c		       c9 12		      cmp	#18
    145  f08e		       d0 d1		      bne	.LM_LoopY
    146  f090				   .LM_TurnOffLogo
    147  f090		       a5 02		      lda	WSYNC	; 1
    148  f092		       a9 00		      lda	#0
    149  f094		       85 0d		      sta	PF0
    150  f096		       85 0e		      sta	PF1
    151  f098		       85 0f		      sta	PF2
    152  f09a
    153  f09a				   .LM_Bottom
    154  f09a		       a2 57		      ldx	#87	; 87
      0  f09c					      WAIT_X_WSYNC
      1  f09c				   .WaitX
      2  f09c		       85 02		      sta	WSYNC
      3  f09e		       ca		      dex
      4  f09f		       d0 fb		      bne	.WaitX
    156  f0a1
    157  f0a1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    158  f0a1							;; Handle overscan - 30 scanlines
    159  f0a1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    160  f0a1				   .LM_OverScanWait
    161  f0a1		       a9 02		      lda	#2	; A = 2 = #%00000010
    162  f0a3		       85 01		      sta	VBLANK	; Turn on VBLANK
    163  f0a5		       a2 1d		      ldx	#29	; X = 30-1
      0  f0a7					      WAIT_X_WSYNC		; Wait for X scanlines
      1  f0a7				   .WaitX
      2  f0a7		       85 02		      sta	WSYNC
      3  f0a9		       ca		      dex
      4  f0aa		       d0 fb		      bne	.WaitX
    165  f0ac
    166  f0ac							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    167  f0ac							;; Check input
    168  f0ac							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    169  f0ac
    170  f0ac		       a9 01		      lda	#%00000001
    171  f0ae		       2c 82 02 	      bit	SWCHB
    172  f0b1		       d0 03		      bne	.LM_NoReset
    173  f0b3		       4c 00 f0 	      jmp	Reset
    174  f0b6				   .LM_NoReset
    175  f0b6
    176  f0b6		       a9 80		      lda	#%10000000
    177  f0b8		       24 0c		      bit	INPT4
    178  f0ba		       d0 03		      bne	.LM_NoFireButton
    179  f0bc		       4c c4 f0 	      jmp	GM_NextFrame
    180  f0bf				   .LM_NoFireButton
    181  f0bf		       85 02		      sta	WSYNC
    182  f0c1
    183  f0c1		       4c 12 f0 	      jmp	LM_NextFrame
    184  f0c4
    185  f0c4
    186  f0c4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    187  f0c4							;; MODE: GAME - Start new frame
    188  f0c4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    189  f0c4				   GM_NextFrame
    190  f0c4		       a9 02		      lda	#2	; A = 2 = #%00000010
    191  f0c6		       85 01		      sta	VBLANK	; Turn on VBLANK
      0  f0c8					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f0c8		       a9 0e		      lda	#%1110
      2  f0ca		       85 02	   .VSLP1     sta	WSYNC
      3  f0cc		       85 00		      sta	VSYNC
      4  f0ce		       4a		      lsr
      5  f0cf		       d0 f9		      bne	.VSLP1
    193  f0d1
    194  f0d1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    195  f0d1							;; Vertical blank - 37 scanlines total
    196  f0d1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    197  f0d1
    198  f0d1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    199  f0d1							;; Wait for the remining scanlines - Total 37
    200  f0d1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    201  f0d1				   .GM_VBLankWait
    202  f0d1		       a2 25		      ldx	#37	; X = 37
      0  f0d3					      WAIT_X_WSYNC		; Wait for X scanlines
      1  f0d3				   .WaitX
      2  f0d3		       85 02		      sta	WSYNC
      3  f0d5		       ca		      dex
      4  f0d6		       d0 fb		      bne	.WaitX
    204  f0d8
    205  f0d8		       a9 00		      lda	#0	; A = 0 = #%00000000
    206  f0da		       85 01		      sta	VBLANK	; Turn off VBLANK
    207  f0dc
    208  f0dc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    209  f0dc							;; Draw screen - 192 scanlines
    210  f0dc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    211  f0dc
    212  f0dc		       a9 08		      lda	#%00001000
    213  f0de		       2c 82 02 	      bit	SWCHB
    214  f0e1		       f0 0b		      beq	.GM_BW
    215  f0e3				   .GM_Color
    216  f0e3		       a5 38		      lda	LOGO_BACKGROUND_COLOR
    217  f0e5		       85 09		      sta	COLUBK
    218  f0e7		       a5 0e		      lda	LOGO_COLOR
    219  f0e9		       85 08		      sta	COLUPF
    220  f0eb		       4c f6 f0 	      jmp	.GM_ColorDone
    221  f0ee				   .GM_BW
    222  f0ee		       a5 08		      lda	LOGO_BACKGROUND_BW
    223  f0f0		       85 09		      sta	COLUBK
    224  f0f2		       a5 0e		      lda	LOGO_COLOR
    225  f0f4		       85 08		      sta	COLUPF
    226  f0f6				   .GM_ColorDone
    227  f0f6
    228  f0f6		       a2 c0		      ldx	#192
      0  f0f8					      WAIT_X_WSYNC
      1  f0f8				   .WaitX
      2  f0f8		       85 02		      sta	WSYNC
      3  f0fa		       ca		      dex
      4  f0fb		       d0 fb		      bne	.WaitX
    230  f0fd
    231  f0fd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    232  f0fd							;; Handle overscan - 30 scanlines
    233  f0fd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    234  f0fd				   .GM_OverScanWait
    235  f0fd		       a9 02		      lda	#2	; A = 2 = #%00000010
    236  f0ff		       85 01		      sta	VBLANK	; Turn on VBLANK
    237  f101		       a2 1d		      ldx	#29	; X = 30-1
      0  f103					      WAIT_X_WSYNC		; Wait for X scanlines
      1  f103				   .WaitX
      2  f103		       85 02		      sta	WSYNC
      3  f105		       ca		      dex
      4  f106		       d0 fb		      bne	.WaitX
    239  f108
    240  f108							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    241  f108							;; Check input
    242  f108							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    243  f108
    244  f108		       a9 01		      lda	#%00000001
    245  f10a		       2c 82 02 	      bit	SWCHB
    246  f10d		       d0 03		      bne	.GM_NoReset
    247  f10f		       4c 00 f0 	      jmp	Reset
    248  f112				   .GM_NoReset
    249  f112		       85 02		      sta	WSYNC
    250  f114
    251  f114		       4c c4 f0 	      jmp	GM_NextFrame
    252  f117
    253  f117
    254  f117
    255  f117
    256  f117							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    257  f117							;; Lookup tabes
    258  f117							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    259  f117
    260  f117							; https://www.masswerk.at/vcs-tools/TinyPlayfieldEditor/
    261  f117							; mode: asymmetric repeat line-height 4
    262  f117				   LM_LogoPF0
    263  f117		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$90
    264  f11f		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$40,$00,$40
    265  f127		       00 70		      .byte.b	$00,$70
    266  f129				   LM_LogoPF1
    267  f129		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$00,$05,$DE
    268  f131		       0a 42 0a 4e*	      .byte.b	$0A,$42,$0A,$4E,$08,$52,$08,$56
    269  f139		       38 7b		      .byte.b	$38,$7B
    270  f13b				   LM_LogoPF2
    271  f13b		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$80,$00,$F8,$00
    272  f143		       a5 00 a5 00*	      .byte.b	$A5,$00,$A5,$00,$BF,$00,$85,$00
    273  f14b		       39 03		      .byte.b	$39,$03
    274  f14d
    275  f14d				   LM_LogoFade_Color
    276  f14d		       0e 3e 3c 3a*	      .byte.b	$0E,$3E,$3C,$3A,$38
    277  f152
    278  f152				   LM_LogoFade_BW
    279  f152		       0e 0e 0c 0a*	      .byte.b	$0E,$0E,$0C,$0A,$08
    280  f157
    281  f157
    282  f157							;---Graphics Data from PlayerPal 2600---
    283  f157							; BGCOLOR = $C8
    284  f157
    285  f157				   GM_DRESS_IDLE
    286  f157		       7e		      .byte.b	#%01111110	;$70
    287  f158		       7e		      .byte.b	#%01111110	;$70
    288  f159		       3c		      .byte.b	#%00111100	;$70
    289  f15a		       5a		      .byte.b	#%01011010	;$84
    290  f15b		       7e		      .byte.b	#%01111110	;$84
    291  f15c		       18		      .byte.b	#%00011000	;$F4
    292  f15d		       3c		      .byte.b	#%00111100	;$00
    293  f15e		       18		      .byte.b	#%00011000	;$00
    294  f15f				   GM_DRESS_WALK1
    295  f15f		       78		      .byte.b	#%01111000	;$70
    296  f160		       7e		      .byte.b	#%01111110	;$70
    297  f161		       3c		      .byte.b	#%00111100	;$70
    298  f162		       1a		      .byte.b	#%00011010	;$84
    299  f163		       7e		      .byte.b	#%01111110	;$84
    300  f164		       18		      .byte.b	#%00011000	;$F4
    301  f165		       3c		      .byte.b	#%00111100	;$00
    302  f166		       18		      .byte.b	#%00011000	;$00
    303  f167				   GM_DRESS_WALK2
    304  f167		       1e		      .byte.b	#%00011110	;$70
    305  f168		       7e		      .byte.b	#%01111110	;$70
    306  f169		       3c		      .byte.b	#%00111100	;$70
    307  f16a		       58		      .byte.b	#%01011000	;$84
    308  f16b		       7e		      .byte.b	#%01111110	;$84
    309  f16c		       18		      .byte.b	#%00011000	;$F4
    310  f16d		       3c		      .byte.b	#%00111100	;$00
    311  f16e		       18		      .byte.b	#%00011000	;$00
    312  f16f				   GM_PANTS_IDLE
    313  f16f		       66		      .byte.b	#%01100110	;$70
    314  f170		       24		      .byte.b	#%00100100	;$70
    315  f171		       3c		      .byte.b	#%00111100	;$70
    316  f172		       5a		      .byte.b	#%01011010	;$84
    317  f173		       7e		      .byte.b	#%01111110	;$84
    318  f174		       18		      .byte.b	#%00011000	;$F4
    319  f175		       3c		      .byte.b	#%00111100	;$00
    320  f176		       18		      .byte.b	#%00011000	;$00
    321  f177				   GM_PANTS_WALK1
    322  f177		       60		      .byte.b	#%01100000	;$70
    323  f178		       26		      .byte.b	#%00100110	;$70
    324  f179		       3c		      .byte.b	#%00111100	;$70
    325  f17a		       1a		      .byte.b	#%00011010	;$84
    326  f17b		       7e		      .byte.b	#%01111110	;$84
    327  f17c		       18		      .byte.b	#%00011000	;$F4
    328  f17d		       3c		      .byte.b	#%00111100	;$00
    329  f17e		       18		      .byte.b	#%00011000	;$00
    330  f17f				   GM_PANTS_WALK2
    331  f17f		       06		      .byte.b	#%00000110	;$70
    332  f180		       64		      .byte.b	#%01100100	;$70
    333  f181		       3c		      .byte.b	#%00111100	;$70
    334  f182		       58		      .byte.b	#%01011000	;$84
    335  f183		       7e		      .byte.b	#%01111110	;$84
    336  f184		       18		      .byte.b	#%00011000	;$F4
    337  f185		       3c		      .byte.b	#%00111100	;$00
    338  f186		       18		      .byte.b	#%00011000	;$00
    339  f187							;---End Graphics Data---
    340  f187
    341  f187
    342  f187							;---Color Data from PlayerPal 2600---
    343  f187				   GM_PLAYER_COLORS
    344  f187		       70		      .byte.b	#$70	;
    345  f188		       70		      .byte.b	#$70	;
    346  f189		       70		      .byte.b	#$70	;
    347  f18a		       84		      .byte.b	#$84	;
    348  f18b		       84		      .byte.b	#$84	;
    349  f18c		       f4		      .byte.b	#$F4	;
    350  f18d		       00		      .byte.b	#$00	;
    351  f18e		       00		      .byte.b	#$00	;
    352  f18f							;---End Color Data---
    353  f18f
    354  f18f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    355  f18f							;; Fill the 4K ROM
    356  f18f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    357  fffc					      org	$FFFC
    358  fffc		       00 f0		      .word.w	Reset	; Reset vector
    359  fffe		       00 f0		      .word.w	Reset	; Interrupt Vector
    360  10000
    361  10000
