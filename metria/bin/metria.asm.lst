------- FILE metria.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE metria.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE metria.asm
      5  0000 ????
      6  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  0000 ????						;; Macros
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????
     10  0000 ????				      MAC	wait_x_wsync
     11  0000 ????			   .WaitX
     12  0000 ????				      sta	WSYNC	; Wait for horizontal blank
     13  0000 ????				      dex		; X--
     14  0000 ????				      bne	.WaitX	; Loop until X = 0
     15  0000 ????				      ENDM
     16  0000 ????
     17  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     18  0000 ????						;; Contants
     19  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     20  0000 ????
     21  0000 ????	       00 38	   LOGO_BACKGROUND_COLOR =	#$38
     22  0000 ????	       00 08	   LOGO_BACKGROUND_BW =	#$08
     23  0000 ????	       00 0e	   LOGO_COLOR =	#$0E
     24  0000 ????	       00 18	   LOGO_LINE  =	#24
     25  0000 ????	       00 09	   LOGO_HEIGHT =	#9
     26  0000 ????	       00 28	   LOGO_FADE_INITIAL_DELAY =	#40
     27  0000 ????	       00 14	   LOGO_FADE_DELAY =	#20
     28  0000 ????
     29  0000 ????	       00 08	   GAME_BK_BW =	#$08
     30  0000 ????	       00 09	   GAME_PLAYER_HEIGHT =	#9
     31  0000 ????
     32  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33  0000 ????						;; RAM variables located outside ROM at address $0080
     34  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35  0000 ????
     36 U008a ????				      seg.u	variables
     37 U0080					      org	$80
     38 U0080
     39 U0080		       00	   LM_LogoFade ds	1
     40 U0081		       00	   LM_LogoTick ds	1
     41 U0082
     42 U0082		       00 00	   GM_PlayerPtr ds	2
     43 U0084		       00 00	   GM_PlayerColorPtr ds	2
     44 U0086		       00	   GM_PlayerXPos ds	1
     45 U0087		       00	   GM_PlayerYPos ds	1
     46 U0088		       00	   GM_PlayerMode ds	1
     47 U0089		       00	   GM_SelectActive ds	1
     48 U008a
     49 U008a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     50 U008a							;; Program start - Located at top of ROM at address $F000
     51 U008a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     52 U008a
     53  10000 ????				       seg	code
     54  f000					      org	$F000
     55  f000
     56  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     58  f00a
     59  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     60  f00a							;; Init variables
     61  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     62  f00a
     63  f00a		       a9 04		      lda	#4
     64  f00c		       85 80		      sta	LM_LogoFade
     65  f00e		       a5 28		      lda	LOGO_FADE_INITIAL_DELAY
     66  f010		       85 81		      sta	LM_LogoTick
     67  f012
      0  f012					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f012				   .POINTER   SET	GM_PlayerPtr
      2  f012				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f012
      4  f012		       a9 1c		      LDA	#<.ADDRESS
      5  f014		       85 82		      STA	.POINTER
      6  f016		       a9 f2		      LDA	#>.ADDRESS
      7  f018		       85 83		      STA	.POINTER+1
      8  f01a
      0  f01a					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR
      1  f01a				   .POINTER   SET	GM_PlayerColorPtr
      2  f01a				   .ADDRESS   SET	GM_PLAYER_COLOR
      3  f01a
      4  f01a		       a9 52		      LDA	#<.ADDRESS
      5  f01c		       85 84		      STA	.POINTER
      6  f01e		       a9 f2		      LDA	#>.ADDRESS
      7  f020		       85 85		      STA	.POINTER+1
      8  f022
     70  f022
     71  f022		       a9 43		      lda	#67
     72  f024		       85 86		      sta	GM_PlayerXPos
     73  f026		       a9 2e		      lda	#46
     74  f028		       85 87		      sta	GM_PlayerYPos
     75  f02a		       a9 00		      lda	#0
     76  f02c		       85 88		      sta	GM_PlayerMode
     77  f02e		       a9 00		      lda	#0
     78  f030		       85 89		      sta	GM_SelectActive
     79  f032
     80  f032							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     81  f032							;; MODE: LOGO - Start new frame
     82  f032							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     83  f032				   LM_NextFrame
     84  f032		       a9 02		      lda	#2	; A = 2 = #%00000010
     85  f034		       85 01		      sta	VBLANK	; Turn on VBLANK
      0  f036					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f036		       a9 0e		      lda	#%1110
      2  f038		       85 02	   .VSLP1     sta	WSYNC
      3  f03a		       85 00		      sta	VSYNC
      4  f03c		       4a		      lsr
      5  f03d		       d0 f9		      bne	.VSLP1
     87  f03f
     88  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     89  f03f							;; Vertical blank - 37 scanlines total
     90  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     91  f03f
     92  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     93  f03f							;; Wait for the remining scanlines - Total 37
     94  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     95  f03f				   .LM_VBLankWait
     96  f03f		       a2 25		      ldx	#37	; X = 37
      0  f041					      WAIT_X_WSYNC		; Wait for X scanlines
      1  f041				   .WaitX
      2  f041		       85 02		      sta	WSYNC
      3  f043		       ca		      dex
      4  f044		       d0 fb		      bne	.WaitX
     98  f046
     99  f046		       a9 00		      lda	#0	; A = 0 = #%00000000
    100  f048		       85 01		      sta	VBLANK	; Turn off VBLANK
    101  f04a
    102  f04a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    103  f04a							;; Draw screen - 192 scanlines - 2 scanline kernel
    104  f04a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    105  f04a
    106  f04a		       a5 80		      lda	LM_LogoFade
    107  f04c		       c9 00		      cmp	#0
    108  f04e		       f0 0a		      beq	.LM_FadeDone
    109  f050
    110  f050		       c6 81		      dec	LM_LogoTick
    111  f052		       d0 06		      bne	.LM_FadeDone
    112  f054
    113  f054		       c6 80		      dec	LM_LogoFade
    114  f056		       a5 14		      lda	LOGO_FADE_DELAY
    115  f058		       85 81		      sta	LM_LogoTick
    116  f05a
    117  f05a				   .LM_FadeDone
    118  f05a		       a4 80		      ldy	LM_LogoFade
    119  f05c
    120  f05c		       a9 08		      lda	#%00001000
    121  f05e		       2c 82 02 	      bit	SWCHB
    122  f061		       f0 0c		      beq	.LM_BW
    123  f063				   .LM_Color
    124  f063		       a5 38		      lda	LOGO_BACKGROUND_COLOR
    125  f065		       85 09		      sta	COLUBK
    126  f067		       b9 12 f2 	      lda	LM_LogoFade_Color,Y
    127  f06a		       85 08		      sta	COLUPF
    128  f06c		       4c 78 f0 	      jmp	.LM_Top
    129  f06f				   .LM_BW
    130  f06f		       a5 08		      lda	LOGO_BACKGROUND_BW
    131  f071		       85 09		      sta	COLUBK
    132  f073		       b9 17 f2 	      lda	LM_LogoFade_BW,Y
    133  f076		       85 08		      sta	COLUPF
    134  f078
    135  f078				   .LM_Top		; 68
    136  f078		       a2 44		      ldx	#68
      0  f07a					      WAIT_X_WSYNC
      1  f07a				   .WaitX
      2  f07a		       85 02		      sta	WSYNC
      3  f07c		       ca		      dex
      4  f07d		       d0 fb		      bne	.WaitX
    138  f07f
    139  f07f				   .LM_Middle		; 36
    140  f07f		       a0 00		      ldy	#0
    141  f081				   .LM_LoopY
    142  f081		       a2 04		      ldx	#4	;
    143  f083				   .LM_LoopX
    144  f083		       85 02		      sta	WSYNC
    145  f085		       b9 dc f1 	      lda	LM_LogoPF0,Y
    146  f088		       85 0d		      sta	PF0
    147  f08a		       b9 ee f1 	      lda	LM_LogoPF1,Y
    148  f08d		       85 0e		      sta	PF1
    149  f08f		       b9 00 f2 	      lda	LM_LogoPF2,Y
    150  f092		       85 0f		      sta	PF2
    151  f094		       c8		      iny
    152  f095		       b9 dc f1 	      lda	LM_LogoPF0,Y
    153  f098		       85 0d		      sta	PF0
    154  f09a		       b9 ee f1 	      lda	LM_LogoPF1,Y
    155  f09d		       85 0e		      sta	PF1
    156  f09f		       b9 00 f2 	      lda	LM_LogoPF2,Y
    157  f0a2		       88		      dey
    158  f0a3		       ea		      nop
    159  f0a4		       85 0f		      sta	PF2
    160  f0a6
    161  f0a6		       ca		      dex
    162  f0a7		       d0 da		      bne	.LM_LoopX
    163  f0a9		       c8		      iny
    164  f0aa		       c8		      iny
    165  f0ab		       98		      tya
    166  f0ac		       c9 12		      cmp	#18
    167  f0ae		       d0 d1		      bne	.LM_LoopY
    168  f0b0				   .LM_TurnOffLogo
    169  f0b0		       a5 02		      lda	WSYNC	; 1
    170  f0b2		       a9 00		      lda	#0
    171  f0b4		       85 0d		      sta	PF0
    172  f0b6		       85 0e		      sta	PF1
    173  f0b8		       85 0f		      sta	PF2
    174  f0ba
    175  f0ba				   .LM_Bottom
    176  f0ba		       a2 57		      ldx	#87	; 87
      0  f0bc					      WAIT_X_WSYNC
      1  f0bc				   .WaitX
      2  f0bc		       85 02		      sta	WSYNC
      3  f0be		       ca		      dex
      4  f0bf		       d0 fb		      bne	.WaitX
    178  f0c1
    179  f0c1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    180  f0c1							;; Handle overscan - 30 scanlines
    181  f0c1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    182  f0c1				   .LM_OverScanWait
    183  f0c1		       a9 02		      lda	#2	; A = 2 = #%00000010
    184  f0c3		       85 01		      sta	VBLANK	; Turn on VBLANK
    185  f0c5		       a2 1d		      ldx	#29	; X = 30-1
      0  f0c7					      WAIT_X_WSYNC		; Wait for X scanlines
      1  f0c7				   .WaitX
      2  f0c7		       85 02		      sta	WSYNC
      3  f0c9		       ca		      dex
      4  f0ca		       d0 fb		      bne	.WaitX
    187  f0cc
    188  f0cc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    189  f0cc							;; Check input
    190  f0cc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    191  f0cc
    192  f0cc		       a9 01		      lda	#%00000001
    193  f0ce		       2c 82 02 	      bit	SWCHB
    194  f0d1		       d0 03		      bne	.LM_NoReset
    195  f0d3		       4c 00 f0 	      jmp	Reset
    196  f0d6				   .LM_NoReset
    197  f0d6
    198  f0d6		       a9 80		      lda	#%10000000
    199  f0d8		       24 0c		      bit	INPT4
    200  f0da		       d0 03		      bne	.LM_NoFireButton
    201  f0dc		       4c e4 f0 	      jmp	GM_NextFrame
    202  f0df				   .LM_NoFireButton
    203  f0df		       85 02		      sta	WSYNC
    204  f0e1
    205  f0e1		       4c 32 f0 	      jmp	LM_NextFrame
    206  f0e4
    207  f0e4
    208  f0e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    209  f0e4							;; MODE: GAME - Start new frame
    210  f0e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    211  f0e4				   GM_NextFrame
    212  f0e4		       a9 02		      lda	#2	; A = 2 = #%00000010
    213  f0e6		       85 01		      sta	VBLANK	; Turn on VBLANK
      0  f0e8					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f0e8		       a9 0e		      lda	#%1110
      2  f0ea		       85 02	   .VSLP1     sta	WSYNC
      3  f0ec		       85 00		      sta	VSYNC
      4  f0ee		       4a		      lsr
      5  f0ef		       d0 f9		      bne	.VSLP1
    215  f0f1
    216  f0f1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    217  f0f1							;; Vertical blank - 37 scanlines total
    218  f0f1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    219  f0f1
    220  f0f1		       a5 86		      lda	GM_PlayerXPos
    221  f0f3		       a0 00		      ldy	#0
    222  f0f5		       20 c8 f1 	      jsr	SetObjectXPos
    223  f0f8
    224  f0f8		       85 02		      sta	WSYNC	; Wait for next scanline
    225  f0fa		       85 2a		      sta	HMOVE	; Apply the fine position offset
    226  f0fc
    227  f0fc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    228  f0fc							;; Wait for the remining scanlines - Total 37
    229  f0fc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    230  f0fc				   .GM_VBLankWait
    231  f0fc		       a2 23		      ldx	#35	; X = 37-2
      0  f0fe					      WAIT_X_WSYNC		; Wait for X scanlines
      1  f0fe				   .WaitX
      2  f0fe		       85 02		      sta	WSYNC
      3  f100		       ca		      dex
      4  f101		       d0 fb		      bne	.WaitX
    233  f103
    234  f103		       a9 00		      lda	#0	; A = 0 = #%00000000
    235  f105		       85 01		      sta	VBLANK	; Turn off VBLANK
    236  f107
    237  f107							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    238  f107							;; Draw screen - 192 scanlines
    239  f107							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    240  f107
    241  f107		       a9 08		      lda	#%00001000
    242  f109		       2c 82 02 	      bit	SWCHB
    243  f10c		       f0 13		      beq	.GM_BW
    244  f10e				   .GM_Color
    245  f10e		       a9 c8		      lda	#$C8
    246  f110		       85 09		      sta	COLUBK
    247  f112		       a5 0e		      lda	LOGO_COLOR
    248  f114		       85 08		      sta	COLUPF
      0  f116					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR
      1  f116				   .POINTER   SET	GM_PlayerColorPtr
      2  f116				   .ADDRESS   SET	GM_PLAYER_COLOR
      3  f116
      4  f116		       a9 52		      LDA	#<.ADDRESS
      5  f118		       85 84		      STA	.POINTER
      6  f11a		       a9 f2		      LDA	#>.ADDRESS
      7  f11c		       85 85		      STA	.POINTER+1
      8  f11e
    250  f11e		       4c 31 f1 	      jmp	.GM_ColorDone
    251  f121				   .GM_BW
    252  f121		       a5 08		      lda	GAME_BK_BW
    253  f123		       85 09		      sta	COLUBK
    254  f125		       a5 0e		      lda	LOGO_COLOR
    255  f127		       85 08		      sta	COLUPF
      0  f129					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_BW
      1  f129				   .POINTER   SET	GM_PlayerColorPtr
      2  f129				   .ADDRESS   SET	GM_PLAYER_BW
      3  f129
      4  f129		       a9 5b		      LDA	#<.ADDRESS
      5  f12b		       85 84		      STA	.POINTER
      6  f12d		       a9 f2		      LDA	#>.ADDRESS
      7  f12f		       85 85		      STA	.POINTER+1
      8  f131
    257  f131				   .GM_ColorDone
    258  f131
    259  f131		       a2 60		      ldx	#96	; X counter contains the remaining scanlines
    260  f133
    261  f133				   Scanline
    262  f133		       8a		      txa		; transfer X to A
    263  f134		       38		      sec		; make sure carry flag is set
    264  f135		       e5 87		      sbc	GM_PlayerYPos	; subtract sprite Y coordinate
    265  f137		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    266  f139		       90 02		      bcc	.GM_LoadPlayer	; if result < SpriteHeight, call subroutine
    267  f13b		       a9 00		      lda	#0	; else, set index to 0
    268  f13d
    269  f13d				   .GM_LoadPlayer
    270  f13d		       a8		      tay
    271  f13e		       b1 82		      lda	(GM_PlayerPtr),Y	; load player bitmap slice of data
    272  f140
    273  f140		       85 02		      sta	WSYNC	; wait for next scanline
    274  f142
    275  f142		       85 1b		      sta	GRP0	; set graphics for player 0 slice
    276  f144		       b1 84		      lda	(GM_PlayerColorPtr),Y	; load player color from lookup table
    277  f146		       85 06		      sta	COLUP0	; set color for player 0 slice
    278  f148
    279  f148		       85 02		      sta	WSYNC	; wait for next scanline
    280  f14a
    281  f14a		       ca		      dex
    282  f14b		       d0 e6		      bne	Scanline	; repeat next scanline until finished
    283  f14d
    284  f14d
    285  f14d
    286  f14d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    287  f14d							;; Handle overscan - 30 scanlines
    288  f14d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    289  f14d				   .GM_OverScanWait
    290  f14d		       a9 02		      lda	#2	; A = 2 = #%00000010
    291  f14f		       85 01		      sta	VBLANK	; Turn on VBLANK
    292  f151		       a2 1d		      ldx	#29	; X = 30-1
      0  f153					      WAIT_X_WSYNC		; Wait for X scanlines
      1  f153				   .WaitX
      2  f153		       85 02		      sta	WSYNC
      3  f155		       ca		      dex
      4  f156		       d0 fb		      bne	.WaitX
    294  f158
    295  f158							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    296  f158							;; Check input
    297  f158							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    298  f158
    299  f158		       a9 01		      lda	#%00000001
    300  f15a		       2c 82 02 	      bit	SWCHB
    301  f15d		       d0 03		      bne	.GM_NoReset
    302  f15f		       4c 00 f0 	      jmp	Reset
    303  f162				   .GM_NoReset
    304  f162
    305  f162		       a9 02		      lda	#%00000010
    306  f164		       2c 82 02 	      bit	SWCHB
    307  f167		       d0 32		      bne	.GM_NoSelect
    308  f169
    309  f169		       a5 89		      lda	GM_SelectActive
    310  f16b		       c9 00		      cmp	#0
    311  f16d		       d0 30		      bne	.GM_SelectDone
    312  f16f
    313  f16f		       a9 01		      lda	#1
    314  f171		       85 89		      sta	GM_SelectActive
    315  f173
    316  f173		       a9 02		      lda	#2
    317  f175		       4d 82 02 	      eor	SWCHB
    318  f178		       8d 82 02 	      sta	SWCHB
    319  f17b
    320  f17b		       a9 01		      lda	#1
    321  f17d		       45 88		      eor	GM_PlayerMode
    322  f17f		       85 88		      sta	GM_PlayerMode
    323  f181		       c9 00		      cmp	#0
    324  f183		       f0 0b		      beq	.GM_SET_DRESS
    325  f185				   .GM_SET_PANTS
      0  f185					      SET_POINTER	GM_PlayerPtr, GM_PANTS_IDLE
      1  f185				   .POINTER   SET	GM_PlayerPtr
      2  f185				   .ADDRESS   SET	GM_PANTS_IDLE
      3  f185
      4  f185		       a9 37		      LDA	#<.ADDRESS
      5  f187		       85 82		      STA	.POINTER
      6  f189		       a9 f2		      LDA	#>.ADDRESS
      7  f18b		       85 83		      STA	.POINTER+1
      8  f18d
    327  f18d		       4c 9f f1 	      jmp	.GM_SelectDone
    328  f190				   .GM_SET_DRESS
      0  f190					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f190				   .POINTER   SET	GM_PlayerPtr
      2  f190				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f190
      4  f190		       a9 1c		      LDA	#<.ADDRESS
      5  f192		       85 82		      STA	.POINTER
      6  f194		       a9 f2		      LDA	#>.ADDRESS
      7  f196		       85 83		      STA	.POINTER+1
      8  f198
    330  f198		       4c 9f f1 	      jmp	.GM_SelectDone
    331  f19b				   .GM_NoSelect
    332  f19b		       a9 00		      lda	#0
    333  f19d		       85 89		      sta	GM_SelectActive
    334  f19f				   .GM_SelectDone
    335  f19f
    336  f19f				   .GM_CheckUp
    337  f19f		       a9 10		      lda	#%00010000
    338  f1a1		       2c 80 02 	      bit	SWCHA
    339  f1a4		       d0 02		      bne	.GM_CheckDown
    340  f1a6		       e6 87		      inc	GM_PlayerYPos
    341  f1a8
    342  f1a8				   .GM_CheckDown
    343  f1a8		       a9 20		      lda	#%00100000
    344  f1aa		       2c 80 02 	      bit	SWCHA
    345  f1ad		       d0 02		      bne	.GM_CheckLeft
    346  f1af		       c6 87		      dec	GM_PlayerYPos
    347  f1b1
    348  f1b1				   .GM_CheckLeft
    349  f1b1		       a9 40		      lda	#%01000000
    350  f1b3		       2c 80 02 	      bit	SWCHA
    351  f1b6		       d0 02		      bne	.GM_CheckRight
    352  f1b8		       c6 86		      dec	GM_PlayerXPos
    353  f1ba
    354  f1ba				   .GM_CheckRight
    355  f1ba		       a9 80		      lda	#%10000000
    356  f1bc		       2c 80 02 	      bit	SWCHA
    357  f1bf		       d0 02		      bne	.GM_NoInput
    358  f1c1		       e6 86		      inc	GM_PlayerXPos
    359  f1c3
    360  f1c3				   .GM_NoInput
    361  f1c3
    362  f1c3		       85 02		      sta	WSYNC
    363  f1c5
    364  f1c5
    365  f1c5		       4c e4 f0 	      jmp	GM_NextFrame
    366  f1c8
    367  f1c8
    368  f1c8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    369  f1c8							;; Subruotines
    370  f1c8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    371  f1c8
    372  f1c8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    373  f1c8							;; SetObjectXPos
    374  f1c8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    375  f1c8							;; A : Contains the the desired x-coordinate
    376  f1c8							;; Y=0 : Player0
    377  f1c8							;; Y=1 : Player1
    378  f1c8							;; Y=2 : Missile0
    379  f1c8							;; Y=3 : Missile1
    380  f1c8							;; Y=4 : Ball
    381  f1c8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    382  f1c8
    383  f1c8				   SetObjectXPos subroutine
    384  f1c8		       85 02		      sta	WSYNC	; Get fresh scanline
    385  f1ca		       38		      sec		; Set carry flag
    386  f1cb				   .Div15Loop		; Divide A with 15 by subtraction in loop
    387  f1cb		       e9 0f		      sbc	#15	; Subtract 15 from A
    388  f1cd		       b0 fc		      bcs	.Div15Loop	; Loop if carry flag is set
    389  f1cf		       49 07		      eor	#7	; Adjust the remainder in A between -8 and 7
    390  f1d1					      REPEAT	4	; Repeat 4 times
    391  f1d1		       0a		      asl		; Shift bits left by one
    390  f1d1					      REPEND		; End of repeat
    391  f1d2		       0a		      asl		; Shift bits left by one
    390  f1d2					      REPEND		; End of repeat
    391  f1d3		       0a		      asl		; Shift bits left by one
    390  f1d3					      REPEND		; End of repeat
    391  f1d4		       0a		      asl		; Shift bits left by one
    392  f1d5					      REPEND		; End of repeat
    393  f1d5		       99 20 00 	      sta	HMP0,Y	; Set fine position value for object HMP0+Y
    394  f1d8		       99 10 00 	      sta	RESP0,Y	; Seset rough position for object HMP0+Y
    395  f1db
    396  f1db		       60		      rts		; Return from subroutine
    397  f1dc
    398  f1dc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    399  f1dc							;; Lookup tabes
    400  f1dc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    401  f1dc
    402  f1dc							; https://www.masswerk.at/vcs-tools/TinyPlayfieldEditor/
    403  f1dc							; mode: asymmetric repeat line-height 4
    404  f1dc				   LM_LogoPF0
    405  f1dc		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$90
    406  f1e4		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$40,$00,$40
    407  f1ec		       00 70		      .byte.b	$00,$70
    408  f1ee				   LM_LogoPF1
    409  f1ee		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$00,$05,$DE
    410  f1f6		       0a 42 0a 4e*	      .byte.b	$0A,$42,$0A,$4E,$08,$52,$08,$56
    411  f1fe		       38 7b		      .byte.b	$38,$7B
    412  f200				   LM_LogoPF2
    413  f200		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$80,$00,$F8,$00
    414  f208		       a5 00 a5 00*	      .byte.b	$A5,$00,$A5,$00,$BF,$00,$85,$00
    415  f210		       39 03		      .byte.b	$39,$03
    416  f212
    417  f212				   LM_LogoFade_Color
    418  f212		       0e 3e 3c 3a*	      .byte.b	$0E,$3E,$3C,$3A,$38
    419  f217
    420  f217				   LM_LogoFade_BW
    421  f217		       0e 0e 0c 0a*	      .byte.b	$0E,$0E,$0C,$0A,$08
    422  f21c
    423  f21c
    424  f21c							;---Graphics Data from PlayerPal 2600---
    425  f21c							; BGCOLOR = $C8
    426  f21c
    427  f21c				   GM_DRESS_IDLE
    428  f21c		       00		      .byte.b	#0
    429  f21d		       7e		      .byte.b	#%01111110	;$70
    430  f21e		       7e		      .byte.b	#%01111110	;$70
    431  f21f		       3c		      .byte.b	#%00111100	;$70
    432  f220		       5a		      .byte.b	#%01011010	;$84
    433  f221		       7e		      .byte.b	#%01111110	;$84
    434  f222		       18		      .byte.b	#%00011000	;$F4
    435  f223		       3c		      .byte.b	#%00111100	;$00
    436  f224		       18		      .byte.b	#%00011000	;$00
    437  f225				   GM_DRESS_WALK1
    438  f225		       00		      .byte.b	#0
    439  f226		       78		      .byte.b	#%01111000	;$70
    440  f227		       7e		      .byte.b	#%01111110	;$70
    441  f228		       3c		      .byte.b	#%00111100	;$70
    442  f229		       1a		      .byte.b	#%00011010	;$84
    443  f22a		       7e		      .byte.b	#%01111110	;$84
    444  f22b		       18		      .byte.b	#%00011000	;$F4
    445  f22c		       3c		      .byte.b	#%00111100	;$00
    446  f22d		       18		      .byte.b	#%00011000	;$00
    447  f22e				   GM_DRESS_WALK2
    448  f22e		       00		      .byte.b	#0
    449  f22f		       1e		      .byte.b	#%00011110	;$70
    450  f230		       7e		      .byte.b	#%01111110	;$70
    451  f231		       3c		      .byte.b	#%00111100	;$70
    452  f232		       58		      .byte.b	#%01011000	;$84
    453  f233		       7e		      .byte.b	#%01111110	;$84
    454  f234		       18		      .byte.b	#%00011000	;$F4
    455  f235		       3c		      .byte.b	#%00111100	;$00
    456  f236		       18		      .byte.b	#%00011000	;$00
    457  f237				   GM_PANTS_IDLE
    458  f237		       00		      .byte.b	#0
    459  f238		       66		      .byte.b	#%01100110	;$70
    460  f239		       24		      .byte.b	#%00100100	;$70
    461  f23a		       3c		      .byte.b	#%00111100	;$70
    462  f23b		       5a		      .byte.b	#%01011010	;$84
    463  f23c		       7e		      .byte.b	#%01111110	;$84
    464  f23d		       18		      .byte.b	#%00011000	;$F4
    465  f23e		       3c		      .byte.b	#%00111100	;$00
    466  f23f		       18		      .byte.b	#%00011000	;$00
    467  f240				   GM_PANTS_WALK1
    468  f240		       00		      .byte.b	#0
    469  f241		       60		      .byte.b	#%01100000	;$70
    470  f242		       26		      .byte.b	#%00100110	;$70
    471  f243		       3c		      .byte.b	#%00111100	;$70
    472  f244		       1a		      .byte.b	#%00011010	;$84
    473  f245		       7e		      .byte.b	#%01111110	;$84
    474  f246		       18		      .byte.b	#%00011000	;$F4
    475  f247		       3c		      .byte.b	#%00111100	;$00
    476  f248		       18		      .byte.b	#%00011000	;$00
    477  f249				   GM_PANTS_WALK2
    478  f249		       00		      .byte.b	#0
    479  f24a		       06		      .byte.b	#%00000110	;$70
    480  f24b		       64		      .byte.b	#%01100100	;$70
    481  f24c		       3c		      .byte.b	#%00111100	;$70
    482  f24d		       58		      .byte.b	#%01011000	;$84
    483  f24e		       7e		      .byte.b	#%01111110	;$84
    484  f24f		       18		      .byte.b	#%00011000	;$F4
    485  f250		       3c		      .byte.b	#%00111100	;$00
    486  f251		       18		      .byte.b	#%00011000	;$00
    487  f252							;---End Graphics Data---
    488  f252
    489  f252
    490  f252							;---Color Data from PlayerPal 2600---
    491  f252				   GM_PLAYER_COLOR
    492  f252		       00		      .byte.b	#0
    493  f253		       70		      .byte.b	#$70	;
    494  f254		       70		      .byte.b	#$70	;
    495  f255		       70		      .byte.b	#$70	;
    496  f256		       84		      .byte.b	#$84	;
    497  f257		       84		      .byte.b	#$84	;
    498  f258		       f4		      .byte.b	#$F4	;
    499  f259		       00		      .byte.b	#$00	;
    500  f25a		       00		      .byte.b	#$00	;
    501  f25b
    502  f25b				   GM_PLAYER_BW
    503  f25b		       00		      .byte.b	#0
    504  f25c		       00		      .byte.b	#$0	;
    505  f25d		       00		      .byte.b	#$0	;
    506  f25e		       00		      .byte.b	#$0	;
    507  f25f		       02		      .byte.b	#$02	;
    508  f260		       02		      .byte.b	#$02	;
    509  f261		       04		      .byte.b	#$04	;
    510  f262		       00		      .byte.b	#$00	;
    511  f263		       00		      .byte.b	#$00	;
    512  f264
    513  f264							;---End Color Data---
    514  f264
    515  f264							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    516  f264							;; Fill the 4K ROM
    517  f264							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    518  fffc					      org	$FFFC
    519  fffc		       00 f0		      .word.w	Reset	; Reset vector
    520  fffe		       00 f0		      .word.w	Reset	; Interrupt Vector
    521  10000
    522  10000
