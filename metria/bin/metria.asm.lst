------- FILE metria.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE metria.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE metria.asm
      5  0000 ????
      6  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  0000 ????						;; Macros
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????
     10  0000 ????				      MAC	wait_x_wsync
     11  0000 ????			   .WaitX
     12  0000 ????				      sta	WSYNC	; Wait for horizontal blank
     13  0000 ????				      dex		; X--
     14  0000 ????				      bne	.WaitX	; Loop until X = 0
     15  0000 ????				      ENDM
     16  0000 ????
     17  0000 ????				      MAC	fire_missile
     18  0000 ????				      lda	GM_MissileActive
     19  0000 ????				      bne	.NoMissile
     20  0000 ????				      lda	GM_PlayerXPos
     21  0000 ????				      clc
     22  0000 ????				      adc	#5
     23  0000 ????				      sta	GM_MissileXPos
     24  0000 ????				      lda	#70
     25  0000 ????				      sta	GM_MissileYPos
     26  0000 ????				      lda	#2
     27  0000 ????				      sta	GM_MissileActive
     28  0000 ????				      ldy	#sfxCOLLIDE
     29  0000 ????				      jsr	SFX_TRIGGER
     30  0000 ????			   .NoMissile
     31  0000 ????				      ENDM
     32  0000 ????
     33  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     34  0000 ????						;; Contants
     35  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     36  0000 ????
     37  0000 ????	       00 08	   BW_MASK    =	%00001000	; bitmask for black & white switch
     38  0000 ????	       00 01	   RESET_MASK =	%00000001	; bitmask for reset switch
     39  0000 ????	       00 80	   LEFT_BTN_MASK =	%10000000	; bitmask for left joystick button
     40  0000 ????	       00 2b	   TIMER_VBLANK =	43	; value for TIM64T vertical blank timer
     41  0000 ????	       00 23	   TIMER_OVERSCAN =	35	; value for TIM64T overscan timer
     42  0000 ????
     43  0000 ????	       00 72	   RANDOM_SEED =	$72
     44  0000 ????
     45  0000 ????	       00 38	   LOGO_BK_COLOR =	$38	; logo mode background color - color mode
     46  0000 ????	       00 06	   LOGO_BK_BW =	$06	; logo mode background color - black & white
     47  0000 ????	       00 04	   LOGO_FADE_INIT_STATE =	4	; initial value for the logo fade in state
     48  0000 ????	       00 28	   LOGO_FADE_INIT_DELAY =	40	; initial delay value before logo fades in
     49  0000 ????	       00 14	   LOGO_FADE_DELAY =	20	; delay for each fade step - 20 frames/step
     50  0000 ????
     51  0000 ????	       00 c8	   GAME_BK_COLOR =	$C8	; game background color - color mode
     52  0000 ????	       00 08	   GAME_BK_BW =	$08	; game background color - black & white
     53  0000 ????	       00 c0	   GAME_PF_COLOR =	$C0	; game playfield color - color mode
     54  0000 ????	       00 04	   GAME_PF_BW =	$04	; game playfield color - black & white
     55  0000 ????	       00 78	   GAME_SKY_COLOR =	$78	; game sky color - color mode
     56  0000 ????	       00 04	   GAME_SKY_BW =	$04	; game sky color - black & white
     57  0000 ????
     58  0000 ????	       00 00	   GAME_SCOREBACK_COLOR =	$0	; game score board color - all modes
     59  0000 ????	       00 20	   GAME_GAMEOVER_COLOR =	$20	; game over color - color mode
     60  0000 ????	       00 02	   GAME_GAMEOVER_BW =	$02	; game over color - black & white
     61  0000 ????
     62  0000 ????	       00 09	   GAME_PLAYER_HEIGHT =	9	; player sprite height
     63  0000 ????	       00 09	   GAME_BUG_HEIGHT =	9	; bug sprite height
     64  0000 ????
     65  0000 ????	       00 00	   GAME_PLAYER_MIN_X =	0	; player minimun x
     66  0000 ????	       00 92	   GAME_PLAYER_MAX_X =	146	; player minimun x
     67  0000 ????	       00 02	   GAME_PLAYER_MIN_Y =	2	; player minimun x
     68  0000 ????	       00 3e	   GAME_PLAYER_MAX_Y =	62	; player minimun x
     69  0000 ????	       00 0a	   GAME_PLAYER_ANIM_SPEED =	10
     70  0000 ????
     71  0000 ????	       00 06	   GAME_BIRD_HEIGHT =	6	; bird sprite height
     72  0000 ????	       00 0a	   GAME_BIRD_TICK_LEN =	10	; bird anim speed
     73  0000 ????	       00 0c	   GAME_BIRD_YPOS_TBL_LEN =	12	; bird anim table length
     74  0000 ????
     75  0000 ????	       00 05	   GAME_DIGIT_HEIGHT =	5	; digit height
     76  0000 ????
     77  0000 ????	       00 60	   GAME_MAX_TIME =	%01100000
     78  0000 ????
     79  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  0000 ????						;; RAM variables located outside ROM at address $0080
     81  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  0000 ????
     83 U00b7 ????				      seg.u	variables
     84 U0080					      org	$80	; RAM address memory start
     85 U0080
     86 U0080		       00	   LM_LogoFadeState ds	1	; current logo fade state
     87 U0081		       00	   LM_LogoFadeDelay ds	1	; current logo fade delay
     88 U0082
     89 U0082		       00	   GM_BackgroundColor ds	1
     90 U0083		       00	   GM_TreeColor ds	1
     91 U0084		       00	   GM_SkyColor ds	1
     92 U0085
     93 U0085		       00 00	   GM_PlayerPtr ds	2
     94 U0087		       00 00	   GM_PlayerColorPtr ds	2
     95 U0089		       00	   GM_PlayerXPos ds	1
     96 U008a		       00	   GM_PlayerYPos ds	1
     97 U008b		       00	   GM_PlayerAnimOn ds	1
     98 U008c		       00	   GM_PlayerAnimFrame ds	1
     99 U008d		       00	   GM_PlayerAnimTicks ds	1
    100 U008e
    101 U008e		       00 00	   GM_BirdPtr ds	2
    102 U0090		       00 00	   GM_BirdColorPtr ds	2
    103 U0092		       00	   GM_BirdYPos ds	1
    104 U0093		       00	   GM_BirdReflection ds	1
    105 U0094
    106 U0094		       00	   GM_BirdTick ds	1
    107 U0095		       00	   GM_BirdYPosIdx ds	1
    108 U0096
    109 U0096		       00	   GM_MissileXPos ds	1
    110 U0097		       00	   GM_MissileYPos ds	1
    111 U0098		       00	   GM_MissileActive ds	1
    112 U0099
    113 U0099		       00 00	   GM_BugColorPtr ds	2
    114 U009b		       00	   GM_BugXPos ds	1
    115 U009c		       00	   GM_BugYPos ds	1
    116 U009d		       00	   GM_PlayfieldIdx ds	1
    117 U009e
    118 U009e		       00	   PFCounter  ds	1
    119 U009f		       00	   Random     ds	1
    120 U00a0
    121 U00a0		       00	   GameOver   ds	1
    122 U00a1		       00	   Score      ds	1	; stored as BCD
    123 U00a2		       00	   Timer      ds	1	; stored as BCD
    124 U00a3		       00	   TimerTick  ds	1
    125 U00a4		       00 00	   OnesDigitOffset ds	2
    126 U00a6		       00 00	   TensDigitOffset ds	2
    127 U00a8		       00	   Temp       ds	1
    128 U00a9		       00 00 00 00*ScoreSprite ds	6
    129 U00af		       00 00 00 00*TimerSprite ds	6
    130 U00b5
    131 U00b5		       00	   SFX_LEFT   ds	1
    132 U00b6		       00	   SFX_RIGHT  ds	1
    133 U00b7
    134 U00b7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    135 U00b7							;; Program start - Located at top of ROM at address $F000
    136 U00b7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    137 U00b7
    138  10000 ????				       seg	code
    139  f000					      org	$F000	; start address of ROM
    140  f000
    141  f000				   Reset
      0  f000					      CLEAN_START		; set machine to known state on startup
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
    143  f00a
    144  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    145  f00a							;; Init variables
    146  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    147  f00a
    148  f00a		       a9 72		      lda	#RANDOM_SEED
    149  f00c		       85 9f		      sta	Random
    150  f00e
    151  f00e		       a9 04		      lda	#LOGO_FADE_INIT_STATE
    152  f010		       85 80		      sta	LM_LogoFadeState	; initialize logo fade state
    153  f012		       a9 28		      lda	#LOGO_FADE_INIT_DELAY
    154  f014		       85 81		      sta	LM_LogoFadeDelay	; initialize logo fade delay
    155  f016
      0  f016					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f016				   .POINTER   SET	GM_PlayerPtr
      2  f016				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f016
      4  f016		       a9 84		      LDA	#<.ADDRESS
      5  f018		       85 85		      STA	.POINTER
      6  f01a		       a9 f6		      LDA	#>.ADDRESS
      7  f01c		       85 86		      STA	.POINTER+1
      8  f01e
      0  f01e					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f01e				   .POINTER   SET	GM_PlayerColorPtr
      2  f01e				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f01e
      4  f01e		       a9 e3		      LDA	#<.ADDRESS
      5  f020		       85 87		      STA	.POINTER
      6  f022		       a9 f6		      LDA	#>.ADDRESS
      7  f024		       85 88		      STA	.POINTER+1
      8  f026
    158  f026
      0  f026					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f026				   .POINTER   SET	GM_BugColorPtr
      2  f026				   .ADDRESS   SET	GM_BUG_COLOR
      3  f026
      4  f026		       a9 19		      LDA	#<.ADDRESS
      5  f028		       85 99		      STA	.POINTER
      6  f02a		       a9 f7		      LDA	#>.ADDRESS
      7  f02c		       85 9a		      STA	.POINTER+1
      8  f02e
    160  f02e
      0  f02e					      SET_POINTER	GM_BirdPtr, GM_BIRD_1
      1  f02e				   .POINTER   SET	GM_BirdPtr
      2  f02e				   .ADDRESS   SET	GM_BIRD_1
      3  f02e
      4  f02e		       a9 c3		      LDA	#<.ADDRESS
      5  f030		       85 8e		      STA	.POINTER
      6  f032		       a9 f6		      LDA	#>.ADDRESS
      7  f034		       85 8f		      STA	.POINTER+1
      8  f036
    162  f036
    163  f036		       a9 3e		      lda	#62
    164  f038		       85 89		      sta	GM_PlayerXPos
    165  f03a		       a9 15		      lda	#21
    166  f03c		       85 8a		      sta	GM_PlayerYPos
    167  f03e
    168  f03e		       a9 00		      lda	#0
    169  f040		       85 92		      sta	GM_BirdYPos
    170  f042		       a9 00		      lda	#0
    171  f044		       85 93		      sta	GM_BirdReflection
    172  f046		       85 98		      sta	GM_MissileActive
    173  f048		       a9 0a		      lda	#GAME_BIRD_TICK_LEN
    174  f04a		       85 94		      sta	GM_BirdTick
    175  f04c
    176  f04c		       a9 01		      lda	#1
    177  f04e		       85 a3		      sta	TimerTick
    178  f050		       a9 60		      lda	#GAME_MAX_TIME
    179  f052		       85 a2		      sta	Timer
    180  f054
    181  f054		       a9 01		      lda	#1
    182  f056		       85 a0		      sta	GameOver
    183  f058
    184  f058		       a9 02		      lda	#2
    185  f05a		       85 01		      sta	VBLANK	; turn on VBLANK
    186  f05c
    187  f05c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    188  f05c							;; LOGO MODE - LM
    189  f05c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    190  f05c				   LM_NextFrame
      0  f05c					      VERTICAL_SYNC		; vertical sync - 3 scanlines
      1  f05c		       a9 0e		      lda	#%1110
      2  f05e		       85 02	   .VSLP1     sta	WSYNC
      3  f060		       85 00		      sta	VSYNC
      4  f062		       4a		      lsr
      5  f063		       d0 f9		      bne	.VSLP1
    192  f065
    193  f065							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    194  f065							;; Vertical Blank - 37 scanlines - 2812 mc
    195  f065							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    196  f065		       a9 2b		      lda	#TIMER_VBLANK
    197  f067		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    198  f06a
    199  f06a				   .LM_Fade		; handles logo fade in
    200  f06a		       a5 80		      lda	LM_LogoFadeState
    201  f06c		       c9 00		      cmp	#0
    202  f06e		       f0 13		      beq	.LM_FadeDone	; if fade in is complete then jump out
    203  f070		       c6 81		      dec	LM_LogoFadeDelay	; dec fade delay
    204  f072		       d0 0f		      bne	.LM_FadeDone	; if still waiting for delay then jump out
    205  f074		       c6 80		      dec	LM_LogoFadeState	; dec fade in state
    206  f076		       a9 14		      lda	#LOGO_FADE_DELAY
    207  f078		       85 81		      sta	LM_LogoFadeDelay	; restore fade in delay
    208  f07a
    209  f07a		       a5 80		      lda	LM_LogoFadeState
    210  f07c		       d0 05		      bne	.LM_FadeDone
    211  f07e		       a0 20		      ldy	#sfxPING
    212  f080		       20 99 f5 	      jsr	SFX_TRIGGER
    213  f083				   .LM_FadeDone
    214  f083
    215  f083				   .LM_SetColor 		; set correct colors
    216  f083		       a4 80		      ldy	LM_LogoFadeState	; set Y = index of logo color
    217  f085		       ad 82 02 	      lda	SWCHB	; load console switches
    218  f088		       29 08		      and	#BW_MASK	; check if black & white
    219  f08a		       f0 0c		      beq	.LM_BWMode
    220  f08c				   .LM_ColorMode
    221  f08c		       a9 38		      lda	#LOGO_BK_COLOR
    222  f08e		       85 09		      sta	COLUBK	; set background color
    223  f090		       b9 2a f6 	      lda	LM_LogoFade_Color,Y
    224  f093		       85 08		      sta	COLUPF	; set logo color
    225  f095		       4c a1 f0 	      jmp	.LM_SetColorDone
    226  f098				   .LM_BWMode
    227  f098		       a9 06		      lda	#LOGO_BK_BW
    228  f09a		       85 09		      sta	COLUBK	; set background color
    229  f09c		       b9 2f f6 	      lda	LM_LogoFade_BW,Y
    230  f09f		       85 08		      sta	COLUPF	; set logo color
    231  f0a1				   .LM_SetColorDone
    232  f0a1
    233  f0a1		       e6 9f		      inc	Random
    234  f0a3
    235  f0a3				   .LM_VBLankWait
    236  f0a3		       ae 84 02 	      ldx	INTIM
    237  f0a6		       d0 fb		      bne	.LM_VBLankWait	; wait until timer is done
    238  f0a8		       a9 00		      lda	#0
    239  f0aa		       85 02		      sta	WSYNC	; get a fresh scanline
    240  f0ac							; -------------------------
    241  f0ac		       85 01		      sta	VBLANK	; turn off VBLANK
    242  f0ae
    243  f0ae							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    244  f0ae							;; Playfield - 192 scanlines - 14592 mc
    245  f0ae							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    246  f0ae
    247  f0ae				   .LM_Top		; waste 68 scanlines
    248  f0ae		       a2 44		      ldx	#68
      0  f0b0					      WAIT_X_WSYNC
      1  f0b0				   .WaitX
      2  f0b0		       85 02		      sta	WSYNC
      3  f0b2		       ca		      dex
      4  f0b3		       d0 fb		      bne	.WaitX
    250  f0b5							; -------------------------
    251  f0b5
    252  f0b5				   .LM_Middle		; logo is a total of 36 scanlines
    253  f0b5		       a0 00		      ldy	#0	; Y = index to playfield bytes
    254  f0b7				   .LM_LoopY
    255  f0b7		       a2 04		      ldx	#4	; draw every logo line 4 scanlines
    256  f0b9				   .LM_LoopX
    257  f0b9		       85 02		      sta	WSYNC	; get fresh scanline
    258  f0bb							; -------------------------
    259  f0bb		       b9 f4 f5 	      lda	LM_LogoPF0,Y
    260  f0be		       85 0d		      sta	PF0	; set first part of left playfield
    261  f0c0		       b9 06 f6 	      lda	LM_LogoPF1,Y
    262  f0c3		       85 0e		      sta	PF1	; set second part of left playfield
    263  f0c5		       b9 18 f6 	      lda	LM_LogoPF2,Y
    264  f0c8		       85 0f		      sta	PF2	; set third part of left playfield
    265  f0ca		       c8		      iny		; inc Y to get the right playfield bytes
    266  f0cb		       b9 f4 f5 	      lda	LM_LogoPF0,Y
    267  f0ce		       85 0d		      sta	PF0	; set first part of right playfield
    268  f0d0		       b9 06 f6 	      lda	LM_LogoPF1,Y
    269  f0d3		       85 0e		      sta	PF1	; set second part of right playfield
    270  f0d5		       b9 18 f6 	      lda	LM_LogoPF2,Y
    271  f0d8		       88		      dey		; dec Y to bea able to repeat left/right for 4 lines
    272  f0d9		       ea		      nop		; just for timing
    273  f0da		       85 0f		      sta	PF2	; set third part of right playfield
    274  f0dc
    275  f0dc		       ca		      dex
    276  f0dd		       d0 da		      bne	.LM_LoopX	; loop while we havn't drawn 4 scanlines
    277  f0df		       c8		      iny
    278  f0e0		       c8		      iny		; inc y by 2 to get to the next playfield byte pairs
    279  f0e1		       c0 12		      cpy	#18	; all bytes drawn?
    280  f0e3		       d0 d2		      bne	.LM_LoopY	; loop until all logo bytes are drawn
    281  f0e5
    282  f0e5				   .LM_TurnOffLogo		; use 1 scanline to turn off logo
    283  f0e5		       a5 02		      lda	WSYNC	; get a fresh scanline
    284  f0e7							; -------------------------
    285  f0e7		       a9 00		      lda	#0
    286  f0e9		       85 0d		      sta	PF0	; reset playfield graphics
    287  f0eb		       85 0e		      sta	PF1
    288  f0ed		       85 0f		      sta	PF2
    289  f0ef
    290  f0ef				   .LM_Bottom
    291  f0ef		       a2 57		      ldx	#87	; waste remaining 87 scanlines
      0  f0f1					      WAIT_X_WSYNC
      1  f0f1				   .WaitX
      2  f0f1		       85 02		      sta	WSYNC
      3  f0f3		       ca		      dex
      4  f0f4		       d0 fb		      bne	.WaitX
    293  f0f6							; -------------------------
    294  f0f6
    295  f0f6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    296  f0f6							;; Overscan - 30 scanlines - 2280 mc
    297  f0f6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    298  f0f6		       a9 02		      lda	#2	; A = 2 = #%00000010
    299  f0f8		       85 01		      sta	VBLANK	; Turn on VBLANK
    300  f0fa		       a9 23		      lda	#TIMER_OVERSCAN
    301  f0fc		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    302  f0ff
    303  f0ff				   .LM_CheckReset
    304  f0ff		       ad 82 02 	      lda	SWCHB	; load console switches
    305  f102		       29 01		      and	#RESET_MASK
    306  f104		       d0 03		      bne	.LM_NoReset
    307  f106		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    308  f109				   .LM_NoReset
    309  f109
    310  f109				   .LM_CheckLeftButton
    311  f109		       a5 0c		      lda	INPT4	; load left joystick button
    312  f10b		       29 80		      and	#LEFT_BTN_MASK
    313  f10d		       d0 08		      bne	.LM_NoLeftButton
    314  f10f		       85 02		      sta	WSYNC
    315  f111		       20 62 f4 	      jsr	PlaceBug
    316  f114		       4c 24 f1 	      jmp	GM_NextFrame	; start game if button is pressed
    317  f117				   .LM_NoLeftButton
    318  f117
    319  f117		       20 bb f5 	      jsr	SFX_UPDATE	; update sound effects
    320  f11a
    321  f11a				   .LM_OverscanWait
    322  f11a		       ae 84 02 	      ldx	INTIM
    323  f11d		       d0 fb		      bne	.LM_OverscanWait	; wait until timer is done
    324  f11f		       85 02		      sta	WSYNC
    325  f121							; -------------------------
    326  f121		       4c 5c f0 	      jmp	LM_NextFrame
    327  f124
    328  f124
    329  f124							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    330  f124							;; GAME MODE - GM
    331  f124							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    332  f124				   GM_NextFrame
      0  f124					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f124		       a9 0e		      lda	#%1110
      2  f126		       85 02	   .VSLP1     sta	WSYNC
      3  f128		       85 00		      sta	VSYNC
      4  f12a		       4a		      lsr
      5  f12b		       d0 f9		      bne	.VSLP1
    334  f12d
    335  f12d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    336  f12d							;; Vertical Blank - 37 scanlines - 2812 mc
    337  f12d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    338  f12d		       a9 2b		      lda	#TIMER_VBLANK
    339  f12f		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    340  f132
    341  f132				   .GM_CheckCollisions
    342  f132
    343  f132				   .GM_CheckColP0ToP1
    344  f132		       a5 07		      lda	CXPPMM
    345  f134		       29 80		      and	#%10000000
    346  f136		       f0 11		      beq	.GM_CheckColP0ToP1Done
    347  f138		       f8		      sed
    348  f139		       a5 a1		      lda	Score
    349  f13b		       18		      clc
    350  f13c		       69 01		      adc	#1
    351  f13e		       85 a1		      sta	Score
    352  f140		       d8		      cld
    353  f141		       a0 10		      ldy	#sfxCOLLECT
    354  f143		       20 99 f5 	      jsr	SFX_TRIGGER
    355  f146		       20 62 f4 	      jsr	PlaceBug
    356  f149				   .GM_CheckColP0ToP1Done
    357  f149
    358  f149				   .GM_CheckColM1ToP0
    359  f149		       a5 01		      lda	CXM1P
    360  f14b		       29 80		      and	#%10000000
    361  f14d		       f0 0d		      beq	.GM_CheckColM1ToP0Done
    362  f14f		       a9 00		      lda	#0
    363  f151		       85 a1		      sta	Score
    364  f153		       a9 00		      lda	#0
    365  f155		       85 98		      sta	GM_MissileActive
    366  f157		       a0 30		      ldy	#sfxGAMEOVER
    367  f159		       20 99 f5 	      jsr	SFX_TRIGGER
    368  f15c				   .GM_CheckColM1ToP0Done
    369  f15c
    370  f15c
    371  f15c				   .GM_CheckColM1ToPF
    372  f15c		       a5 05		      lda	CXM1FB
    373  f15e		       29 80		      and	#%10000000
    374  f160		       f0 04		      beq	.GM_CheckColM1ToPFDone
    375  f162		       a9 00		      lda	#0
    376  f164		       85 98		      sta	GM_MissileActive
    377  f166				   .GM_CheckColM1ToPFDone
    378  f166
    379  f166
    380  f166				   .GM_CheckCollisionsDone
    381  f166		       85 2c		      sta	CXCLR
    382  f168
    383  f168		       a5 89		      lda	GM_PlayerXPos	; load player x pos
    384  f16a		       a0 00		      ldy	#0	; set Y = 0 for player 0
    385  f16c		       20 85 f4 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    386  f16f
    387  f16f		       a5 9b		      lda	GM_BugXPos	; load bug x pos
    388  f171		       a0 01		      ldy	#1	; set Y = 1 for player 1
    389  f173		       20 85 f4 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    390  f176
    391  f176		       a5 96		      lda	GM_MissileXPos	; load bug x pos
    392  f178		       a0 03		      ldy	#3	; set Y = 2 for missile 0
    393  f17a		       20 85 f4 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    394  f17d
    395  f17d		       85 02		      sta	WSYNC	; geta fresh scanline
    396  f17f							; -------------------------
    397  f17f		       85 2a		      sta	HMOVE	; apply positions offset
    398  f181
    399  f181				   .GM_HandleTimer
    400  f181		       a5 a0		      lda	GameOver
    401  f183		       d0 1e		      bne	.GM_HandleTimerDone
    402  f185
    403  f185		       c6 a3		      dec	TimerTick
    404  f187		       d0 1a		      bne	.GM_HandleTimerDone
    405  f189
    406  f189		       a9 3c		      lda	#60
    407  f18b		       85 a3		      sta	TimerTick
    408  f18d
    409  f18d		       f8		      sed
    410  f18e		       a5 a2		      lda	Timer
    411  f190		       38		      sec
    412  f191		       e9 01		      sbc	#1
    413  f193		       85 a2		      sta	Timer
    414  f195		       d8		      cld
    415  f196
    416  f196		       a5 a2		      lda	Timer
    417  f198		       d0 09		      bne	.GM_HandleTimerDone
    418  f19a		       a9 01		      lda	#1
    419  f19c		       85 a0		      sta	GameOver
    420  f19e		       a0 49		      ldy	#sfxTEST
    421  f1a0		       20 99 f5 	      jsr	SFX_TRIGGER
    422  f1a3
    423  f1a3				   .GM_HandleTimerDone
    424  f1a3
    425  f1a3				   .GM_SetColor 		; set correct colors
    426  f1a3		       ad 82 02 	      lda	SWCHB
    427  f1a6		       25 08		      and	BW_MASK
    428  f1a8		       f0 36		      beq	.GM_BWMode
    429  f1aa				   .GM_ColorMode
    430  f1aa		       a9 78		      lda	#GAME_SKY_COLOR
    431  f1ac		       85 84		      sta	GM_SkyColor
    432  f1ae		       a9 c8		      lda	#GAME_BK_COLOR
    433  f1b0		       85 82		      sta	GM_BackgroundColor
    434  f1b2		       a9 c0		      lda	#GAME_PF_COLOR
    435  f1b4		       85 83		      sta	GM_TreeColor
      0  f1b6					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f1b6				   .POINTER   SET	GM_PlayerColorPtr
      2  f1b6				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f1b6
      4  f1b6		       a9 e3		      LDA	#<.ADDRESS
      5  f1b8		       85 87		      STA	.POINTER
      6  f1ba		       a9 f6		      LDA	#>.ADDRESS
      7  f1bc		       85 88		      STA	.POINTER+1
      8  f1be
      0  f1be					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f1be				   .POINTER   SET	GM_BugColorPtr
      2  f1be				   .ADDRESS   SET	GM_BUG_COLOR
      3  f1be
      4  f1be		       a9 19		      LDA	#<.ADDRESS
      5  f1c0		       85 99		      STA	.POINTER
      6  f1c2		       a9 f7		      LDA	#>.ADDRESS
      7  f1c4		       85 9a		      STA	.POINTER+1
      8  f1c6
      0  f1c6					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_COLOR
      1  f1c6				   .POINTER   SET	GM_BirdColorPtr
      2  f1c6				   .ADDRESS   SET	GM_BIRD_COLOR
      3  f1c6
      4  f1c6		       a9 2b		      LDA	#<.ADDRESS
      5  f1c8		       85 90		      STA	.POINTER
      6  f1ca		       a9 f7		      LDA	#>.ADDRESS
      7  f1cc		       85 91		      STA	.POINTER+1
      8  f1ce
    439  f1ce
    440  f1ce				   .GM_SetCoreboardColorCM
    441  f1ce		       a5 a2		      lda	Timer
    442  f1d0		       f0 07		      beq	.GM_GameOverCM
    443  f1d2		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    444  f1d4		       85 09		      sta	COLUBK
    445  f1d6		       4c dd f1 	      jmp	.GM_SetScoreboardColorCMDone
    446  f1d9				   .GM_GameOverCM
    447  f1d9		       a9 20		      lda	#GAME_GAMEOVER_COLOR
    448  f1db		       85 09		      sta	COLUBK
    449  f1dd				   .GM_SetScoreboardColorCMDone
    450  f1dd
    451  f1dd		       4c 13 f2 	      jmp	.GM_SetColorDone
    452  f1e0				   .GM_BWMode
    453  f1e0		       a9 04		      lda	#GAME_SKY_BW
    454  f1e2		       85 84		      sta	GM_SkyColor
    455  f1e4		       a9 08		      lda	#GAME_BK_BW
    456  f1e6		       85 82		      sta	GM_BackgroundColor
    457  f1e8		       a9 04		      lda	#GAME_PF_BW
    458  f1ea		       85 83		      sta	GM_TreeColor
      0  f1ec					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_BW_IDLE
      1  f1ec				   .POINTER   SET	GM_PlayerColorPtr
      2  f1ec				   .ADDRESS   SET	GM_PLAYER_BW_IDLE
      3  f1ec
      4  f1ec		       a9 fe		      LDA	#<.ADDRESS
      5  f1ee		       85 87		      STA	.POINTER
      6  f1f0		       a9 f6		      LDA	#>.ADDRESS
      7  f1f2		       85 88		      STA	.POINTER+1
      8  f1f4
      0  f1f4					      SET_POINTER	GM_BugColorPtr, GM_BUG_BW
      1  f1f4				   .POINTER   SET	GM_BugColorPtr
      2  f1f4				   .ADDRESS   SET	GM_BUG_BW
      3  f1f4
      4  f1f4		       a9 22		      LDA	#<.ADDRESS
      5  f1f6		       85 99		      STA	.POINTER
      6  f1f8		       a9 f7		      LDA	#>.ADDRESS
      7  f1fa		       85 9a		      STA	.POINTER+1
      8  f1fc
      0  f1fc					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_BW
      1  f1fc				   .POINTER   SET	GM_BirdColorPtr
      2  f1fc				   .ADDRESS   SET	GM_BIRD_BW
      3  f1fc
      4  f1fc		       a9 31		      LDA	#<.ADDRESS
      5  f1fe		       85 90		      STA	.POINTER
      6  f200		       a9 f7		      LDA	#>.ADDRESS
      7  f202		       85 91		      STA	.POINTER+1
      8  f204
    462  f204
    463  f204				   .GM_SetCoreboardColorBW
    464  f204		       a5 a2		      lda	Timer
    465  f206		       f0 07		      beq	.GM_GameOverBW
    466  f208		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    467  f20a		       85 09		      sta	COLUBK
    468  f20c		       4c 13 f2 	      jmp	.GM_SetScoreboardColorBWDone
    469  f20f				   .GM_GameOverBW
    470  f20f		       a9 02		      lda	#GAME_GAMEOVER_BW
    471  f211		       85 09		      sta	COLUBK
    472  f213				   .GM_SetScoreboardColorBWDone
    473  f213
    474  f213				   .GM_SetColorDone
    475  f213
    476  f213				   .GM_SetGraphics
    477  f213		       ad 82 02 	      lda	SWCHB
    478  f216		       29 40		      and	#%01000000
    479  f218		       f0 26		      beq	.GM_SetDress
    480  f21a				   .GM_SetPants
      0  f21a					      SET_POINTER	GM_PlayerPtr, GM_PANTS_IDLE
      1  f21a				   .POINTER   SET	GM_PlayerPtr
      2  f21a				   .ADDRESS   SET	GM_PANTS_IDLE
      3  f21a
      4  f21a		       a9 9f		      LDA	#<.ADDRESS
      5  f21c		       85 85		      STA	.POINTER
      6  f21e		       a9 f6		      LDA	#>.ADDRESS
      7  f220		       85 86		      STA	.POINTER+1
      8  f222
    482  f222		       a5 8b		      lda	GM_PlayerAnimOn
    483  f224		       f0 40		      beq	.GM_SetGraphicsDone
    484  f226
    485  f226		       a5 8c		      lda	GM_PlayerAnimFrame
    486  f228		       d0 0b		      bne	.GM_PANTS2
      0  f22a					      SET_POINTER	GM_PlayerPtr, GM_PANTS_WALK1
      1  f22a				   .POINTER   SET	GM_PlayerPtr
      2  f22a				   .ADDRESS   SET	GM_PANTS_WALK1
      3  f22a
      4  f22a		       a9 a8		      LDA	#<.ADDRESS
      5  f22c		       85 85		      STA	.POINTER
      6  f22e		       a9 f6		      LDA	#>.ADDRESS
      7  f230		       85 86		      STA	.POINTER+1
      8  f232
    488  f232		       4c 66 f2 	      jmp	.GM_SetGraphicsDone
    489  f235				   .GM_PANTS2
      0  f235					      SET_POINTER	GM_PlayerPtr, GM_PANTS_WALK2
      1  f235				   .POINTER   SET	GM_PlayerPtr
      2  f235				   .ADDRESS   SET	GM_PANTS_WALK2
      3  f235
      4  f235		       a9 b1		      LDA	#<.ADDRESS
      5  f237		       85 85		      STA	.POINTER
      6  f239		       a9 f6		      LDA	#>.ADDRESS
      7  f23b		       85 86		      STA	.POINTER+1
      8  f23d
    491  f23d
    492  f23d		       4c 66 f2 	      jmp	.GM_SetGraphicsDone
    493  f240				   .GM_SetDress
      0  f240					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f240				   .POINTER   SET	GM_PlayerPtr
      2  f240				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f240
      4  f240		       a9 84		      LDA	#<.ADDRESS
      5  f242		       85 85		      STA	.POINTER
      6  f244		       a9 f6		      LDA	#>.ADDRESS
      7  f246		       85 86		      STA	.POINTER+1
      8  f248
    495  f248		       a5 8b		      lda	GM_PlayerAnimOn
    496  f24a		       f0 1a		      beq	.GM_SetGraphicsDone
    497  f24c
    498  f24c		       a5 8c		      lda	GM_PlayerAnimFrame
    499  f24e		       d0 0b		      bne	.GM_DRESS2
      0  f250					      SET_POINTER	GM_PlayerPtr, GM_DRESS_WALK1
      1  f250				   .POINTER   SET	GM_PlayerPtr
      2  f250				   .ADDRESS   SET	GM_DRESS_WALK1
      3  f250
      4  f250		       a9 8d		      LDA	#<.ADDRESS
      5  f252		       85 85		      STA	.POINTER
      6  f254		       a9 f6		      LDA	#>.ADDRESS
      7  f256		       85 86		      STA	.POINTER+1
      8  f258
    501  f258		       4c 66 f2 	      jmp	.GM_SetGraphicsDone
    502  f25b				   .GM_DRESS2
      0  f25b					      SET_POINTER	GM_PlayerPtr, GM_DRESS_WALK2
      1  f25b				   .POINTER   SET	GM_PlayerPtr
      2  f25b				   .ADDRESS   SET	GM_DRESS_WALK2
      3  f25b
      4  f25b		       a9 96		      LDA	#<.ADDRESS
      5  f25d		       85 85		      STA	.POINTER
      6  f25f		       a9 f6		      LDA	#>.ADDRESS
      7  f261		       85 86		      STA	.POINTER+1
      8  f263
    504  f263
    505  f263		       4c 66 f2 	      jmp	.GM_SetGraphicsDone
    506  f266				   .GM_SetGraphicsDone
    507  f266
    508  f266				   .GM_PlayfieldInit
    509  f266		       a9 47		      lda	#71
    510  f268		       85 9e		      sta	PFCounter	; 144/2 scanelines
    511  f26a		       20 99 f4 	      jsr	PrepareScoreAndTimer
    512  f26d
    513  f26d				   .GM_VBLankWait
    514  f26d		       ae 84 02 	      ldx	INTIM
    515  f270		       d0 fb		      bne	.GM_VBLankWait	; wait until timer is done
    516  f272		       a9 00		      lda	#0
    517  f274		       85 02		      sta	WSYNC	; get a fresh scanline
    518  f276							; -------------------------
    519  f276		       85 01		      sta	VBLANK	; turn off VBLANK
    520  f278
    521  f278							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    522  f278							;; Score Board - 20 scanlines - 1520 mc
    523  f278							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    524  f278		       a9 0e		      lda	#$0E
    525  f27a		       85 08		      sta	COLUPF
    526  f27c
    527  f27c		       a9 00		      lda	#0
    528  f27e		       85 0d		      sta	PF0
    529  f280		       85 0e		      sta	PF1
    530  f282		       85 0f		      sta	PF2
    531  f284		       a9 00		      lda	#00000000
    532  f286		       85 0a		      sta	CTRLPF	; disable playfield/scoreboard reflection
    533  f288
    534  f288		       a2 05		      ldx	#5
      0  f28a					      WAIT_X_WSYNC
      1  f28a				   .WaitX
      2  f28a		       85 02		      sta	WSYNC
      3  f28c		       ca		      dex
      4  f28d		       d0 fb		      bne	.WaitX
    536  f28f							; -------------------------
    537  f28f
    538  f28f		       a0 05		      ldy	#5
    539  f291				   .GM_ScoreboardLoop
    540  f291
    541  f291					      REPEAT	2
    542  f291		       b9 a9 00 	      lda	ScoreSprite,Y
    543  f294		       85 0e		      sta	PF1
    544  f296
    545  f296					      REPEAT	13
    546  f296		       ea		      nop
    545  f296					      REPEND
    546  f297		       ea		      nop
    545  f297					      REPEND
    546  f298		       ea		      nop
    545  f298					      REPEND
    546  f299		       ea		      nop
    545  f299					      REPEND
    546  f29a		       ea		      nop
    545  f29a					      REPEND
    546  f29b		       ea		      nop
    545  f29b					      REPEND
    546  f29c		       ea		      nop
    545  f29c					      REPEND
    546  f29d		       ea		      nop
    545  f29d					      REPEND
    546  f29e		       ea		      nop
    545  f29e					      REPEND
    546  f29f		       ea		      nop
    545  f29f					      REPEND
    546  f2a0		       ea		      nop
    545  f2a0					      REPEND
    546  f2a1		       ea		      nop
    545  f2a1					      REPEND
    546  f2a2		       ea		      nop
    547  f2a3					      REPEND
    548  f2a3
    549  f2a3		       b9 af 00 	      lda	TimerSprite,Y
    550  f2a6		       85 0e		      sta	PF1
    551  f2a8
    552  f2a8		       85 02		      sta	WSYNC
    553  f2aa							; -------------------------
    541  f2aa					      REPEND
    542  f2aa		       b9 a9 00 	      lda	ScoreSprite,Y
    543  f2ad		       85 0e		      sta	PF1
    544  f2af
    545  f2af					      REPEAT	13
    546  f2af		       ea		      nop
    545  f2af					      REPEND
    546  f2b0		       ea		      nop
    545  f2b0					      REPEND
    546  f2b1		       ea		      nop
    545  f2b1					      REPEND
    546  f2b2		       ea		      nop
    545  f2b2					      REPEND
    546  f2b3		       ea		      nop
    545  f2b3					      REPEND
    546  f2b4		       ea		      nop
    545  f2b4					      REPEND
    546  f2b5		       ea		      nop
    545  f2b5					      REPEND
    546  f2b6		       ea		      nop
    545  f2b6					      REPEND
    546  f2b7		       ea		      nop
    545  f2b7					      REPEND
    546  f2b8		       ea		      nop
    545  f2b8					      REPEND
    546  f2b9		       ea		      nop
    545  f2b9					      REPEND
    546  f2ba		       ea		      nop
    545  f2ba					      REPEND
    546  f2bb		       ea		      nop
    547  f2bc					      REPEND
    548  f2bc
    549  f2bc		       b9 af 00 	      lda	TimerSprite,Y
    550  f2bf		       85 0e		      sta	PF1
    551  f2c1
    552  f2c1		       85 02		      sta	WSYNC
    553  f2c3							; -------------------------
    554  f2c3					      REPEND
    555  f2c3
    556  f2c3		       88		      dey
    557  f2c4		       d0 cb		      bne	.GM_ScoreboardLoop
    558  f2c6
    559  f2c6		       a9 00		      lda	#0
    560  f2c8		       85 0e		      sta	PF1
    561  f2ca
    562  f2ca		       a2 05		      ldx	#5
      0  f2cc					      WAIT_X_WSYNC
      1  f2cc				   .WaitX
      2  f2cc		       85 02		      sta	WSYNC
      3  f2ce		       ca		      dex
      4  f2cf		       d0 fb		      bne	.WaitX
    564  f2d1
    565  f2d1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    566  f2d1							;; Sky - 30 scanlines - 1520 mc
    567  f2d1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    568  f2d1		       a5 84		      lda	GM_SkyColor
    569  f2d3		       85 09		      sta	COLUBK
    570  f2d5		       a2 0e		      ldx	#14
    571  f2d7		       a9 00		      lda	#0
    572  f2d9		       85 25		      sta	VDELP0	; clear vertical delay för player 0
    573  f2db
    574  f2db		       a5 93		      lda	GM_BirdReflection
    575  f2dd		       85 0b		      sta	REFP0
    576  f2df
    577  f2df				   .GM_SkyLoop
    578  f2df
    579  f2df				   .GM_DrawBird
    580  f2df		       8a		      txa		; transfer X to A
    581  f2e0		       38		      sec		; make sure carry flag is set
    582  f2e1		       e5 92		      sbc	GM_BirdYPos	; subtract sprite Y coordinate
    583  f2e3		       c5 06		      cmp	GAME_BIRD_HEIGHT	; are we inside the sprite height bounds?
    584  f2e5		       90 02		      bcc	.GM_WriteBird	; if result < SpriteHeight, call subroutine
    585  f2e7		       a9 00		      lda	#0	; else, set index to 0
    586  f2e9				   .GM_WriteBird
    587  f2e9		       a8		      tay
    588  f2ea		       b1 8e		      lda	(GM_BirdPtr),Y	; load player bitmap slice of data
    589  f2ec		       85 02		      sta	WSYNC	; wait for next scanline
    590  f2ee							; -------------------------
    591  f2ee		       85 1b		      sta	GRP0	; set graphics for player 0 slice
    592  f2f0		       b1 90		      lda	(GM_BirdColorPtr),Y	; load player color from lookup table
    593  f2f2		       85 06		      sta	COLUP0	; set color for player 1 slice
    594  f2f4				   .GM_DrawBirdDone
    595  f2f4		       85 02		      sta	WSYNC	; wait for next scanline
    596  f2f6							; -------------------------
    597  f2f6		       ca		      dex
    598  f2f7		       d0 e6		      bne	.GM_SkyLoop
    599  f2f9
    600  f2f9
    601  f2f9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    602  f2f9							;; Playfield - 152 scanlines - 11552 mc
    603  f2f9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    604  f2f9
    605  f2f9		       a9 01		      lda	#1
    606  f2fb		       85 25		      sta	VDELP0	; set vertical delay för player 0
    607  f2fd		       a9 00		      lda	#0
    608  f2ff		       85 0b		      sta	REFP0
    609  f301		       85 02		      sta	WSYNC
    610  f303		       a5 83		      lda	GM_TreeColor
    611  f305		       85 08		      sta	COLUPF
    612  f307		       a9 00		      lda	#$00	; load player color from lookup table
    613  f309		       85 07		      sta	COLUP1	; set color for player 1 slice
    614  f30b		       a9 01		      lda	#%00000001
    615  f30d		       85 0a		      sta	CTRLPF	; enable playfield reflection
    616  f30f		       85 02		      sta	WSYNC
    617  f311		       a5 82		      lda	GM_BackgroundColor
    618  f313		       85 09		      sta	COLUBK
    619  f315
    620  f315		       a2 47		      ldx	#71
    621  f317				   .GM_PlayfieldLoop
    622  f317							; ldx PFCounter	       ; A = current scanline in playfield
    623  f317
    624  f317				   .GM_DrawMissile
    625  f317		       8a		      txa
    626  f318		       a0 00		      ldy	#0	; start accumualtor with 0 (null position)
    627  f31a		       c5 97		      cmp	GM_MissileYPos	; compare X/scanline with missile y-position
    628  f31c		       d0 02		      bne	.GM_DrawMissileDone	; if is not equal, skip the draw of missile0
    629  f31e		       a4 98		      ldy	GM_MissileActive	; and set ENABL second bit to enable missile
    630  f320				   .GM_DrawMissileDone
    631  f320		       84 1e		      sty	ENAM1	; store correct value in the TIA missile register
    632  f322
    633  f322
    634  f322				   .GM_DrawPlayer
    635  f322		       8a		      txa
    636  f323		       38		      sec		; make sure carry flag is set
    637  f324		       e5 8a		      sbc	GM_PlayerYPos	; subtract sprite Y coordinate
    638  f326		       c9 09		      cmp	#GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    639  f328		       90 02		      bcc	.GM_WritePlayer	; if result < height then A contains the index
    640  f32a		       a9 00		      lda	#0	; else, set A to 0
    641  f32c				   .GM_WritePlayer
    642  f32c		       a8		      tay
    643  f32d		       b1 85		      lda	(GM_PlayerPtr),Y	; load player bitmap slice of data
    644  f32f		       85 1b		      sta	GRP0	; set graphics for player 0 slice - delayed
    645  f331		       b1 87		      lda	(GM_PlayerColorPtr),Y	; load player color from lookup table
    646  f333		       85 a8		      sta	Temp
    647  f335				   .GM_DrawPlayerDone
    648  f335
    649  f335				   .GM_DrawBug
    650  f335		       8a		      txa		; transfer X to A
    651  f336		       38		      sec		; make sure carry flag is set
    652  f337		       e5 9c		      sbc	GM_BugYPos	; subtract sprite Y coordinate
    653  f339		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    654  f33b		       90 02		      bcc	.GM_WriteBug	; if result < SpriteHeight, call subroutine
    655  f33d		       a9 00		      lda	#0	; else, set index to 0
    656  f33f				   .GM_WriteBug
    657  f33f		       a8		      tay
    658  f340		       b9 ba f6 	      lda	GM_BUG,Y	; load player bitmap slice of data
    659  f343		       85 02		      sta	WSYNC	; wait for next scanline
    660  f345							; -------------------------
    661  f345		       85 1c		      sta	GRP1	; set graphics for player 1 + 0 slice
    662  f347		       a5 a8		      lda	Temp
    663  f349		       85 06		      sta	COLUP0	; set color for player 0 slice
    664  f34b				   .GM_DrawBugDone
    665  f34b
    666  f34b				   .GM_DrawTree
    667  f34b		       8a		      txa		; A = current scanline in playfield
    668  f34c		       38		      sec		; make sure carry flag is set
    669  f34d		       e9 1c		      sbc	#28	; subtract sprite Y coordinate
    670  f34f		       c9 14		      cmp	#20	; are we inside the sprite height bounds?
    671  f351		       90 02		      bcc	.GM_WriteTree	; if result < height then A contains the index
    672  f353		       a9 00		      lda	#0	; else, set A to 0
    673  f355				   .GM_WriteTree
    674  f355		       a8		      tay
    675  f356		       b9 cf f6 	      lda	GM_TREE,y
    676  f359		       85 0f		      sta	PF2
    677  f35b				   .GM_DrawTreeDone
    678  f35b
    679  f35b		       85 02		      sta	WSYNC
    680  f35d							; -------------------------
    681  f35d
    682  f35d		       ca		      dex
    683  f35e		       d0 b7		      bne	.GM_PlayfieldLoop	; repeat next scanline until finished
    684  f360
    685  f360							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    686  f360							;; Overscan - 30 scanlines - 2280 mc
    687  f360							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    688  f360		       a9 02		      lda	#2	; A = 2 = #%00000010
    689  f362		       85 01		      sta	VBLANK	; Turn on VBLANK
    690  f364		       a9 23		      lda	#TIMER_OVERSCAN
    691  f366		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    692  f369
    693  f369				   .GM_CheckReset
    694  f369		       ad 82 02 	      lda	SWCHB	; load console switches
    695  f36c		       29 01		      and	#RESET_MASK
    696  f36e		       d0 03		      bne	.GM_NoReset
    697  f370		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    698  f373				   .GM_NoReset
    699  f373
    700  f373		       20 bb f5 	      jsr	SFX_UPDATE
    701  f376
    702  f376		       a5 a0		      lda	GameOver
    703  f378		       f0 07		      beq	.GM_NotGameOver
    704  f37a		       a5 a2		      lda	Timer
    705  f37c		       d0 03		      bne	.GM_NotGameOver
    706  f37e		       4c 58 f4 	      jmp	.GM_Continue
    707  f381				   .GM_NotGameOver
    708  f381
    709  f381		       c6 94		      dec	GM_BirdTick
    710  f383		       d0 45		      bne	.GM_BirdAnimDone
    711  f385		       a9 0a		      lda	#GAME_BIRD_TICK_LEN
    712  f387		       85 94		      sta	GM_BirdTick
    713  f389		       e6 95		      inc	GM_BirdYPosIdx
    714  f38b		       a5 95		      lda	GM_BirdYPosIdx
    715  f38d		       c9 0c		      cmp	#GAME_BIRD_YPOS_TBL_LEN
    716  f38f		       d0 1c		      bne	.GM_BirdAnimSet
      0  f391					      FIRE_MISSILE
      1  f391		       a5 98		      lda	GM_MissileActive
      2  f393		       d0 14		      bne	.NoMissile
      3  f395		       a5 89		      lda	GM_PlayerXPos
      4  f397		       18		      clc
      5  f398		       69 05		      adc	#5
      6  f39a		       85 96		      sta	GM_MissileXPos
      7  f39c		       a9 46		      lda	#70
      8  f39e		       85 97		      sta	GM_MissileYPos
      9  f3a0		       a9 02		      lda	#2
     10  f3a2		       85 98		      sta	GM_MissileActive
     11  f3a4		       a0 03		      ldy	#sfxCOLLIDE
     12  f3a6		       20 99 f5 	      jsr	SFX_TRIGGER
     13  f3a9				   .NoMissile
    718  f3a9		       a9 00		      lda	#0
    719  f3ab		       85 95		      sta	GM_BirdYPosIdx
    720  f3ad				   .GM_BirdAnimSet
    721  f3ad		       a8		      tay
    722  f3ae
    723  f3ae		       29 01		      and	#1
    724  f3b0		       f0 0b		      beq	.GM_BirdFlap
      0  f3b2					      SET_POINTER	GM_BirdPtr, GM_BIRD_2
      1  f3b2				   .POINTER   SET	GM_BirdPtr
      2  f3b2				   .ADDRESS   SET	GM_BIRD_2
      3  f3b2
      4  f3b2		       a9 c9		      LDA	#<.ADDRESS
      5  f3b4		       85 8e		      STA	.POINTER
      6  f3b6		       a9 f6		      LDA	#>.ADDRESS
      7  f3b8		       85 8f		      STA	.POINTER+1
      8  f3ba
    726  f3ba		       4c c5 f3 	      jmp	.GM_BirdFlapDone
    727  f3bd				   .GM_BirdFlap
      0  f3bd					      SET_POINTER	GM_BirdPtr, GM_BIRD_1
      1  f3bd				   .POINTER   SET	GM_BirdPtr
      2  f3bd				   .ADDRESS   SET	GM_BIRD_1
      3  f3bd
      4  f3bd		       a9 c3		      LDA	#<.ADDRESS
      5  f3bf		       85 8e		      STA	.POINTER
      6  f3c1		       a9 f6		      LDA	#>.ADDRESS
      7  f3c3		       85 8f		      STA	.POINTER+1
      8  f3c5
    729  f3c5				   .GM_BirdFlapDone
    730  f3c5
    731  f3c5		       b9 e8 f5 	      lda	GM_BIRD_ANIM,Y
    732  f3c8		       85 92		      sta	GM_BirdYPos
    733  f3ca				   .GM_BirdAnimDone
    734  f3ca
    735  f3ca		       a9 02		      lda	#2
    736  f3cc		       c5 97		      cmp	GM_MissileYPos
    737  f3ce		       f0 07		      beq	.GM_StopMisssile
    738  f3d0		       c6 97		      dec	GM_MissileYPos	; else, increase y-position of the bullet/ball
    739  f3d2		       c6 97		      dec	GM_MissileYPos	; else, increase y-position of the bullet/ball
    740  f3d4		       4c db f3 	      jmp	.GM_MissileDone
    741  f3d7				   .GM_StopMisssile
    742  f3d7		       a9 00		      lda	#0
    743  f3d9		       85 98		      sta	GM_MissileActive
    744  f3db				   .GM_MissileDone
    745  f3db
    746  f3db		       a2 00		      ldx	#0
    747  f3dd				   .GM_CheckInputUp
    748  f3dd		       a9 10		      lda	#%00010000
    749  f3df		       2c 80 02 	      bit	SWCHA
    750  f3e2		       d0 0a		      bne	.GM_CheckInputDown
    751  f3e4		       a5 8a		      lda	GM_PlayerYPos
    752  f3e6		       c9 3e		      cmp	#GAME_PLAYER_MAX_Y
    753  f3e8		       f0 04		      beq	.GM_CheckInputDown
    754  f3ea		       a2 01		      ldx	#1
    755  f3ec		       e6 8a		      inc	GM_PlayerYPos
    756  f3ee
    757  f3ee				   .GM_CheckInputDown
    758  f3ee		       a9 20		      lda	#%00100000
    759  f3f0		       2c 80 02 	      bit	SWCHA
    760  f3f3		       d0 0a		      bne	.GM_CheckInputLeft
    761  f3f5		       a5 8a		      lda	GM_PlayerYPos
    762  f3f7		       c9 02		      cmp	#GAME_PLAYER_MIN_Y
    763  f3f9		       f0 04		      beq	.GM_CheckInputLeft
    764  f3fb		       a2 01		      ldx	#1
    765  f3fd		       c6 8a		      dec	GM_PlayerYPos
    766  f3ff
    767  f3ff				   .GM_CheckInputLeft
    768  f3ff		       a9 40		      lda	#%01000000
    769  f401		       2c 80 02 	      bit	SWCHA
    770  f404		       d0 0e		      bne	.GM_CheckInputRight
    771  f406		       a5 89		      lda	GM_PlayerXPos
    772  f408		       c9 00		      cmp	#GAME_PLAYER_MIN_X
    773  f40a		       f0 08		      beq	.GM_CheckInputRight
    774  f40c		       a9 08		      lda	#%00001000
    775  f40e		       85 93		      sta	GM_BirdReflection
    776  f410		       a2 01		      ldx	#1
    777  f412		       c6 89		      dec	GM_PlayerXPos
    778  f414
    779  f414				   .GM_CheckInputRight
    780  f414		       a9 80		      lda	#%10000000
    781  f416		       2c 80 02 	      bit	SWCHA
    782  f419		       d0 0e		      bne	.GM_CheckInputDone
    783  f41b		       a5 89		      lda	GM_PlayerXPos
    784  f41d		       c9 92		      cmp	#GAME_PLAYER_MAX_X
    785  f41f		       f0 08		      beq	.GM_CheckInputDone
    786  f421		       a9 00		      lda	#0
    787  f423		       85 93		      sta	GM_BirdReflection
    788  f425		       a2 01		      ldx	#1
    789  f427		       e6 89		      inc	GM_PlayerXPos
    790  f429
    791  f429				   .GM_CheckInputDone
    792  f429		       e0 00		      cpx	#0
    793  f42b		       f0 19		      beq	.GM_SetNoPlayerAnim
    794  f42d		       a9 01		      lda	#1
    795  f42f		       85 8b		      sta	GM_PlayerAnimOn
    796  f431
    797  f431		       a5 8d		      lda	GM_PlayerAnimTicks
    798  f433		       d0 0c		      bne	.GM_NoNewFrame
    799  f435		       a5 0a		      lda	GAME_PLAYER_ANIM_SPEED
    800  f437		       85 8d		      sta	GM_PlayerAnimTicks
    801  f439		       e6 8c		      inc	GM_PlayerAnimFrame
    802  f43b		       a5 8c		      lda	GM_PlayerAnimFrame
    803  f43d		       29 01		      and	#1
    804  f43f		       85 8c		      sta	GM_PlayerAnimFrame
    805  f441				   .GM_NoNewFrame
    806  f441		       c6 8d		      dec	GM_PlayerAnimTicks
    807  f443				   .GM_FrameDone
    808  f443
    809  f443
    810  f443		       4c 4c f4 	      jmp	.GM_SetPlayerAnimDone
    811  f446				   .GM_SetNoPlayerAnim
    812  f446		       a9 00		      lda	#0
    813  f448		       85 8b		      sta	GM_PlayerAnimOn
    814  f44a		       85 8d		      sta	GM_PlayerAnimTicks
    815  f44c				   .GM_SetPlayerAnimDone
    816  f44c
    817  f44c		       e0 01		      cpx	#1
    818  f44e		       d0 08		      bne	.GM_Continue
    819  f450		       a5 a2		      lda	Timer
    820  f452		       f0 04		      beq	.GM_Continue
    821  f454		       a9 00		      lda	#0
    822  f456		       85 a0		      sta	GameOver
    823  f458				   .GM_Continue
    824  f458
    825  f458				   .GM_OverscanWait
    826  f458		       ae 84 02 	      ldx	INTIM
    827  f45b		       d0 fb		      bne	.GM_OverscanWait	; wait until timer is done
    828  f45d		       85 02		      sta	WSYNC
    829  f45f							; -------------------------
    830  f45f		       4c 24 f1 	      jmp	GM_NextFrame
    831  f462
    832  f462							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    833  f462							;; Subruotines
    834  f462							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    835  f462
    836  f462				   PlaceBug   subroutine
    837  f462		       20 75 f4 	      jsr	Randomize
    838  f465		       a5 9f		      lda	Random
    839  f467		       29 7f		      and	#%01111111
    840  f469		       85 9b		      sta	GM_BugXPos
    841  f46b		       20 75 f4 	      jsr	Randomize
    842  f46e		       a5 9f		      lda	Random
    843  f470		       29 3f		      and	#%00111111
    844  f472		       85 9c		      sta	GM_BugYPos
    845  f474		       60		      rts
    846  f475
    847  f475				   Randomize  subroutine
    848  f475		       a5 9f		      lda	Random
    849  f477		       0a		      asl
    850  f478		       45 9f		      eor	Random
    851  f47a		       0a		      asl
    852  f47b		       45 9f		      eor	Random
    853  f47d		       0a		      asl
    854  f47e		       0a		      asl
    855  f47f		       45 9f		      eor	Random
    856  f481		       0a		      asl
    857  f482		       26 9f		      rol	Random	; performs a series of shifts and bit operations
    858  f484		       60		      rts
    859  f485
    860  f485							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    861  f485							;; SetObjectXPos
    862  f485							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    863  f485							;; A : Contains the the desired x-coordinate
    864  f485							;; Y=0 : Player0
    865  f485							;; Y=1 : Player1
    866  f485							;; Y=2 : Missile0
    867  f485							;; Y=3 : Missile1
    868  f485							;; Y=4 : Ball
    869  f485							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    870  f485
    871  f485				   SetObjectXPos subroutine
    872  f485		       38		      sec		; Set carry flag
    873  f486		       85 02		      sta	WSYNC	; Get fresh scanline
    874  f488							; -------------------------
    875  f488				   .Div15Loop		; Divide A with 15 by subtraction in loop
    876  f488		       e9 0f		      sbc	#15	; Subtract 15 from A
    877  f48a		       b0 fc		      bcs	.Div15Loop	; Loop if carry flag is set
    878  f48c		       49 07		      eor	#7	; Adjust the remainder in A between -8 and 7
    879  f48e					      REPEAT	4	; Repeat 4 times
    880  f48e		       0a		      asl		; Shift bits left by one
    879  f48e					      REPEND		; End of repeat
    880  f48f		       0a		      asl		; Shift bits left by one
    879  f48f					      REPEND		; End of repeat
    880  f490		       0a		      asl		; Shift bits left by one
    879  f490					      REPEND		; End of repeat
    880  f491		       0a		      asl		; Shift bits left by one
    881  f492					      REPEND		; End of repeat
    882  f492		       99 20 00 	      sta	HMP0,Y	; Set fine position value for object HMP0+Y
    883  f495		       99 10 00 	      sta	RESP0,Y	; Seset rough position for object HMP0+Y
    884  f498		       60		      rts
    885  f499
    886  f499							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    887  f499							;; Subroutine to handle scoreboard digits to be displayed on the screen
    888  f499							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    889  f499							;; This is stored using BCD, so the display will be displayed in dec numbers.
    890  f499							;; Converts the high and low nibbles of the variables Score and Timer
    891  f499							;; into offsets into the digit lookup table so the values can be displayed.
    892  f499							;; Each digit has a height of 5 bytes in the lookup table.
    893  f499							;;
    894  f499							;; For the low nibble we need to multiply by 5:
    895  f499							;;   - we can use left shifts to perform multiplation by 2
    896  f499							;;   - for any number N, the value of N*5 = (N*2*2)+N
    897  f499							;;
    898  f499							;; For the upper nibble, since it is already times 16, we need to divide it
    899  f499							;; and then multiply it by 5:
    900  f499							;;   - we can use right shift to perform division by 2
    901  f499							;;   - for any number N, the value of (N/16)*5 = (N/4)+(N/16)
    902  f499							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    903  f499				   PrepareScoreAndTimer subroutine
    904  f499		       a2 01		      ldx	#1	; X register is the loop counter
    905  f49b				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    906  f49b
    907  f49b		       b5 a1		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    908  f49d		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111
    909  f49f		       85 a8		      sta	Temp	; save the value of A into Temp
    910  f4a1		       0a		      asl		; shift left (it is now N*2)
    911  f4a2		       0a		      asl		; shift left (it is now N*4)
    912  f4a3		       65 a8		      adc	Temp	; add the value saved in Temp (+N)
    913  f4a5		       95 a4		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset
    914  f4a7
    915  f4a7		       b5 a1		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    916  f4a9		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    917  f4ab		       4a		      lsr		; shift right (it is now N/2)
    918  f4ac		       4a		      lsr		; shift right (it is now N/4)
    919  f4ad		       85 a8		      sta	Temp	; save the value of A into Temp
    920  f4af		       4a		      lsr		; shift right (it is now N/8)
    921  f4b0		       4a		      lsr		; shift right (it is now N/16)
    922  f4b1		       65 a8		      adc	Temp	; add the value saved in Temp (N/16+N/4)
    923  f4b3		       95 a6		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    924  f4b5		       ca		      dex		; X--
    925  f4b6		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    926  f4b8
    927  f4b8		       a2 05		      ldx	#5
    928  f4ba				   .SpriteLoop
    929  f4ba
    930  f4ba		       a4 a6		      ldy	TensDigitOffset
    931  f4bc		       b9 34 f6 	      lda	Digits,y
    932  f4bf		       29 f0		      and	#$F0
    933  f4c1		       85 a8		      sta	Temp
    934  f4c3
    935  f4c3		       a4 a4		      ldy	OnesDigitOffset
    936  f4c5		       b9 34 f6 	      lda	Digits,y
    937  f4c8		       29 0f		      and	#$0F
    938  f4ca		       05 a8		      ora	Temp
    939  f4cc		       85 a8		      sta	Temp
    940  f4ce
    941  f4ce		       a5 a8		      lda	Temp
    942  f4d0		       95 a9		      sta	ScoreSprite,X
    943  f4d2
    944  f4d2		       a4 a7		      ldy	TensDigitOffset+1
    945  f4d4		       b9 34 f6 	      lda	Digits,y
    946  f4d7		       29 f0		      and	#$F0
    947  f4d9		       85 a8		      sta	Temp
    948  f4db
    949  f4db		       a4 a5		      ldy	OnesDigitOffset+1
    950  f4dd		       b9 34 f6 	      lda	Digits,y
    951  f4e0		       29 0f		      and	#$0F
    952  f4e2		       05 a8		      ora	Temp
    953  f4e4		       85 a8		      sta	Temp
    954  f4e6
    955  f4e6		       a5 a8		      lda	Temp
    956  f4e8		       95 af		      sta	TimerSprite,X
    957  f4ea
    958  f4ea		       e6 a6		      inc	TensDigitOffset
    959  f4ec		       e6 a7		      inc	TensDigitOffset+1
    960  f4ee		       e6 a4		      inc	OnesDigitOffset
    961  f4f0		       e6 a5		      inc	OnesDigitOffset+1
    962  f4f2
    963  f4f2		       ca		      dex
    964  f4f3		       d0 c5		      bne	.SpriteLoop
    965  f4f5
    966  f4f5		       60		      rts
    967  f4f6
------- FILE sfx.asm LEVEL 2 PASS 2
      0  f4f6					      include	sfx.asm
      1  f4f6							; Like player graphics, sound data is stored in reverse order.
      2  f4f6							; two tables are used, SFX_F and SFX_CV.  Values in the tables are used in
      3  f4f6							; pairs, one from SFX_F and one from SFX_CV.  As such, both tables must be the
      4  f4f6							; same size.  Also, the size of each table is limited to just 256 bytes. DASM
      5  f4f6							; will output a compile-time warning if it spots a size problem.
      6  f4f6							;
      7  f4f6							; Each pair of values are used for a single frame (ie: 1/60th of a secon).  A
      8  f4f6							; 0 value in the SFX_CV table means "end of sound effect", though for clarity
      9  f4f6							; it is recommended to also use a matching 0 in SFX_F.
     10  f4f6							;
     11  f4f6							; table SFX_F holds the Frequency for the sound effects.
     12  f4f6							; each .byte line contains the Frequency data for a single sound effect.
     13  f4f6							; Frequency values range from 0-31
     14  f4f6				   SFX_F
     15  f4f6		       00 0f 0f 0f	      .byte.b	0, 15, 15, 15	; collide
     16  f4fa		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3	; collect
     17  f507		       00 08 08 08*	      .byte.b	0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8	; ping
     18  f517		       00 1f 1f 1f*	      .byte.b	0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31	; game over
     19  f527		       00 1c 1c 1c*	      .byte.b	0, 28, 28, 28, 28 ,28 ,28 ,28, 28, 22, 22, 22, 22 ,22 ,22 ,22, 22, 18, 18, 18, 18 ,18 ,18 ,18, 18	; test
     20  f540
     21  f540							; calculate size of SFX_F table and validate size
     22  f540		       00 4a	   SFX_Fcount =	*-SFX_F
     23  f540				  -	      if	SFX_Fcount > 256
     24  f540				  -	      echo	"SFX Warning: table SFX_F is too large"
     25  f540					      endif
     26  f540
     27  f540
     28  f540							; table SFX_CV holds the sound effect Channel (tone) and Volume values.
     29  f540							; Both values range from 0-15, so they are combined together.
     30  f540							; The $ denotes a HEX value where the digits are 0123456789abcdef (a=10, f=15).
     31  f540							; the first digit is the Channel value.
     32  f540							; the second digit is the Volume value.
     33  f540							; each .byte line contains the Channel and Volume data for a single sound effect
     34  f540							; the first value of every .byte line should be 0, which denotes end-of-sfx
     35  f540							; the = line below each .byte line calculates the value used when calling
     36  f540							; sfxtrigger.
     37  f540							; Channel values are:
     38  f540							; 0 = No sound (silent).
     39  f540							; 1 = Buzzy tones.
     40  f540							; 2 = Carries distortion 1 downward into a rumble.
     41  f540							; 3 = Flangy wavering tones, like a UFO.
     42  f540							; 4 = Pure tone.
     43  f540							; 5 = Same as 4.
     44  f540							; 6 = Between pure tone and buzzy tone (Adventure death uses this).
     45  f540							; 7 = Reedy tones, much brighter, down to Enduro car rumble.
     46  f540							; 8 = White noise/explosions/lightning, jet/spacecraft engine.
     47  f540							; 9 = Same as 7.
     48  f540							; a = Same as 6.
     49  f540							; b = Same as 0.
     50  f540							; c = Pure tone, goes much lower in pitch than 4 & 5.
     51  f540							; d = Same as c.
     52  f540							; e = Electronic tones, mostly lows, extends to rumble.
     53  f540							; f = Electronic tones, mostly lows, extends to rumble.
     54  f540
     55  f540				   SFX_CV
     56  f540		       00 ef ef ef	      .byte.b	0,$ef,$ef,$ef	; collide
     57  f540		       00 03	   sfxCOLLIDE =	*-SFX_CV-1
     58  f544		       00 6f 6f 6f*	      .byte.b	0,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f	; collect
     59  f544		       00 10	   sfxCOLLECT =	*-SFX_CV-1
     60  f551		       00 41 42 43*	      .byte.b	0,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f	; ping
     61  f551		       00 20	   sfxPING    =	*-SFX_CV-1
     62  f561		       00 cf cf cf*	      .byte.b	0,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf	; game over
     63  f561		       00 30	   sfxGAMEOVER =	*-SFX_CV-1
     64  f571		       00 4f 4f 4f*	      .byte.b	0,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f	; game over
     65  f571		       00 49	   sfxTEST    =	*-SFX_CV-1
     66  f58a
     67  f58a							; calculate size of SFX_CV table and validate size
     68  f58a		       00 4a	   SFX_CVcount =	*-SFX_CV
     69  f58a
     70  f58a				  -	      if	SFX_CVcount > 256
     71  f58a				  -	      echo	"SFX Warning: table SFX_CV is too large"
     72  f58a					      endif
     73  f58a				  -	      if	SFX_CVcount != SFX_Fcount
     74  f58a				  -	      echo	"SFX Warning: table SFX_F is not the same size as table SFX_CV"
     75  f58a					      endif
     76  f58a
     77  f58a
     78  f58a				   SFX_OFF
     79  f58a		       a2 00		      ldx	#0	; silence sound output
     80  f58c		       86 b5		      stx	SFX_LEFT
     81  f58e		       86 b6		      stx	SFX_RIGHT
     82  f590		       86 19		      stx	AUDV0
     83  f592		       86 1a		      stx	AUDV1
     84  f594		       86 15		      stx	AUDC0
     85  f596		       86 16		      stx	AUDC1
     86  f598		       60		      rts
     87  f599
     88  f599				   SFX_TRIGGER
     89  f599		       a6 b5		      ldx	SFX_LEFT	; test left channel
     90  f59b		       bd 40 f5 	      lda	SFX_CV,x	; CV value will be 0 if channel is idle
     91  f59e		       d0 03		      bne	.leftnotfree	; if not 0 then skip ahead
     92  f5a0		       84 b5		      sty	SFX_LEFT	; channel is idle, use it
     93  f5a2		       60		      rts		; all done
     94  f5a3				   .leftnotfree
     95  f5a3		       a6 b6		      ldx	SFX_RIGHT	; test right channel
     96  f5a5		       bd 40 f5 	      lda	SFX_CV,x	; CV value will be 0 if channel is idle
     97  f5a8		       d0 03		      bne	.rightnotfree	; if not 0 then skip ahead
     98  f5aa		       84 b6		      sty	SFX_RIGHT	; channel is idle, use it
     99  f5ac		       60		      rts		; all done
    100  f5ad				   .rightnotfree
    101  f5ad		       c4 b5		      cpy	SFX_LEFT	; test sfx priority with left channel
    102  f5af		       90 03		      bcc	.leftnotlower	; skip ahead if new sfx has lower priority than active sfx
    103  f5b1		       84 b5		      sty	SFX_LEFT	; new sfx has higher priority so use left channel
    104  f5b3		       60		      rts		; all done
    105  f5b4				   .leftnotlower
    106  f5b4		       c4 b6		      cpy	SFX_RIGHT	; test sfx with right channel
    107  f5b6		       90 02		      bcc	.rightnotlower	; skip ahead if new sfx has lower priority than active sfx
    108  f5b8		       84 b6		      sty	SFX_RIGHT	; new sfx has higher priority so use right channel
    109  f5ba				   .rightnotlower
    110  f5ba		       60		      rts
    111  f5bb
    112  f5bb				   SFX_UPDATE
    113  f5bb		       a6 b5		      ldx	SFX_LEFT	; get the pointer for the left channel
    114  f5bd		       bd f6 f4 	      lda	SFX_F,x	; get the Frequency value
    115  f5c0		       85 17		      sta	AUDF0	; update the Frequency register
    116  f5c2		       bd 40 f5 	      lda	SFX_CV,x	; get the combined Control and Volume value
    117  f5c5		       85 19		      sta	AUDV0	; update the Volume register
    118  f5c7		       4a		      lsr		; prep the Control value,
    119  f5c8		       4a		      lsr		;   it's stored in the upper nybble
    120  f5c9		       4a		      lsr		;   but must be in the lower nybble
    121  f5ca		       4a		      lsr		;   when Control is updated
    122  f5cb		       85 15		      sta	AUDC0	; update the Control register
    123  f5cd		       f0 02		      beq	.skipleftdec	; skip ahead if Control = 0
    124  f5cf		       c6 b5		      dec	SFX_LEFT	; update pointer for left channel
    125  f5d1				   .skipleftdec
    126  f5d1		       a6 b6		      ldx	SFX_RIGHT	; get the pointer for the right channel
    127  f5d3		       bd f6 f4 	      lda	SFX_F,x	; get the Frequency value
    128  f5d6		       85 18		      sta	AUDF1	; update the Frequency register
    129  f5d8		       bd 40 f5 	      lda	SFX_CV,x	; get the combined Control and Volume value
    130  f5db		       85 1a		      sta	AUDV1	; update the Volume register
    131  f5dd		       4a		      lsr		; prep the Control value,
    132  f5de		       4a		      lsr		;   it's stored in the upper nybble
    133  f5df		       4a		      lsr		;   but must be in the lower nybble
    134  f5e0		       4a		      lsr		;   when Control is updated
    135  f5e1		       85 16		      sta	AUDC1	; update the Control register
    136  f5e3		       f0 02		      beq	.skiprightdec	; skip ahead if Control = 0
    137  f5e5		       c6 b6		      dec	SFX_RIGHT	; update pointer for right channel
    138  f5e7				   .skiprightdec
    139  f5e7		       60		      rts		; all done
    140  f5e8
------- FILE metria.asm
    969  f5e8
    970  f5e8
    971  f5e8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    972  f5e8							;; Lookup tabes
    973  f5e8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    974  f5e8
    975  f5e8				   GM_BIRD_ANIM
    976  f5e8		       02 05 07 08*	      .byte.b	#2,#5,#7,#8,#8,#8,#8,#8,#7,#5,#2,#1
    977  f5f4
    978  f5f4							; https://www.masswerk.at/vcs-tools/TinyPlayfieldEditor/
    979  f5f4							; mode: asymmetric repeat line-height 4
    980  f5f4				   LM_LogoPF0
    981  f5f4		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$90
    982  f5fc		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$40,$00,$40
    983  f604		       00 70		      .byte.b	$00,$70
    984  f606				   LM_LogoPF1
    985  f606		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$00,$05,$DE
    986  f60e		       0a 42 0a 4e*	      .byte.b	$0A,$42,$0A,$4E,$08,$52,$08,$56
    987  f616		       38 7b		      .byte.b	$38,$7B
    988  f618				   LM_LogoPF2
    989  f618		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$80,$00,$F8,$00
    990  f620		       a5 00 a5 00*	      .byte.b	$A5,$00,$A5,$00,$BF,$00,$85,$00
    991  f628		       39 03		      .byte.b	$39,$03
    992  f62a
    993  f62a				   LM_LogoFade_Color
    994  f62a		       0e 3e 3c 3a*	      .byte.b	$0E,$3E,$3C,$3A,$38
    995  f62f
    996  f62f				   LM_LogoFade_BW
    997  f62f		       0e 0c 0a 08*	      .byte.b	$0E,$0C,$0A,$08,$06
    998  f634
    999  f634				   Digits
   1000  f634		       77		      .byte.b	%01110111	; ### ###
   1001  f635		       55		      .byte.b	%01010101	; # # # #
   1002  f636		       55		      .byte.b	%01010101	; # # # #
   1003  f637		       55		      .byte.b	%01010101	; # # # #
   1004  f638		       77		      .byte.b	%01110111	; ### ###
   1005  f639
   1006  f639		       11		      .byte.b	%00010001	;   #	 #
   1007  f63a		       11		      .byte.b	%00010001	;   #	 #
   1008  f63b		       11		      .byte.b	%00010001	;   #	 #
   1009  f63c		       11		      .byte.b	%00010001	;   #	 #
   1010  f63d		       11		      .byte.b	%00010001	;   #	 #
   1011  f63e
   1012  f63e		       77		      .byte.b	%01110111	; ### ###
   1013  f63f		       11		      .byte.b	%00010001	;   #	 #
   1014  f640		       77		      .byte.b	%01110111	; ### ###
   1015  f641		       44		      .byte.b	%01000100	; #   #
   1016  f642		       77		      .byte.b	%01110111	; ### ###
   1017  f643
   1018  f643		       77		      .byte.b	%01110111	; ### ###
   1019  f644		       11		      .byte.b	%00010001	;   #	 #
   1020  f645		       33		      .byte.b	%00110011	;  ##	##
   1021  f646		       11		      .byte.b	%00010001	;   #	 #
   1022  f647		       77		      .byte.b	%01110111	; ### ###
   1023  f648
   1024  f648		       55		      .byte.b	%01010101	; # # # #
   1025  f649		       55		      .byte.b	%01010101	; # # # #
   1026  f64a		       77		      .byte.b	%01110111	; ### ###
   1027  f64b		       11		      .byte.b	%00010001	;   #	 #
   1028  f64c		       11		      .byte.b	%00010001	;   #	 #
   1029  f64d
   1030  f64d		       77		      .byte.b	%01110111	; ### ###
   1031  f64e		       44		      .byte.b	%01000100	; #   #
   1032  f64f		       77		      .byte.b	%01110111	; ### ###
   1033  f650		       11		      .byte.b	%00010001	;   #	 #
   1034  f651		       77		      .byte.b	%01110111	; ### ###
   1035  f652
   1036  f652		       77		      .byte.b	%01110111	; ### ###
   1037  f653		       44		      .byte.b	%01000100	; #   #
   1038  f654		       77		      .byte.b	%01110111	; ### ###
   1039  f655		       55		      .byte.b	%01010101	; # # # #
   1040  f656		       77		      .byte.b	%01110111	; ### ###
   1041  f657
   1042  f657		       77		      .byte.b	%01110111	; ### ###
   1043  f658		       11		      .byte.b	%00010001	;   #	 #
   1044  f659		       11		      .byte.b	%00010001	;   #	 #
   1045  f65a		       11		      .byte.b	%00010001	;   #	 #
   1046  f65b		       11		      .byte.b	%00010001	;   #	 #
   1047  f65c
   1048  f65c		       77		      .byte.b	%01110111	; ### ###
   1049  f65d		       55		      .byte.b	%01010101	; # # # #
   1050  f65e		       77		      .byte.b	%01110111	; ### ###
   1051  f65f		       55		      .byte.b	%01010101	; # # # #
   1052  f660		       77		      .byte.b	%01110111	; ### ###
   1053  f661
   1054  f661		       77		      .byte.b	%01110111	; ### ###
   1055  f662		       55		      .byte.b	%01010101	; # # # #
   1056  f663		       77		      .byte.b	%01110111	; ### ###
   1057  f664		       11		      .byte.b	%00010001	;   #	 #
   1058  f665		       77		      .byte.b	%01110111	; ### ###
   1059  f666
   1060  f666		       22		      .byte.b	%00100010	;  #	#
   1061  f667		       55		      .byte.b	%01010101	; # # # #
   1062  f668		       77		      .byte.b	%01110111	; ### ###
   1063  f669		       55		      .byte.b	%01010101	; # # # #
   1064  f66a		       55		      .byte.b	%01010101	; # # # #
   1065  f66b
   1066  f66b		       77		      .byte.b	%01110111	; ### ###
   1067  f66c		       55		      .byte.b	%01010101	; # # # #
   1068  f66d		       66		      .byte.b	%01100110	; ##  ##
   1069  f66e		       55		      .byte.b	%01010101	; # # # #
   1070  f66f		       77		      .byte.b	%01110111	; ### ###
   1071  f670
   1072  f670		       77		      .byte.b	%01110111	; ### ###
   1073  f671		       44		      .byte.b	%01000100	; #   #
   1074  f672		       44		      .byte.b	%01000100	; #   #
   1075  f673		       44		      .byte.b	%01000100	; #   #
   1076  f674		       77		      .byte.b	%01110111	; ### ###
   1077  f675
   1078  f675		       66		      .byte.b	%01100110	; ##  ##
   1079  f676		       55		      .byte.b	%01010101	; # # # #
   1080  f677		       55		      .byte.b	%01010101	; # # # #
   1081  f678		       55		      .byte.b	%01010101	; # # # #
   1082  f679		       66		      .byte.b	%01100110	; ##  ##
   1083  f67a
   1084  f67a		       77		      .byte.b	%01110111	; ### ###
   1085  f67b		       44		      .byte.b	%01000100	; #   #
   1086  f67c		       77		      .byte.b	%01110111	; ### ###
   1087  f67d		       44		      .byte.b	%01000100	; #   #
   1088  f67e		       77		      .byte.b	%01110111	; ### ###
   1089  f67f
   1090  f67f		       77		      .byte.b	%01110111	; ### ###
   1091  f680		       44		      .byte.b	%01000100	; #   #
   1092  f681		       66		      .byte.b	%01100110	; ##  ##
   1093  f682		       44		      .byte.b	%01000100	; #   #
   1094  f683		       44		      .byte.b	%01000100	; #   #
   1095  f684
   1096  f684							;---Graphics Data from PlayerPal 2600---
   1097  f684
   1098  f684				   GM_DRESS_IDLE
   1099  f684		       00		      .byte.b	#0
   1100  f685		       7e		      .byte.b	#%01111110	;$70
   1101  f686		       7e		      .byte.b	#%01111110	;$70
   1102  f687		       3c		      .byte.b	#%00111100	;$70
   1103  f688		       5a		      .byte.b	#%01011010	;$84
   1104  f689		       7e		      .byte.b	#%01111110	;$84
   1105  f68a		       18		      .byte.b	#%00011000	;$F4
   1106  f68b		       3c		      .byte.b	#%00111100	;$00
   1107  f68c		       18		      .byte.b	#%00011000	;$00
   1108  f68d				   GM_DRESS_WALK1
   1109  f68d		       00		      .byte.b	#0
   1110  f68e		       78		      .byte.b	#%01111000	;$70
   1111  f68f		       7e		      .byte.b	#%01111110	;$70
   1112  f690		       3c		      .byte.b	#%00111100	;$70
   1113  f691		       1a		      .byte.b	#%00011010	;$84
   1114  f692		       7e		      .byte.b	#%01111110	;$84
   1115  f693		       18		      .byte.b	#%00011000	;$F4
   1116  f694		       3c		      .byte.b	#%00111100	;$00
   1117  f695		       18		      .byte.b	#%00011000	;$00
   1118  f696				   GM_DRESS_WALK2
   1119  f696		       00		      .byte.b	#0
   1120  f697		       1e		      .byte.b	#%00011110	;$70
   1121  f698		       7e		      .byte.b	#%01111110	;$70
   1122  f699		       3c		      .byte.b	#%00111100	;$70
   1123  f69a		       58		      .byte.b	#%01011000	;$84
   1124  f69b		       7e		      .byte.b	#%01111110	;$84
   1125  f69c		       18		      .byte.b	#%00011000	;$F4
   1126  f69d		       3c		      .byte.b	#%00111100	;$00
   1127  f69e		       18		      .byte.b	#%00011000	;$00
   1128  f69f				   GM_PANTS_IDLE
   1129  f69f		       00		      .byte.b	#0
   1130  f6a0		       66		      .byte.b	#%01100110	;$70
   1131  f6a1		       24		      .byte.b	#%00100100	;$70
   1132  f6a2		       3c		      .byte.b	#%00111100	;$70
   1133  f6a3		       5a		      .byte.b	#%01011010	;$84
   1134  f6a4		       7e		      .byte.b	#%01111110	;$84
   1135  f6a5		       18		      .byte.b	#%00011000	;$F4
   1136  f6a6		       3c		      .byte.b	#%00111100	;$00
   1137  f6a7		       18		      .byte.b	#%00011000	;$00
   1138  f6a8				   GM_PANTS_WALK1
   1139  f6a8		       00		      .byte.b	#0
   1140  f6a9		       60		      .byte.b	#%01100000	;$70
   1141  f6aa		       26		      .byte.b	#%00100110	;$70
   1142  f6ab		       3c		      .byte.b	#%00111100	;$70
   1143  f6ac		       1a		      .byte.b	#%00011010	;$84
   1144  f6ad		       7e		      .byte.b	#%01111110	;$84
   1145  f6ae		       18		      .byte.b	#%00011000	;$F4
   1146  f6af		       3c		      .byte.b	#%00111100	;$00
   1147  f6b0		       18		      .byte.b	#%00011000	;$00
   1148  f6b1				   GM_PANTS_WALK2
   1149  f6b1		       00		      .byte.b	#0
   1150  f6b2		       06		      .byte.b	#%00000110	;$70
   1151  f6b3		       64		      .byte.b	#%01100100	;$70
   1152  f6b4		       3c		      .byte.b	#%00111100	;$70
   1153  f6b5		       58		      .byte.b	#%01011000	;$84
   1154  f6b6		       7e		      .byte.b	#%01111110	;$84
   1155  f6b7		       18		      .byte.b	#%00011000	;$F4
   1156  f6b8		       3c		      .byte.b	#%00111100	;$00
   1157  f6b9		       18		      .byte.b	#%00011000	;$00
   1158  f6ba				   GM_BUG
   1159  f6ba		       00		      .byte.b	#0
   1160  f6bb		       00		      .byte.b	#%00000000	;$00
   1161  f6bc		       00		      .byte.b	#%00000000	;$00
   1162  f6bd		       52		      .byte.b	#%01010010	;$F0
   1163  f6be		       3c		      .byte.b	#%00111100	;$F0
   1164  f6bf		       3c		      .byte.b	#%00111100	;$F2
   1165  f6c0		       52		      .byte.b	#%01010010	;$F0
   1166  f6c1		       00		      .byte.b	#%00000000	;$00
   1167  f6c2		       00		      .byte.b	#%00000000	;$00
   1168  f6c3				   GM_BIRD_1
   1169  f6c3		       00		      .byte.b	#0
   1170  f6c4		       01		      .byte.b	#%00000001	;$1C
   1171  f6c5		       3f		      .byte.b	#%00111111	;$0E
   1172  f6c6		       fe		      .byte.b	#%11111110	;$0A
   1173  f6c7		       18		      .byte.b	#%00011000	;$0E
   1174  f6c8		       76		      .byte.b	#%01110110	;$0E
   1175  f6c9				   GM_BIRD_2
   1176  f6c9		       00		      .byte.b	#0
   1177  f6ca		       01		      .byte.b	#%00000001	;$1C
   1178  f6cb		       3f		      .byte.b	#%00111111	;$0E
   1179  f6cc		       fe		      .byte.b	#%11111110	;$0A
   1180  f6cd		       f8		      .byte.b	#%11111000	;$0E
   1181  f6ce		       00		      .byte.b	#%00000000	;$0E
   1182  f6cf
   1183  f6cf							;---End Graphics Data---
   1184  f6cf
   1185  f6cf
   1186  f6cf				   GM_TREE
   1187  f6cf		       00 80 80 80	      .byte.b	$00,$80,$80,$80
   1188  f6d3		       80 80 80 80*	      .byte.b	$80,$80,$80,$80,$D0,$F8,$F8,$F8
   1189  f6db		       f8 f0 f0 f0*	      .byte.b	$F8,$F0,$F0,$F0,$E0,$C0,$C0,$80
   1190  f6e3
   1191  f6e3							;---Color Data from PlayerPal 2600---
   1192  f6e3				   GM_PLAYER_COLOR_IDLE
   1193  f6e3		       00		      .byte.b	#0
   1194  f6e4		       70		      .byte.b	#$70	;
   1195  f6e5		       70		      .byte.b	#$70	;
   1196  f6e6		       70		      .byte.b	#$70	;
   1197  f6e7		       84		      .byte.b	#$84	;
   1198  f6e8		       84		      .byte.b	#$84	;
   1199  f6e9		       f4		      .byte.b	#$F4	;
   1200  f6ea		       00		      .byte.b	#$00	;
   1201  f6eb		       00		      .byte.b	#$00	;
   1202  f6ec				   GM_PLAYER_COLOR_WALK1
   1203  f6ec		       00		      .byte.b	#0
   1204  f6ed		       70		      .byte.b	#$70	;
   1205  f6ee		       70		      .byte.b	#$70	;
   1206  f6ef		       70		      .byte.b	#$70	;
   1207  f6f0		       84		      .byte.b	#$84	;
   1208  f6f1		       84		      .byte.b	#$84	;
   1209  f6f2		       f4		      .byte.b	#$F4	;
   1210  f6f3		       00		      .byte.b	#$00	;
   1211  f6f4		       00		      .byte.b	#$00	;
   1212  f6f5				   GM_PLAYER_COLOR_WALK2
   1213  f6f5		       00		      .byte.b	#0
   1214  f6f6		       70		      .byte.b	#$70	;
   1215  f6f7		       70		      .byte.b	#$70	;
   1216  f6f8		       70		      .byte.b	#$70	;
   1217  f6f9		       84		      .byte.b	#$84	;
   1218  f6fa		       84		      .byte.b	#$84	;
   1219  f6fb		       f4		      .byte.b	#$F4	;
   1220  f6fc		       00		      .byte.b	#$00	;
   1221  f6fd		       00		      .byte.b	#$00	;
   1222  f6fe				   GM_PLAYER_BW_IDLE
   1223  f6fe		       00		      .byte.b	#0
   1224  f6ff		       00		      .byte.b	#$0	;
   1225  f700		       00		      .byte.b	#$0	;
   1226  f701		       00		      .byte.b	#$0	;
   1227  f702		       02		      .byte.b	#$02	;
   1228  f703		       02		      .byte.b	#$02	;
   1229  f704		       04		      .byte.b	#$04	;
   1230  f705		       00		      .byte.b	#$00	;
   1231  f706		       00		      .byte.b	#$00	;
   1232  f707				   GM_PLAYER_BW_WALK1
   1233  f707		       00		      .byte.b	#0
   1234  f708		       00		      .byte.b	#$0	;
   1235  f709		       00		      .byte.b	#$0	;
   1236  f70a		       00		      .byte.b	#$0	;
   1237  f70b		       02		      .byte.b	#$02	;
   1238  f70c		       02		      .byte.b	#$02	;
   1239  f70d		       04		      .byte.b	#$04	;
   1240  f70e		       00		      .byte.b	#$00	;
   1241  f70f		       00		      .byte.b	#$00	;
   1242  f710				   GM_PLAYER_BW_WALK2
   1243  f710		       00		      .byte.b	#0
   1244  f711		       00		      .byte.b	#$0	;
   1245  f712		       00		      .byte.b	#$0	;
   1246  f713		       00		      .byte.b	#$0	;
   1247  f714		       02		      .byte.b	#$02	;
   1248  f715		       02		      .byte.b	#$02	;
   1249  f716		       04		      .byte.b	#$04	;
   1250  f717		       00		      .byte.b	#$00	;
   1251  f718		       00		      .byte.b	#$00	;
   1252  f719				   GM_BUG_COLOR
   1253  f719		       00		      .byte.b	#0
   1254  f71a		       00		      .byte.b	#$00	;
   1255  f71b		       00		      .byte.b	#$00	;
   1256  f71c		       f0		      .byte.b	#$F0	;
   1257  f71d		       f0		      .byte.b	#$F0	;
   1258  f71e		       f2		      .byte.b	#$F2	;
   1259  f71f		       f0		      .byte.b	#$F0	;
   1260  f720		       00		      .byte.b	#$00	;
   1261  f721		       00		      .byte.b	#$00	;
   1262  f722				   GM_BUG_BW
   1263  f722		       00		      .byte.b	#0
   1264  f723		       00		      .byte.b	#$00	;
   1265  f724		       00		      .byte.b	#$00	;
   1266  f725		       00		      .byte.b	#$00	;
   1267  f726		       00		      .byte.b	#$00	;
   1268  f727		       02		      .byte.b	#$02	;
   1269  f728		       00		      .byte.b	#$00	;
   1270  f729		       00		      .byte.b	#$00	;
   1271  f72a		       00		      .byte.b	#$00	;
   1272  f72b				   GM_BIRD_COLOR
   1273  f72b		       00		      .byte.b	#0
   1274  f72c		       1c		      .byte.b	#$1C	;
   1275  f72d		       0e		      .byte.b	#$0E	;
   1276  f72e		       0a		      .byte.b	#$0A	;
   1277  f72f		       0e		      .byte.b	#$0E	;
   1278  f730		       0e		      .byte.b	#$0E	;
   1279  f731				   GM_BIRD_BW
   1280  f731		       00		      .byte.b	#0
   1281  f732		       0c		      .byte.b	#$0C	;
   1282  f733		       0e		      .byte.b	#$0E	;
   1283  f734		       0a		      .byte.b	#$0A	;
   1284  f735		       0e		      .byte.b	#$0E	;
   1285  f736		       0e		      .byte.b	#$0E	;
   1286  f737
   1287  f737
   1288  f737							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1289  f737							;; Fill the 4K ROM
   1290  f737							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1291  fffc					      org	$FFFC	; insert two pointers at the end of ROM
   1292  fffc		       00 f0		      .word.w	Reset	; reset vector
   1293  fffe		       00 f0		      .word.w	Reset	; interrupt Vector
   1294  10000
   1295  10000
