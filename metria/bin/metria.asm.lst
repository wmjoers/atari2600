------- FILE metria.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE metria.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE metria.asm
      5  0000 ????
      6  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  0000 ????						;; Macros
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????
     10  0000 ????				      MAC	wait_x_wsync
     11  0000 ????			   .WaitX
     12  0000 ????				      sta	WSYNC	; Wait for horizontal blank
     13  0000 ????				      dex		; X--
     14  0000 ????				      bne	.WaitX	; Loop until X = 0
     15  0000 ????				      ENDM
     16  0000 ????
     17  0000 ????				      MAC	fire_missile
     18  0000 ????				      lda	GM_MissileActive
     19  0000 ????				      bne	.NoMissile
     20  0000 ????				      lda	GM_PlayerXPos
     21  0000 ????				      clc
     22  0000 ????				      adc	#5
     23  0000 ????				      sta	GM_MissileXPos
     24  0000 ????				      lda	#70
     25  0000 ????				      sta	GM_MissileYPos
     26  0000 ????				      lda	#2
     27  0000 ????				      sta	GM_MissileActive
     28  0000 ????			   .NoMissile
     29  0000 ????				      ENDM
     30  0000 ????
     31  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     32  0000 ????						;; Contants
     33  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     34  0000 ????
     35  0000 ????	       00 08	   BW_MASK    =	%00001000	; bitmask for black & white switch
     36  0000 ????	       00 01	   RESET_MASK =	%00000001	; bitmask for reset switch
     37  0000 ????	       00 80	   LEFT_BTN_MASK =	%10000000	; bitmask for left joystick button
     38  0000 ????	       00 2b	   TIMER_VBLANK =	43	; value for TIM64T vertical blank timer
     39  0000 ????	       00 23	   TIMER_OVERSCAN =	35	; value for TIM64T overscan timer
     40  0000 ????
     41  0000 ????	       00 72	   RANDOM_SEED =	$72
     42  0000 ????
     43  0000 ????	       00 38	   LOGO_BK_COLOR =	$38	; logo mode background color - color mode
     44  0000 ????	       00 06	   LOGO_BK_BW =	$06	; logo mode background color - black & white
     45  0000 ????	       00 04	   LOGO_FADE_INIT_STATE =	4	; initial value for the logo fade in state
     46  0000 ????	       00 28	   LOGO_FADE_INIT_DELAY =	40	; initial delay value before logo fades in
     47  0000 ????	       00 14	   LOGO_FADE_DELAY =	20	; delay for each fade step - 20 frames/step
     48  0000 ????
     49  0000 ????	       00 c8	   GAME_BK_COLOR =	$C8	; game background color - color mode
     50  0000 ????	       00 08	   GAME_BK_BW =	$08	; game background color - black & white
     51  0000 ????	       00 c0	   GAME_PF_COLOR =	$C0	; game playfield color - color mode
     52  0000 ????	       00 02	   GAME_PF_BW =	$02	; game playfield color - black & white
     53  0000 ????	       00 78	   GAME_SKY_COLOR =	$78	; game sky color - color mode
     54  0000 ????	       00 04	   GAME_SKY_BW =	$04	; game sky color - black & white
     55  0000 ????
     56  0000 ????	       00 00	   GAME_SCOREBACK_COLOR =	$0	; game score board color - all modes
     57  0000 ????	       00 20	   GAME_GAMEOVER_COLOR =	$20	; game over color - color mode
     58  0000 ????	       00 02	   GAME_GAMEOVER_BW =	$02	; game over color - black & white
     59  0000 ????
     60  0000 ????	       00 09	   GAME_PLAYER_HEIGHT =	9	; player sprite height
     61  0000 ????	       00 09	   GAME_BUG_HEIGHT =	9	; bug sprite height
     62  0000 ????
     63  0000 ????	       00 06	   GAME_BIRD_HEIGHT =	6	; bird sprite height
     64  0000 ????	       00 0a	   GAME_BIRD_TICK_LEN =	10	; bird anim speed
     65  0000 ????	       00 0c	   GAME_BIRD_YPOS_TBL_LEN =	12	; bird anim table length
     66  0000 ????
     67  0000 ????	       00 05	   GAME_DIGIT_HEIGHT =	5	; digit height
     68  0000 ????
     69  0000 ????	       00 60	   GAME_MAX_TIME =	%01100000
     70  0000 ????
     71  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     72  0000 ????						;; RAM variables located outside ROM at address $0080
     73  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     74  0000 ????
     75 U00b2 ????				      seg.u	variables
     76 U0080					      org	$80	; RAM address memory start
     77 U0080
     78 U0080		       00	   LM_LogoFadeState ds	1	; current logo fade state
     79 U0081		       00	   LM_LogoFadeDelay ds	1	; current logo fade delay
     80 U0082
     81 U0082		       00	   GM_BackgroundColor ds	1
     82 U0083		       00	   GM_TreeColor ds	1
     83 U0084		       00	   GM_SkyColor ds	1
     84 U0085
     85 U0085		       00 00	   GM_PlayerPtr ds	2
     86 U0087		       00 00	   GM_PlayerColorPtr ds	2
     87 U0089		       00	   GM_PlayerXPos ds	1
     88 U008a		       00	   GM_PlayerYPos ds	1
     89 U008b
     90 U008b		       00 00	   GM_BirdPtr ds	2
     91 U008d		       00 00	   GM_BirdColorPtr ds	2
     92 U008f		       00	   GM_BirdYPos ds	1
     93 U0090		       00	   GM_BirdReflection ds	1
     94 U0091
     95 U0091		       00	   GM_BirdTick ds	1
     96 U0092		       00	   GM_BirdYPosIdx ds	1
     97 U0093
     98 U0093		       00	   GM_MissileXPos ds	1
     99 U0094		       00	   GM_MissileYPos ds	1
    100 U0095		       00	   GM_MissileActive ds	1
    101 U0096
    102 U0096		       00 00	   GM_BugColorPtr ds	2
    103 U0098		       00	   GM_BugXPos ds	1
    104 U0099		       00	   GM_BugYPos ds	1
    105 U009a		       00	   GM_PlayfieldIdx ds	1
    106 U009b
    107 U009b		       00	   PFCounter  ds	1
    108 U009c		       00	   Random     ds	1
    109 U009d
    110 U009d		       00	   GameOver   ds	1
    111 U009e		       00	   Score      ds	1	; stored as BCD
    112 U009f		       00	   Timer      ds	1	; stored as BCD
    113 U00a0		       00	   TimerTick  ds	1
    114 U00a1		       00 00	   OnesDigitOffset ds	2
    115 U00a3		       00 00	   TensDigitOffset ds	2
    116 U00a5		       00	   Temp       ds	1
    117 U00a6		       00 00 00 00*ScoreSprite ds	6
    118 U00ac		       00 00 00 00*TimerSprite ds	6
    119 U00b2
    120 U00b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    121 U00b2							;; Program start - Located at top of ROM at address $F000
    122 U00b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    123 U00b2
    124  10000 ????				       seg	code
    125  f000					      org	$F000	; start address of ROM
    126  f000
    127  f000				   Reset
      0  f000					      CLEAN_START		; set machine to known state on startup
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
    129  f00a
    130  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    131  f00a							;; Init variables
    132  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    133  f00a
    134  f00a		       a9 72		      lda	#RANDOM_SEED
    135  f00c		       85 9c		      sta	Random
    136  f00e
    137  f00e		       a9 04		      lda	#LOGO_FADE_INIT_STATE
    138  f010		       85 80		      sta	LM_LogoFadeState	; initialize logo fade state
    139  f012		       a9 28		      lda	#LOGO_FADE_INIT_DELAY
    140  f014		       85 81		      sta	LM_LogoFadeDelay	; initialize logo fade delay
    141  f016
      0  f016					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f016				   .POINTER   SET	GM_PlayerPtr
      2  f016				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f016
      4  f016		       a9 e4		      LDA	#<.ADDRESS
      5  f018		       85 85		      STA	.POINTER
      6  f01a		       a9 f4		      LDA	#>.ADDRESS
      7  f01c		       85 86		      STA	.POINTER+1
      8  f01e
      0  f01e					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f01e				   .POINTER   SET	GM_PlayerColorPtr
      2  f01e				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f01e
      4  f01e		       a9 43		      LDA	#<.ADDRESS
      5  f020		       85 87		      STA	.POINTER
      6  f022		       a9 f5		      LDA	#>.ADDRESS
      7  f024		       85 88		      STA	.POINTER+1
      8  f026
    144  f026
      0  f026					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f026				   .POINTER   SET	GM_BugColorPtr
      2  f026				   .ADDRESS   SET	GM_BUG_COLOR
      3  f026
      4  f026		       a9 79		      LDA	#<.ADDRESS
      5  f028		       85 96		      STA	.POINTER
      6  f02a		       a9 f5		      LDA	#>.ADDRESS
      7  f02c		       85 97		      STA	.POINTER+1
      8  f02e
    146  f02e
      0  f02e					      SET_POINTER	GM_BirdPtr, GM_BIRD_1
      1  f02e				   .POINTER   SET	GM_BirdPtr
      2  f02e				   .ADDRESS   SET	GM_BIRD_1
      3  f02e
      4  f02e		       a9 23		      LDA	#<.ADDRESS
      5  f030		       85 8b		      STA	.POINTER
      6  f032		       a9 f5		      LDA	#>.ADDRESS
      7  f034		       85 8c		      STA	.POINTER+1
      8  f036
    148  f036
    149  f036		       a9 3e		      lda	#62
    150  f038		       85 89		      sta	GM_PlayerXPos
    151  f03a		       a9 15		      lda	#21
    152  f03c		       85 8a		      sta	GM_PlayerYPos
    153  f03e
    154  f03e		       a9 00		      lda	#0
    155  f040		       85 8f		      sta	GM_BirdYPos
    156  f042		       a9 00		      lda	#0
    157  f044		       85 90		      sta	GM_BirdReflection
    158  f046		       85 95		      sta	GM_MissileActive
    159  f048		       a9 0a		      lda	#GAME_BIRD_TICK_LEN
    160  f04a		       85 91		      sta	GM_BirdTick
    161  f04c
    162  f04c		       a9 01		      lda	#1
    163  f04e		       85 a0		      sta	TimerTick
    164  f050		       a9 60		      lda	#GAME_MAX_TIME
    165  f052		       85 9f		      sta	Timer
    166  f054
    167  f054		       a9 01		      lda	#1
    168  f056		       85 9d		      sta	GameOver
    169  f058
    170  f058		       a9 02		      lda	#2
    171  f05a		       85 01		      sta	VBLANK	; turn on VBLANK
    172  f05c
    173  f05c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    174  f05c							;; LOGO MODE - LM
    175  f05c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    176  f05c				   LM_NextFrame
      0  f05c					      VERTICAL_SYNC		; vertical sync - 3 scanlines
      1  f05c		       a9 0e		      lda	#%1110
      2  f05e		       85 02	   .VSLP1     sta	WSYNC
      3  f060		       85 00		      sta	VSYNC
      4  f062		       4a		      lsr
      5  f063		       d0 f9		      bne	.VSLP1
    178  f065
    179  f065							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    180  f065							;; Vertical Blank - 37 scanlines - 2812 mc
    181  f065							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    182  f065		       a9 2b		      lda	#TIMER_VBLANK
    183  f067		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    184  f06a
    185  f06a				   .LM_Fade		; handles logo fade in
    186  f06a		       a5 80		      lda	LM_LogoFadeState
    187  f06c		       c9 00		      cmp	#0
    188  f06e		       f0 0a		      beq	.LM_FadeDone	; if fade in is complete then jump out
    189  f070		       c6 81		      dec	LM_LogoFadeDelay	; dec fade delay
    190  f072		       d0 06		      bne	.LM_FadeDone	; if still waiting for delay then jump out
    191  f074		       c6 80		      dec	LM_LogoFadeState	; dec fade in state
    192  f076		       a9 14		      lda	#LOGO_FADE_DELAY
    193  f078		       85 81		      sta	LM_LogoFadeDelay	; restore fade in delay
    194  f07a				   .LM_FadeDone
    195  f07a
    196  f07a				   .LM_SetColor 		; set correct colors
    197  f07a		       a4 80		      ldy	LM_LogoFadeState	; set Y = index of logo color
    198  f07c		       ad 82 02 	      lda	SWCHB	; load console switches
    199  f07f		       29 08		      and	#BW_MASK	; check if black & white
    200  f081		       f0 0c		      beq	.LM_BWMode
    201  f083				   .LM_ColorMode
    202  f083		       a9 38		      lda	#LOGO_BK_COLOR
    203  f085		       85 09		      sta	COLUBK	; set background color
    204  f087		       b9 8a f4 	      lda	LM_LogoFade_Color,Y
    205  f08a		       85 08		      sta	COLUPF	; set logo color
    206  f08c		       4c 98 f0 	      jmp	.LM_SetColorDone
    207  f08f				   .LM_BWMode
    208  f08f		       a9 06		      lda	#LOGO_BK_BW
    209  f091		       85 09		      sta	COLUBK	; set background color
    210  f093		       b9 8f f4 	      lda	LM_LogoFade_BW,Y
    211  f096		       85 08		      sta	COLUPF	; set logo color
    212  f098				   .LM_SetColorDone
    213  f098
    214  f098		       e6 9c		      inc	Random
    215  f09a
    216  f09a				   .LM_VBLankWait
    217  f09a		       ae 84 02 	      ldx	INTIM
    218  f09d		       d0 fb		      bne	.LM_VBLankWait	; wait until timer is done
    219  f09f		       a9 00		      lda	#0
    220  f0a1		       85 02		      sta	WSYNC	; get a fresh scanline
    221  f0a3							; -------------------------
    222  f0a3		       85 01		      sta	VBLANK	; turn off VBLANK
    223  f0a5
    224  f0a5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    225  f0a5							;; Playfield - 192 scanlines - 14592 mc
    226  f0a5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    227  f0a5
    228  f0a5				   .LM_Top		; waste 68 scanlines
    229  f0a5		       a2 44		      ldx	#68
      0  f0a7					      WAIT_X_WSYNC
      1  f0a7				   .WaitX
      2  f0a7		       85 02		      sta	WSYNC
      3  f0a9		       ca		      dex
      4  f0aa		       d0 fb		      bne	.WaitX
    231  f0ac							; -------------------------
    232  f0ac
    233  f0ac				   .LM_Middle		; logo is a total of 36 scanlines
    234  f0ac		       a0 00		      ldy	#0	; Y = index to playfield bytes
    235  f0ae				   .LM_LoopY
    236  f0ae		       a2 04		      ldx	#4	; draw every logo line 4 scanlines
    237  f0b0				   .LM_LoopX
    238  f0b0		       85 02		      sta	WSYNC	; get fresh scanline
    239  f0b2							; -------------------------
    240  f0b2		       b9 54 f4 	      lda	LM_LogoPF0,Y
    241  f0b5		       85 0d		      sta	PF0	; set first part of left playfield
    242  f0b7		       b9 66 f4 	      lda	LM_LogoPF1,Y
    243  f0ba		       85 0e		      sta	PF1	; set second part of left playfield
    244  f0bc		       b9 78 f4 	      lda	LM_LogoPF2,Y
    245  f0bf		       85 0f		      sta	PF2	; set third part of left playfield
    246  f0c1		       c8		      iny		; inc Y to get the right playfield bytes
    247  f0c2		       b9 54 f4 	      lda	LM_LogoPF0,Y
    248  f0c5		       85 0d		      sta	PF0	; set first part of right playfield
    249  f0c7		       b9 66 f4 	      lda	LM_LogoPF1,Y
    250  f0ca		       85 0e		      sta	PF1	; set second part of right playfield
    251  f0cc		       b9 78 f4 	      lda	LM_LogoPF2,Y
    252  f0cf		       88		      dey		; dec Y to bea able to repeat left/right for 4 lines
    253  f0d0		       ea		      nop		; just for timing
    254  f0d1		       85 0f		      sta	PF2	; set third part of right playfield
    255  f0d3
    256  f0d3		       ca		      dex
    257  f0d4		       d0 da		      bne	.LM_LoopX	; loop while we havn't drawn 4 scanlines
    258  f0d6		       c8		      iny
    259  f0d7		       c8		      iny		; inc y by 2 to get to the next playfield byte pairs
    260  f0d8		       c0 12		      cpy	#18	; all bytes drawn?
    261  f0da		       d0 d2		      bne	.LM_LoopY	; loop until all logo bytes are drawn
    262  f0dc
    263  f0dc				   .LM_TurnOffLogo		; use 1 scanline to turn off logo
    264  f0dc		       a5 02		      lda	WSYNC	; get a fresh scanline
    265  f0de							; -------------------------
    266  f0de		       a9 00		      lda	#0
    267  f0e0		       85 0d		      sta	PF0	; reset playfield graphics
    268  f0e2		       85 0e		      sta	PF1
    269  f0e4		       85 0f		      sta	PF2
    270  f0e6
    271  f0e6				   .LM_Bottom
    272  f0e6		       a2 57		      ldx	#87	; waste remaining 87 scanlines
      0  f0e8					      WAIT_X_WSYNC
      1  f0e8				   .WaitX
      2  f0e8		       85 02		      sta	WSYNC
      3  f0ea		       ca		      dex
      4  f0eb		       d0 fb		      bne	.WaitX
    274  f0ed							; -------------------------
    275  f0ed
    276  f0ed							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    277  f0ed							;; Overscan - 30 scanlines - 2280 mc
    278  f0ed							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    279  f0ed		       a9 02		      lda	#2	; A = 2 = #%00000010
    280  f0ef		       85 01		      sta	VBLANK	; Turn on VBLANK
    281  f0f1		       a9 23		      lda	#TIMER_OVERSCAN
    282  f0f3		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    283  f0f6
    284  f0f6				   .LM_CheckReset
    285  f0f6		       ad 82 02 	      lda	SWCHB	; load console switches
    286  f0f9		       29 01		      and	#RESET_MASK
    287  f0fb		       d0 03		      bne	.LM_NoReset
    288  f0fd		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    289  f100				   .LM_NoReset
    290  f100
    291  f100				   .LM_CheckLeftButton
    292  f100		       a5 0c		      lda	INPT4	; load left joystick button
    293  f102		       29 80		      and	#LEFT_BTN_MASK
    294  f104		       d0 08		      bne	.LM_NoLeftButton
    295  f106		       85 02		      sta	WSYNC
    296  f108		       20 b4 f3 	      jsr	PlaceBug
    297  f10b		       4c 18 f1 	      jmp	GM_NextFrame	; start game if button is pressed
    298  f10e				   .LM_NoLeftButton
    299  f10e
    300  f10e				   .LM_OverscanWait
    301  f10e		       ae 84 02 	      ldx	INTIM
    302  f111		       d0 fb		      bne	.LM_OverscanWait	; wait until timer is done
    303  f113		       85 02		      sta	WSYNC
    304  f115							; -------------------------
    305  f115		       4c 5c f0 	      jmp	LM_NextFrame
    306  f118
    307  f118
    308  f118							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    309  f118							;; GAME MODE - GM
    310  f118							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    311  f118				   GM_NextFrame
      0  f118					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f118		       a9 0e		      lda	#%1110
      2  f11a		       85 02	   .VSLP1     sta	WSYNC
      3  f11c		       85 00		      sta	VSYNC
      4  f11e		       4a		      lsr
      5  f11f		       d0 f9		      bne	.VSLP1
    313  f121
    314  f121							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    315  f121							;; Vertical Blank - 37 scanlines - 2812 mc
    316  f121							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    317  f121		       a9 2b		      lda	#TIMER_VBLANK
    318  f123		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    319  f126
    320  f126
    321  f126				   .GM_CheckCollisions
    322  f126
    323  f126				   .GM_CheckColP0ToP1
    324  f126		       a5 07		      lda	CXPPMM
    325  f128		       29 80		      and	#%10000000
    326  f12a		       f0 0c		      beq	.GM_CheckColP0ToP1Done
    327  f12c		       f8		      sed
    328  f12d		       a5 9e		      lda	Score
    329  f12f		       18		      clc
    330  f130		       69 01		      adc	#1
    331  f132		       85 9e		      sta	Score
    332  f134		       d8		      cld
    333  f135		       20 b4 f3 	      jsr	PlaceBug
    334  f138				   .GM_CheckColP0ToP1Done
    335  f138
    336  f138				   .GM_CheckColM1ToP0
    337  f138		       a5 01		      lda	CXM1P
    338  f13a		       29 80		      and	#%10000000
    339  f13c		       f0 08		      beq	.GM_CheckColM1ToP0Done
    340  f13e		       a9 00		      lda	#0
    341  f140		       85 9e		      sta	Score
    342  f142		       a9 00		      lda	#0
    343  f144		       85 95		      sta	GM_MissileActive
    344  f146				   .GM_CheckColM1ToP0Done
    345  f146
    346  f146
    347  f146				   .GM_CheckColM1ToPF
    348  f146		       a5 05		      lda	CXM1FB
    349  f148		       29 80		      and	#%10000000
    350  f14a		       f0 04		      beq	.GM_CheckColM1ToPFDone
    351  f14c		       a9 00		      lda	#0
    352  f14e		       85 95		      sta	GM_MissileActive
    353  f150				   .GM_CheckColM1ToPFDone
    354  f150
    355  f150
    356  f150				   .GM_CheckCollisionsDone
    357  f150		       85 2c		      sta	CXCLR
    358  f152
    359  f152		       a5 89		      lda	GM_PlayerXPos	; load player x pos
    360  f154		       a0 00		      ldy	#0	; set Y = 0 for player 0
    361  f156		       20 d7 f3 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    362  f159
    363  f159		       a5 98		      lda	GM_BugXPos	; load bug x pos
    364  f15b		       a0 01		      ldy	#1	; set Y = 1 for player 1
    365  f15d		       20 d7 f3 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    366  f160
    367  f160		       a5 93		      lda	GM_MissileXPos	; load bug x pos
    368  f162		       a0 03		      ldy	#3	; set Y = 2 for missile 0
    369  f164		       20 d7 f3 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    370  f167
    371  f167		       85 02		      sta	WSYNC	; geta fresh scanline
    372  f169							; -------------------------
    373  f169		       85 2a		      sta	HMOVE	; apply positions offset
    374  f16b
    375  f16b				   .GM_HandleTimer
    376  f16b		       a5 9d		      lda	GameOver
    377  f16d		       d0 19		      bne	.GM_HandleTimerDone
    378  f16f
    379  f16f		       c6 a0		      dec	TimerTick
    380  f171		       d0 15		      bne	.GM_HandleTimerDone
    381  f173
    382  f173		       a9 3c		      lda	#60
    383  f175		       85 a0		      sta	TimerTick
    384  f177
    385  f177		       f8		      sed
    386  f178		       a5 9f		      lda	Timer
    387  f17a		       38		      sec
    388  f17b		       e9 01		      sbc	#1
    389  f17d		       85 9f		      sta	Timer
    390  f17f		       d8		      cld
    391  f180
    392  f180		       a5 9f		      lda	Timer
    393  f182		       d0 04		      bne	.GM_HandleTimerDone
    394  f184		       a9 01		      lda	#1
    395  f186		       85 9d		      sta	GameOver
    396  f188				   .GM_HandleTimerDone
    397  f188
    398  f188				   .GM_SetColor 		; set correct colors
    399  f188		       ad 82 02 	      lda	SWCHB
    400  f18b		       25 08		      and	BW_MASK
    401  f18d		       f0 36		      beq	.GM_BWMode
    402  f18f				   .GM_ColorMode
    403  f18f		       a9 78		      lda	#GAME_SKY_COLOR
    404  f191		       85 84		      sta	GM_SkyColor
    405  f193		       a9 c8		      lda	#GAME_BK_COLOR
    406  f195		       85 82		      sta	GM_BackgroundColor
    407  f197		       a9 c0		      lda	#GAME_PF_COLOR
    408  f199		       85 83		      sta	GM_TreeColor
      0  f19b					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f19b				   .POINTER   SET	GM_PlayerColorPtr
      2  f19b				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f19b
      4  f19b		       a9 43		      LDA	#<.ADDRESS
      5  f19d		       85 87		      STA	.POINTER
      6  f19f		       a9 f5		      LDA	#>.ADDRESS
      7  f1a1		       85 88		      STA	.POINTER+1
      8  f1a3
      0  f1a3					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f1a3				   .POINTER   SET	GM_BugColorPtr
      2  f1a3				   .ADDRESS   SET	GM_BUG_COLOR
      3  f1a3
      4  f1a3		       a9 79		      LDA	#<.ADDRESS
      5  f1a5		       85 96		      STA	.POINTER
      6  f1a7		       a9 f5		      LDA	#>.ADDRESS
      7  f1a9		       85 97		      STA	.POINTER+1
      8  f1ab
      0  f1ab					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_COLOR
      1  f1ab				   .POINTER   SET	GM_BirdColorPtr
      2  f1ab				   .ADDRESS   SET	GM_BIRD_COLOR
      3  f1ab
      4  f1ab		       a9 8b		      LDA	#<.ADDRESS
      5  f1ad		       85 8d		      STA	.POINTER
      6  f1af		       a9 f5		      LDA	#>.ADDRESS
      7  f1b1		       85 8e		      STA	.POINTER+1
      8  f1b3
    412  f1b3
    413  f1b3				   .GM_SetCoreboardColorCM
    414  f1b3		       a5 9f		      lda	Timer
    415  f1b5		       f0 07		      beq	.GM_GameOverCM
    416  f1b7		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    417  f1b9		       85 09		      sta	COLUBK
    418  f1bb		       4c c2 f1 	      jmp	.GM_SetScoreboardColorCMDone
    419  f1be				   .GM_GameOverCM
    420  f1be		       a9 20		      lda	#GAME_GAMEOVER_COLOR
    421  f1c0		       85 09		      sta	COLUBK
    422  f1c2				   .GM_SetScoreboardColorCMDone
    423  f1c2
    424  f1c2		       4c f8 f1 	      jmp	.GM_SetColorDone
    425  f1c5				   .GM_BWMode
    426  f1c5		       a9 04		      lda	#GAME_SKY_BW
    427  f1c7		       85 84		      sta	GM_SkyColor
    428  f1c9		       a9 08		      lda	#GAME_BK_BW
    429  f1cb		       85 82		      sta	GM_BackgroundColor
    430  f1cd		       a9 02		      lda	#GAME_PF_BW
    431  f1cf		       85 83		      sta	GM_TreeColor
      0  f1d1					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_BW_IDLE
      1  f1d1				   .POINTER   SET	GM_PlayerColorPtr
      2  f1d1				   .ADDRESS   SET	GM_PLAYER_BW_IDLE
      3  f1d1
      4  f1d1		       a9 5e		      LDA	#<.ADDRESS
      5  f1d3		       85 87		      STA	.POINTER
      6  f1d5		       a9 f5		      LDA	#>.ADDRESS
      7  f1d7		       85 88		      STA	.POINTER+1
      8  f1d9
      0  f1d9					      SET_POINTER	GM_BugColorPtr, GM_BUG_BW
      1  f1d9				   .POINTER   SET	GM_BugColorPtr
      2  f1d9				   .ADDRESS   SET	GM_BUG_BW
      3  f1d9
      4  f1d9		       a9 82		      LDA	#<.ADDRESS
      5  f1db		       85 96		      STA	.POINTER
      6  f1dd		       a9 f5		      LDA	#>.ADDRESS
      7  f1df		       85 97		      STA	.POINTER+1
      8  f1e1
      0  f1e1					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_BW
      1  f1e1				   .POINTER   SET	GM_BirdColorPtr
      2  f1e1				   .ADDRESS   SET	GM_BIRD_BW
      3  f1e1
      4  f1e1		       a9 91		      LDA	#<.ADDRESS
      5  f1e3		       85 8d		      STA	.POINTER
      6  f1e5		       a9 f5		      LDA	#>.ADDRESS
      7  f1e7		       85 8e		      STA	.POINTER+1
      8  f1e9
    435  f1e9
    436  f1e9				   .GM_SetCoreboardColorBW
    437  f1e9		       a5 9f		      lda	Timer
    438  f1eb		       f0 07		      beq	.GM_GameOverBW
    439  f1ed		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    440  f1ef		       85 09		      sta	COLUBK
    441  f1f1		       4c f8 f1 	      jmp	.GM_SetScoreboardColorBWDone
    442  f1f4				   .GM_GameOverBW
    443  f1f4		       a9 02		      lda	#GAME_GAMEOVER_BW
    444  f1f6		       85 09		      sta	COLUBK
    445  f1f8				   .GM_SetScoreboardColorBWDone
    446  f1f8
    447  f1f8				   .GM_SetColorDone
    448  f1f8
    449  f1f8				   .GM_SetGraphics
    450  f1f8		       ad 82 02 	      lda	SWCHB
    451  f1fb		       29 40		      and	#%01000000
    452  f1fd		       f0 0b		      beq	.GM_SetDress
    453  f1ff				   .GM_SetPants
      0  f1ff					      SET_POINTER	GM_PlayerPtr, GM_PANTS_IDLE
      1  f1ff				   .POINTER   SET	GM_PlayerPtr
      2  f1ff				   .ADDRESS   SET	GM_PANTS_IDLE
      3  f1ff
      4  f1ff		       a9 ff		      LDA	#<.ADDRESS
      5  f201		       85 85		      STA	.POINTER
      6  f203		       a9 f4		      LDA	#>.ADDRESS
      7  f205		       85 86		      STA	.POINTER+1
      8  f207
    455  f207		       4c 12 f2 	      jmp	.GM_SetGraphicsDone
    456  f20a				   .GM_SetDress
      0  f20a					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f20a				   .POINTER   SET	GM_PlayerPtr
      2  f20a				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f20a
      4  f20a		       a9 e4		      LDA	#<.ADDRESS
      5  f20c		       85 85		      STA	.POINTER
      6  f20e		       a9 f4		      LDA	#>.ADDRESS
      7  f210		       85 86		      STA	.POINTER+1
      8  f212
    458  f212				   .GM_SetGraphicsDone
    459  f212
    460  f212				   .GM_PlayfieldInit
    461  f212		       a9 47		      lda	#71
    462  f214		       85 9b		      sta	PFCounter	; 144/2 scanelines
    463  f216		       20 eb f3 	      jsr	PrepareScoreAndTimer
    464  f219
    465  f219				   .GM_VBLankWait
    466  f219		       ae 84 02 	      ldx	INTIM
    467  f21c		       d0 fb		      bne	.GM_VBLankWait	; wait until timer is done
    468  f21e		       a9 00		      lda	#0
    469  f220		       85 02		      sta	WSYNC	; get a fresh scanline
    470  f222							; -------------------------
    471  f222		       85 01		      sta	VBLANK	; turn off VBLANK
    472  f224
    473  f224							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    474  f224							;; Score Board - 20 scanlines - 1520 mc
    475  f224							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    476  f224		       a9 0e		      lda	#$0E
    477  f226		       85 08		      sta	COLUPF
    478  f228
    479  f228		       a9 00		      lda	#0
    480  f22a		       85 0d		      sta	PF0
    481  f22c		       85 0e		      sta	PF1
    482  f22e		       85 0f		      sta	PF2
    483  f230		       a9 00		      lda	#00000000
    484  f232		       85 0a		      sta	CTRLPF	; disable playfield/scoreboard reflection
    485  f234
    486  f234		       a2 05		      ldx	#5
      0  f236					      WAIT_X_WSYNC
      1  f236				   .WaitX
      2  f236		       85 02		      sta	WSYNC
      3  f238		       ca		      dex
      4  f239		       d0 fb		      bne	.WaitX
    488  f23b							; -------------------------
    489  f23b
    490  f23b		       a0 05		      ldy	#5
    491  f23d				   .GM_ScoreboardLoop
    492  f23d
    493  f23d					      REPEAT	2
    494  f23d		       b9 a6 00 	      lda	ScoreSprite,Y
    495  f240		       85 0e		      sta	PF1
    496  f242
    497  f242					      REPEAT	13
    498  f242		       ea		      nop
    497  f242					      REPEND
    498  f243		       ea		      nop
    497  f243					      REPEND
    498  f244		       ea		      nop
    497  f244					      REPEND
    498  f245		       ea		      nop
    497  f245					      REPEND
    498  f246		       ea		      nop
    497  f246					      REPEND
    498  f247		       ea		      nop
    497  f247					      REPEND
    498  f248		       ea		      nop
    497  f248					      REPEND
    498  f249		       ea		      nop
    497  f249					      REPEND
    498  f24a		       ea		      nop
    497  f24a					      REPEND
    498  f24b		       ea		      nop
    497  f24b					      REPEND
    498  f24c		       ea		      nop
    497  f24c					      REPEND
    498  f24d		       ea		      nop
    497  f24d					      REPEND
    498  f24e		       ea		      nop
    499  f24f					      REPEND
    500  f24f
    501  f24f		       b9 ac 00 	      lda	TimerSprite,Y
    502  f252		       85 0e		      sta	PF1
    503  f254
    504  f254		       85 02		      sta	WSYNC
    505  f256							; -------------------------
    493  f256					      REPEND
    494  f256		       b9 a6 00 	      lda	ScoreSprite,Y
    495  f259		       85 0e		      sta	PF1
    496  f25b
    497  f25b					      REPEAT	13
    498  f25b		       ea		      nop
    497  f25b					      REPEND
    498  f25c		       ea		      nop
    497  f25c					      REPEND
    498  f25d		       ea		      nop
    497  f25d					      REPEND
    498  f25e		       ea		      nop
    497  f25e					      REPEND
    498  f25f		       ea		      nop
    497  f25f					      REPEND
    498  f260		       ea		      nop
    497  f260					      REPEND
    498  f261		       ea		      nop
    497  f261					      REPEND
    498  f262		       ea		      nop
    497  f262					      REPEND
    498  f263		       ea		      nop
    497  f263					      REPEND
    498  f264		       ea		      nop
    497  f264					      REPEND
    498  f265		       ea		      nop
    497  f265					      REPEND
    498  f266		       ea		      nop
    497  f266					      REPEND
    498  f267		       ea		      nop
    499  f268					      REPEND
    500  f268
    501  f268		       b9 ac 00 	      lda	TimerSprite,Y
    502  f26b		       85 0e		      sta	PF1
    503  f26d
    504  f26d		       85 02		      sta	WSYNC
    505  f26f							; -------------------------
    506  f26f					      REPEND
    507  f26f
    508  f26f		       88		      dey
    509  f270		       d0 cb		      bne	.GM_ScoreboardLoop
    510  f272
    511  f272		       a9 00		      lda	#0
    512  f274		       85 0e		      sta	PF1
    513  f276
    514  f276		       a2 05		      ldx	#5
      0  f278					      WAIT_X_WSYNC
      1  f278				   .WaitX
      2  f278		       85 02		      sta	WSYNC
      3  f27a		       ca		      dex
      4  f27b		       d0 fb		      bne	.WaitX
    516  f27d
    517  f27d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    518  f27d							;; Sky - 30 scanlines - 1520 mc
    519  f27d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    520  f27d		       a5 84		      lda	GM_SkyColor
    521  f27f		       85 09		      sta	COLUBK
    522  f281		       a2 0e		      ldx	#14
    523  f283		       a9 00		      lda	#0
    524  f285		       85 25		      sta	VDELP0	; clear vertical delay för player 0
    525  f287
    526  f287		       a5 90		      lda	GM_BirdReflection
    527  f289		       85 0b		      sta	REFP0
    528  f28b
    529  f28b				   .GM_SkyLoop
    530  f28b
    531  f28b				   .GM_DrawBird
    532  f28b		       8a		      txa		; transfer X to A
    533  f28c		       38		      sec		; make sure carry flag is set
    534  f28d		       e5 8f		      sbc	GM_BirdYPos	; subtract sprite Y coordinate
    535  f28f		       c5 06		      cmp	GAME_BIRD_HEIGHT	; are we inside the sprite height bounds?
    536  f291		       90 02		      bcc	.GM_WriteBird	; if result < SpriteHeight, call subroutine
    537  f293		       a9 00		      lda	#0	; else, set index to 0
    538  f295				   .GM_WriteBird
    539  f295		       a8		      tay
    540  f296		       b1 8b		      lda	(GM_BirdPtr),Y	; load player bitmap slice of data
    541  f298		       85 02		      sta	WSYNC	; wait for next scanline
    542  f29a							; -------------------------
    543  f29a		       85 1b		      sta	GRP0	; set graphics for player 0 slice
    544  f29c		       b1 8d		      lda	(GM_BirdColorPtr),Y	; load player color from lookup table
    545  f29e		       85 06		      sta	COLUP0	; set color for player 1 slice
    546  f2a0				   .GM_DrawBirdDone
    547  f2a0		       85 02		      sta	WSYNC	; wait for next scanline
    548  f2a2							; -------------------------
    549  f2a2		       ca		      dex
    550  f2a3		       d0 e6		      bne	.GM_SkyLoop
    551  f2a5
    552  f2a5
    553  f2a5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    554  f2a5							;; Playfield - 152 scanlines - 11552 mc
    555  f2a5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    556  f2a5
    557  f2a5		       a9 01		      lda	#1
    558  f2a7		       85 25		      sta	VDELP0	; set vertical delay för player 0
    559  f2a9		       a9 00		      lda	#0
    560  f2ab		       85 0b		      sta	REFP0
    561  f2ad		       85 02		      sta	WSYNC
    562  f2af		       a5 83		      lda	GM_TreeColor
    563  f2b1		       85 08		      sta	COLUPF
    564  f2b3		       a9 00		      lda	#$00	; load player color from lookup table
    565  f2b5		       85 07		      sta	COLUP1	; set color for player 1 slice
    566  f2b7		       a9 05		      lda	#%00000101
    567  f2b9		       85 0a		      sta	CTRLPF	; enable playfield reflection
    568  f2bb		       85 02		      sta	WSYNC
    569  f2bd		       a5 82		      lda	GM_BackgroundColor
    570  f2bf		       85 09		      sta	COLUBK
    571  f2c1
    572  f2c1		       a2 47		      ldx	#71
    573  f2c3				   .GM_PlayfieldLoop
    574  f2c3							; ldx PFCounter	       ; A = current scanline in playfield
    575  f2c3
    576  f2c3				   .GM_DrawMissile
    577  f2c3		       8a		      txa
    578  f2c4		       a0 00		      ldy	#0	; start accumualtor with 0 (null position)
    579  f2c6		       c5 94		      cmp	GM_MissileYPos	; compare X/scanline with missile y-position
    580  f2c8		       d0 02		      bne	.GM_DrawMissileDone	; if is not equal, skip the draw of missile0
    581  f2ca		       a4 95		      ldy	GM_MissileActive	; and set ENABL second bit to enable missile
    582  f2cc				   .GM_DrawMissileDone
    583  f2cc		       84 1e		      sty	ENAM1	; store correct value in the TIA missile register
    584  f2ce
    585  f2ce
    586  f2ce				   .GM_DrawPlayer
    587  f2ce		       8a		      txa
    588  f2cf		       38		      sec		; make sure carry flag is set
    589  f2d0		       e5 8a		      sbc	GM_PlayerYPos	; subtract sprite Y coordinate
    590  f2d2		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    591  f2d4		       90 02		      bcc	.GM_WritePlayer	; if result < height then A contains the index
    592  f2d6		       a9 00		      lda	#0	; else, set A to 0
    593  f2d8				   .GM_WritePlayer
    594  f2d8		       a8		      tay
    595  f2d9		       b1 85		      lda	(GM_PlayerPtr),Y	; load player bitmap slice of data
    596  f2db		       85 1b		      sta	GRP0	; set graphics for player 0 slice - delayed
    597  f2dd		       b1 87		      lda	(GM_PlayerColorPtr),Y	; load player color from lookup table
    598  f2df		       85 a5		      sta	Temp
    599  f2e1				   .GM_DrawPlayerDone
    600  f2e1
    601  f2e1				   .GM_DrawBug
    602  f2e1		       8a		      txa		; transfer X to A
    603  f2e2		       38		      sec		; make sure carry flag is set
    604  f2e3		       e5 99		      sbc	GM_BugYPos	; subtract sprite Y coordinate
    605  f2e5		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    606  f2e7		       90 02		      bcc	.GM_WriteBug	; if result < SpriteHeight, call subroutine
    607  f2e9		       a9 00		      lda	#0	; else, set index to 0
    608  f2eb				   .GM_WriteBug
    609  f2eb		       a8		      tay
    610  f2ec		       b9 1a f5 	      lda	GM_BUG,Y	; load player bitmap slice of data
    611  f2ef		       85 02		      sta	WSYNC	; wait for next scanline
    612  f2f1							; -------------------------
    613  f2f1		       85 1c		      sta	GRP1	; set graphics for player 1 + 0 slice
    614  f2f3		       a5 a5		      lda	Temp
    615  f2f5		       85 06		      sta	COLUP0	; set color for player 0 slice
    616  f2f7				   .GM_DrawBugDone
    617  f2f7
    618  f2f7				   .GM_DrawTree
    619  f2f7		       8a		      txa		; A = current scanline in playfield
    620  f2f8		       38		      sec		; make sure carry flag is set
    621  f2f9		       e9 1c		      sbc	#28	; subtract sprite Y coordinate
    622  f2fb		       c9 14		      cmp	#20	; are we inside the sprite height bounds?
    623  f2fd		       90 02		      bcc	.GM_WriteTree	; if result < height then A contains the index
    624  f2ff		       a9 00		      lda	#0	; else, set A to 0
    625  f301				   .GM_WriteTree
    626  f301		       a8		      tay
    627  f302		       b9 2f f5 	      lda	GM_TREE,y
    628  f305		       85 0f		      sta	PF2
    629  f307				   .GM_DrawTreeDone
    630  f307
    631  f307		       85 02		      sta	WSYNC
    632  f309							; -------------------------
    633  f309
    634  f309		       ca		      dex
    635  f30a		       d0 b7		      bne	.GM_PlayfieldLoop	; repeat next scanline until finished
    636  f30c
    637  f30c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    638  f30c							;; Overscan - 30 scanlines - 2280 mc
    639  f30c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    640  f30c		       a9 02		      lda	#2	; A = 2 = #%00000010
    641  f30e		       85 01		      sta	VBLANK	; Turn on VBLANK
    642  f310		       a9 23		      lda	#TIMER_OVERSCAN
    643  f312		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    644  f315
    645  f315				   .GM_CheckReset
    646  f315		       ad 82 02 	      lda	SWCHB	; load console switches
    647  f318		       29 01		      and	#RESET_MASK
    648  f31a		       d0 03		      bne	.GM_NoReset
    649  f31c		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    650  f31f				   .GM_NoReset
    651  f31f
    652  f31f		       a5 9d		      lda	GameOver
    653  f321		       f0 07		      beq	.GM_NotGameOver
    654  f323		       a5 9f		      lda	Timer
    655  f325		       d0 03		      bne	.GM_NotGameOver
    656  f327		       4c aa f3 	      jmp	.GM_Continue
    657  f32a				   .GM_NotGameOver
    658  f32a
    659  f32a		       c6 91		      dec	GM_BirdTick
    660  f32c		       d0 29		      bne	.GM_BirdAnimDone
    661  f32e		       a9 0a		      lda	#GAME_BIRD_TICK_LEN
    662  f330		       85 91		      sta	GM_BirdTick
    663  f332		       e6 92		      inc	GM_BirdYPosIdx
    664  f334		       a5 92		      lda	GM_BirdYPosIdx
    665  f336		       c9 0c		      cmp	#GAME_BIRD_YPOS_TBL_LEN
    666  f338		       d0 17		      bne	.GM_BirdAnimSet
      0  f33a					      FIRE_MISSILE
      1  f33a		       a5 95		      lda	GM_MissileActive
      2  f33c		       d0 0f		      bne	.NoMissile
      3  f33e		       a5 89		      lda	GM_PlayerXPos
      4  f340		       18		      clc
      5  f341		       69 05		      adc	#5
      6  f343		       85 93		      sta	GM_MissileXPos
      7  f345		       a9 46		      lda	#70
      8  f347		       85 94		      sta	GM_MissileYPos
      9  f349		       a9 02		      lda	#2
     10  f34b		       85 95		      sta	GM_MissileActive
     11  f34d				   .NoMissile
    668  f34d		       a9 00		      lda	#0
    669  f34f		       85 92		      sta	GM_BirdYPosIdx
    670  f351				   .GM_BirdAnimSet
    671  f351		       a8		      tay
    672  f352		       b9 48 f4 	      lda	GM_BIRD_ANIM,Y
    673  f355		       85 8f		      sta	GM_BirdYPos
    674  f357				   .GM_BirdAnimDone
    675  f357
    676  f357		       a9 02		      lda	#2
    677  f359		       c5 94		      cmp	GM_MissileYPos
    678  f35b		       f0 07		      beq	.GM_StopMisssile
    679  f35d		       c6 94		      dec	GM_MissileYPos	; else, increase y-position of the bullet/ball
    680  f35f		       c6 94		      dec	GM_MissileYPos	; else, increase y-position of the bullet/ball
    681  f361		       4c 68 f3 	      jmp	.GM_MissileDone
    682  f364				   .GM_StopMisssile
    683  f364		       a9 00		      lda	#0
    684  f366		       85 95		      sta	GM_MissileActive
    685  f368				   .GM_MissileDone
    686  f368
    687  f368		       a2 00		      ldx	#0
    688  f36a				   .GM_CheckInputUp
    689  f36a		       a9 10		      lda	#%00010000
    690  f36c		       2c 80 02 	      bit	SWCHA
    691  f36f		       d0 04		      bne	.GM_CheckInputDown
    692  f371		       a2 01		      ldx	#1
    693  f373		       e6 8a		      inc	GM_PlayerYPos
    694  f375
    695  f375				   .GM_CheckInputDown
    696  f375		       a9 20		      lda	#%00100000
    697  f377		       2c 80 02 	      bit	SWCHA
    698  f37a		       d0 04		      bne	.GM_CheckInputLeft
    699  f37c		       a2 01		      ldx	#1
    700  f37e		       c6 8a		      dec	GM_PlayerYPos
    701  f380
    702  f380				   .GM_CheckInputLeft
    703  f380		       a9 40		      lda	#%01000000
    704  f382		       2c 80 02 	      bit	SWCHA
    705  f385		       d0 08		      bne	.GM_CheckInputRight
    706  f387		       a9 08		      lda	#%00001000
    707  f389		       85 90		      sta	GM_BirdReflection
    708  f38b		       a2 01		      ldx	#1
    709  f38d		       c6 89		      dec	GM_PlayerXPos
    710  f38f
    711  f38f				   .GM_CheckInputRight
    712  f38f		       a9 80		      lda	#%10000000
    713  f391		       2c 80 02 	      bit	SWCHA
    714  f394		       d0 08		      bne	.GM_CheckInputDone
    715  f396		       a9 00		      lda	#0
    716  f398		       85 90		      sta	GM_BirdReflection
    717  f39a		       a2 01		      ldx	#1
    718  f39c		       e6 89		      inc	GM_PlayerXPos
    719  f39e
    720  f39e				   .GM_CheckInputDone
    721  f39e
    722  f39e		       e0 01		      cpx	#1
    723  f3a0		       d0 08		      bne	.GM_Continue
    724  f3a2		       a5 9f		      lda	Timer
    725  f3a4		       f0 04		      beq	.GM_Continue
    726  f3a6		       a9 00		      lda	#0
    727  f3a8		       85 9d		      sta	GameOver
    728  f3aa				   .GM_Continue
    729  f3aa
    730  f3aa				   .GM_OverscanWait
    731  f3aa		       ae 84 02 	      ldx	INTIM
    732  f3ad		       d0 fb		      bne	.GM_OverscanWait	; wait until timer is done
    733  f3af		       85 02		      sta	WSYNC
    734  f3b1							; -------------------------
    735  f3b1		       4c 18 f1 	      jmp	GM_NextFrame
    736  f3b4
    737  f3b4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    738  f3b4							;; Subruotines
    739  f3b4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    740  f3b4
    741  f3b4				   PlaceBug   subroutine
    742  f3b4		       20 c7 f3 	      jsr	Randomize
    743  f3b7		       a5 9c		      lda	Random
    744  f3b9		       29 7f		      and	#%01111111
    745  f3bb		       85 98		      sta	GM_BugXPos
    746  f3bd		       20 c7 f3 	      jsr	Randomize
    747  f3c0		       a5 9c		      lda	Random
    748  f3c2		       29 3f		      and	#%00111111
    749  f3c4		       85 99		      sta	GM_BugYPos
    750  f3c6		       60		      rts
    751  f3c7
    752  f3c7				   Randomize  subroutine
    753  f3c7		       a5 9c		      lda	Random
    754  f3c9		       0a		      asl
    755  f3ca		       45 9c		      eor	Random
    756  f3cc		       0a		      asl
    757  f3cd		       45 9c		      eor	Random
    758  f3cf		       0a		      asl
    759  f3d0		       0a		      asl
    760  f3d1		       45 9c		      eor	Random
    761  f3d3		       0a		      asl
    762  f3d4		       26 9c		      rol	Random	; performs a series of shifts and bit operations
    763  f3d6		       60		      rts
    764  f3d7
    765  f3d7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    766  f3d7							;; SetObjectXPos
    767  f3d7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    768  f3d7							;; A : Contains the the desired x-coordinate
    769  f3d7							;; Y=0 : Player0
    770  f3d7							;; Y=1 : Player1
    771  f3d7							;; Y=2 : Missile0
    772  f3d7							;; Y=3 : Missile1
    773  f3d7							;; Y=4 : Ball
    774  f3d7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    775  f3d7
    776  f3d7				   SetObjectXPos subroutine
    777  f3d7		       38		      sec		; Set carry flag
    778  f3d8		       85 02		      sta	WSYNC	; Get fresh scanline
    779  f3da							; -------------------------
    780  f3da				   .Div15Loop		; Divide A with 15 by subtraction in loop
    781  f3da		       e9 0f		      sbc	#15	; Subtract 15 from A
    782  f3dc		       b0 fc		      bcs	.Div15Loop	; Loop if carry flag is set
    783  f3de		       49 07		      eor	#7	; Adjust the remainder in A between -8 and 7
    784  f3e0					      REPEAT	4	; Repeat 4 times
    785  f3e0		       0a		      asl		; Shift bits left by one
    784  f3e0					      REPEND		; End of repeat
    785  f3e1		       0a		      asl		; Shift bits left by one
    784  f3e1					      REPEND		; End of repeat
    785  f3e2		       0a		      asl		; Shift bits left by one
    784  f3e2					      REPEND		; End of repeat
    785  f3e3		       0a		      asl		; Shift bits left by one
    786  f3e4					      REPEND		; End of repeat
    787  f3e4		       99 20 00 	      sta	HMP0,Y	; Set fine position value for object HMP0+Y
    788  f3e7		       99 10 00 	      sta	RESP0,Y	; Seset rough position for object HMP0+Y
    789  f3ea		       60		      rts
    790  f3eb
    791  f3eb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    792  f3eb							;; Subroutine to handle scoreboard digits to be displayed on the screen
    793  f3eb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    794  f3eb							;; This is stored using BCD, so the display will be displayed in dec numbers.
    795  f3eb							;; Converts the high and low nibbles of the variables Score and Timer
    796  f3eb							;; into offsets into the digit lookup table so the values can be displayed.
    797  f3eb							;; Each digit has a height of 5 bytes in the lookup table.
    798  f3eb							;;
    799  f3eb							;; For the low nibble we need to multiply by 5:
    800  f3eb							;;   - we can use left shifts to perform multiplation by 2
    801  f3eb							;;   - for any number N, the value of N*5 = (N*2*2)+N
    802  f3eb							;;
    803  f3eb							;; For the upper nibble, since it is already times 16, we need to divide it
    804  f3eb							;; and then multiply it by 5:
    805  f3eb							;;   - we can use right shift to perform division by 2
    806  f3eb							;;   - for any number N, the value of (N/16)*5 = (N/4)+(N/16)
    807  f3eb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    808  f3eb				   PrepareScoreAndTimer subroutine
    809  f3eb		       a2 01		      ldx	#1	; X register is the loop counter
    810  f3ed				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    811  f3ed
    812  f3ed		       b5 9e		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    813  f3ef		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111
    814  f3f1		       85 a5		      sta	Temp	; save the value of A into Temp
    815  f3f3		       0a		      asl		; shift left (it is now N*2)
    816  f3f4		       0a		      asl		; shift left (it is now N*4)
    817  f3f5		       65 a5		      adc	Temp	; add the value saved in Temp (+N)
    818  f3f7		       95 a1		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset
    819  f3f9
    820  f3f9		       b5 9e		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    821  f3fb		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    822  f3fd		       4a		      lsr		; shift right (it is now N/2)
    823  f3fe		       4a		      lsr		; shift right (it is now N/4)
    824  f3ff		       85 a5		      sta	Temp	; save the value of A into Temp
    825  f401		       4a		      lsr		; shift right (it is now N/8)
    826  f402		       4a		      lsr		; shift right (it is now N/16)
    827  f403		       65 a5		      adc	Temp	; add the value saved in Temp (N/16+N/4)
    828  f405		       95 a3		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    829  f407		       ca		      dex		; X--
    830  f408		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    831  f40a
    832  f40a		       a2 05		      ldx	#5
    833  f40c				   .SpriteLoop
    834  f40c
    835  f40c		       a4 a3		      ldy	TensDigitOffset
    836  f40e		       b9 94 f4 	      lda	Digits,y
    837  f411		       29 f0		      and	#$F0
    838  f413		       85 a5		      sta	Temp
    839  f415
    840  f415		       a4 a1		      ldy	OnesDigitOffset
    841  f417		       b9 94 f4 	      lda	Digits,y
    842  f41a		       29 0f		      and	#$0F
    843  f41c		       05 a5		      ora	Temp
    844  f41e		       85 a5		      sta	Temp
    845  f420
    846  f420		       a5 a5		      lda	Temp
    847  f422		       95 a6		      sta	ScoreSprite,X
    848  f424
    849  f424		       a4 a4		      ldy	TensDigitOffset+1
    850  f426		       b9 94 f4 	      lda	Digits,y
    851  f429		       29 f0		      and	#$F0
    852  f42b		       85 a5		      sta	Temp
    853  f42d
    854  f42d		       a4 a2		      ldy	OnesDigitOffset+1
    855  f42f		       b9 94 f4 	      lda	Digits,y
    856  f432		       29 0f		      and	#$0F
    857  f434		       05 a5		      ora	Temp
    858  f436		       85 a5		      sta	Temp
    859  f438
    860  f438		       a5 a5		      lda	Temp
    861  f43a		       95 ac		      sta	TimerSprite,X
    862  f43c
    863  f43c		       e6 a3		      inc	TensDigitOffset
    864  f43e		       e6 a4		      inc	TensDigitOffset+1
    865  f440		       e6 a1		      inc	OnesDigitOffset
    866  f442		       e6 a2		      inc	OnesDigitOffset+1
    867  f444
    868  f444		       ca		      dex
    869  f445		       d0 c5		      bne	.SpriteLoop
    870  f447
    871  f447		       60		      rts
    872  f448
    873  f448							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    874  f448							;; Lookup tabes
    875  f448							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    876  f448
    877  f448				   GM_BIRD_ANIM
    878  f448		       02 05 07 08*	      .byte.b	#2,#5,#7,#8,#8,#8,#8,#8,#7,#5,#2,#1
    879  f454
    880  f454							; https://www.masswerk.at/vcs-tools/TinyPlayfieldEditor/
    881  f454							; mode: asymmetric repeat line-height 4
    882  f454				   LM_LogoPF0
    883  f454		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$90
    884  f45c		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$40,$00,$40
    885  f464		       00 70		      .byte.b	$00,$70
    886  f466				   LM_LogoPF1
    887  f466		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$00,$05,$DE
    888  f46e		       0a 42 0a 4e*	      .byte.b	$0A,$42,$0A,$4E,$08,$52,$08,$56
    889  f476		       38 7b		      .byte.b	$38,$7B
    890  f478				   LM_LogoPF2
    891  f478		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$80,$00,$F8,$00
    892  f480		       a5 00 a5 00*	      .byte.b	$A5,$00,$A5,$00,$BF,$00,$85,$00
    893  f488		       39 03		      .byte.b	$39,$03
    894  f48a
    895  f48a				   LM_LogoFade_Color
    896  f48a		       0e 3e 3c 3a*	      .byte.b	$0E,$3E,$3C,$3A,$38
    897  f48f
    898  f48f				   LM_LogoFade_BW
    899  f48f		       0e 0c 0a 08*	      .byte.b	$0E,$0C,$0A,$08,$06
    900  f494
    901  f494				   Digits
    902  f494		       77		      .byte.b	%01110111	; ### ###
    903  f495		       55		      .byte.b	%01010101	; # # # #
    904  f496		       55		      .byte.b	%01010101	; # # # #
    905  f497		       55		      .byte.b	%01010101	; # # # #
    906  f498		       77		      .byte.b	%01110111	; ### ###
    907  f499
    908  f499		       11		      .byte.b	%00010001	;   #	 #
    909  f49a		       11		      .byte.b	%00010001	;   #	 #
    910  f49b		       11		      .byte.b	%00010001	;   #	 #
    911  f49c		       11		      .byte.b	%00010001	;   #	 #
    912  f49d		       11		      .byte.b	%00010001	;   #	 #
    913  f49e
    914  f49e		       77		      .byte.b	%01110111	; ### ###
    915  f49f		       11		      .byte.b	%00010001	;   #	 #
    916  f4a0		       77		      .byte.b	%01110111	; ### ###
    917  f4a1		       44		      .byte.b	%01000100	; #   #
    918  f4a2		       77		      .byte.b	%01110111	; ### ###
    919  f4a3
    920  f4a3		       77		      .byte.b	%01110111	; ### ###
    921  f4a4		       11		      .byte.b	%00010001	;   #	 #
    922  f4a5		       33		      .byte.b	%00110011	;  ##	##
    923  f4a6		       11		      .byte.b	%00010001	;   #	 #
    924  f4a7		       77		      .byte.b	%01110111	; ### ###
    925  f4a8
    926  f4a8		       55		      .byte.b	%01010101	; # # # #
    927  f4a9		       55		      .byte.b	%01010101	; # # # #
    928  f4aa		       77		      .byte.b	%01110111	; ### ###
    929  f4ab		       11		      .byte.b	%00010001	;   #	 #
    930  f4ac		       11		      .byte.b	%00010001	;   #	 #
    931  f4ad
    932  f4ad		       77		      .byte.b	%01110111	; ### ###
    933  f4ae		       44		      .byte.b	%01000100	; #   #
    934  f4af		       77		      .byte.b	%01110111	; ### ###
    935  f4b0		       11		      .byte.b	%00010001	;   #	 #
    936  f4b1		       77		      .byte.b	%01110111	; ### ###
    937  f4b2
    938  f4b2		       77		      .byte.b	%01110111	; ### ###
    939  f4b3		       44		      .byte.b	%01000100	; #   #
    940  f4b4		       77		      .byte.b	%01110111	; ### ###
    941  f4b5		       55		      .byte.b	%01010101	; # # # #
    942  f4b6		       77		      .byte.b	%01110111	; ### ###
    943  f4b7
    944  f4b7		       77		      .byte.b	%01110111	; ### ###
    945  f4b8		       11		      .byte.b	%00010001	;   #	 #
    946  f4b9		       11		      .byte.b	%00010001	;   #	 #
    947  f4ba		       11		      .byte.b	%00010001	;   #	 #
    948  f4bb		       11		      .byte.b	%00010001	;   #	 #
    949  f4bc
    950  f4bc		       77		      .byte.b	%01110111	; ### ###
    951  f4bd		       55		      .byte.b	%01010101	; # # # #
    952  f4be		       77		      .byte.b	%01110111	; ### ###
    953  f4bf		       55		      .byte.b	%01010101	; # # # #
    954  f4c0		       77		      .byte.b	%01110111	; ### ###
    955  f4c1
    956  f4c1		       77		      .byte.b	%01110111	; ### ###
    957  f4c2		       55		      .byte.b	%01010101	; # # # #
    958  f4c3		       77		      .byte.b	%01110111	; ### ###
    959  f4c4		       11		      .byte.b	%00010001	;   #	 #
    960  f4c5		       77		      .byte.b	%01110111	; ### ###
    961  f4c6
    962  f4c6		       22		      .byte.b	%00100010	;  #	#
    963  f4c7		       55		      .byte.b	%01010101	; # # # #
    964  f4c8		       77		      .byte.b	%01110111	; ### ###
    965  f4c9		       55		      .byte.b	%01010101	; # # # #
    966  f4ca		       55		      .byte.b	%01010101	; # # # #
    967  f4cb
    968  f4cb		       77		      .byte.b	%01110111	; ### ###
    969  f4cc		       55		      .byte.b	%01010101	; # # # #
    970  f4cd		       66		      .byte.b	%01100110	; ##  ##
    971  f4ce		       55		      .byte.b	%01010101	; # # # #
    972  f4cf		       77		      .byte.b	%01110111	; ### ###
    973  f4d0
    974  f4d0		       77		      .byte.b	%01110111	; ### ###
    975  f4d1		       44		      .byte.b	%01000100	; #   #
    976  f4d2		       44		      .byte.b	%01000100	; #   #
    977  f4d3		       44		      .byte.b	%01000100	; #   #
    978  f4d4		       77		      .byte.b	%01110111	; ### ###
    979  f4d5
    980  f4d5		       66		      .byte.b	%01100110	; ##  ##
    981  f4d6		       55		      .byte.b	%01010101	; # # # #
    982  f4d7		       55		      .byte.b	%01010101	; # # # #
    983  f4d8		       55		      .byte.b	%01010101	; # # # #
    984  f4d9		       66		      .byte.b	%01100110	; ##  ##
    985  f4da
    986  f4da		       77		      .byte.b	%01110111	; ### ###
    987  f4db		       44		      .byte.b	%01000100	; #   #
    988  f4dc		       77		      .byte.b	%01110111	; ### ###
    989  f4dd		       44		      .byte.b	%01000100	; #   #
    990  f4de		       77		      .byte.b	%01110111	; ### ###
    991  f4df
    992  f4df		       77		      .byte.b	%01110111	; ### ###
    993  f4e0		       44		      .byte.b	%01000100	; #   #
    994  f4e1		       66		      .byte.b	%01100110	; ##  ##
    995  f4e2		       44		      .byte.b	%01000100	; #   #
    996  f4e3		       44		      .byte.b	%01000100	; #   #
    997  f4e4
    998  f4e4							;---Graphics Data from PlayerPal 2600---
    999  f4e4
   1000  f4e4				   GM_DRESS_IDLE
   1001  f4e4		       00		      .byte.b	#0
   1002  f4e5		       7e		      .byte.b	#%01111110	;$70
   1003  f4e6		       7e		      .byte.b	#%01111110	;$70
   1004  f4e7		       3c		      .byte.b	#%00111100	;$70
   1005  f4e8		       5a		      .byte.b	#%01011010	;$84
   1006  f4e9		       7e		      .byte.b	#%01111110	;$84
   1007  f4ea		       18		      .byte.b	#%00011000	;$F4
   1008  f4eb		       3c		      .byte.b	#%00111100	;$00
   1009  f4ec		       18		      .byte.b	#%00011000	;$00
   1010  f4ed				   GM_DRESS_WALK1
   1011  f4ed		       00		      .byte.b	#0
   1012  f4ee		       78		      .byte.b	#%01111000	;$70
   1013  f4ef		       7e		      .byte.b	#%01111110	;$70
   1014  f4f0		       3c		      .byte.b	#%00111100	;$70
   1015  f4f1		       1a		      .byte.b	#%00011010	;$84
   1016  f4f2		       7e		      .byte.b	#%01111110	;$84
   1017  f4f3		       18		      .byte.b	#%00011000	;$F4
   1018  f4f4		       3c		      .byte.b	#%00111100	;$00
   1019  f4f5		       18		      .byte.b	#%00011000	;$00
   1020  f4f6				   GM_DRESS_WALK2
   1021  f4f6		       00		      .byte.b	#0
   1022  f4f7		       1e		      .byte.b	#%00011110	;$70
   1023  f4f8		       7e		      .byte.b	#%01111110	;$70
   1024  f4f9		       3c		      .byte.b	#%00111100	;$70
   1025  f4fa		       58		      .byte.b	#%01011000	;$84
   1026  f4fb		       7e		      .byte.b	#%01111110	;$84
   1027  f4fc		       18		      .byte.b	#%00011000	;$F4
   1028  f4fd		       3c		      .byte.b	#%00111100	;$00
   1029  f4fe		       18		      .byte.b	#%00011000	;$00
   1030  f4ff				   GM_PANTS_IDLE
   1031  f4ff		       00		      .byte.b	#0
   1032  f500		       66		      .byte.b	#%01100110	;$70
   1033  f501		       24		      .byte.b	#%00100100	;$70
   1034  f502		       3c		      .byte.b	#%00111100	;$70
   1035  f503		       5a		      .byte.b	#%01011010	;$84
   1036  f504		       7e		      .byte.b	#%01111110	;$84
   1037  f505		       18		      .byte.b	#%00011000	;$F4
   1038  f506		       3c		      .byte.b	#%00111100	;$00
   1039  f507		       18		      .byte.b	#%00011000	;$00
   1040  f508				   GM_PANTS_WALK1
   1041  f508		       00		      .byte.b	#0
   1042  f509		       60		      .byte.b	#%01100000	;$70
   1043  f50a		       26		      .byte.b	#%00100110	;$70
   1044  f50b		       3c		      .byte.b	#%00111100	;$70
   1045  f50c		       1a		      .byte.b	#%00011010	;$84
   1046  f50d		       7e		      .byte.b	#%01111110	;$84
   1047  f50e		       18		      .byte.b	#%00011000	;$F4
   1048  f50f		       3c		      .byte.b	#%00111100	;$00
   1049  f510		       18		      .byte.b	#%00011000	;$00
   1050  f511				   GM_PANTS_WALK2
   1051  f511		       00		      .byte.b	#0
   1052  f512		       06		      .byte.b	#%00000110	;$70
   1053  f513		       64		      .byte.b	#%01100100	;$70
   1054  f514		       3c		      .byte.b	#%00111100	;$70
   1055  f515		       58		      .byte.b	#%01011000	;$84
   1056  f516		       7e		      .byte.b	#%01111110	;$84
   1057  f517		       18		      .byte.b	#%00011000	;$F4
   1058  f518		       3c		      .byte.b	#%00111100	;$00
   1059  f519		       18		      .byte.b	#%00011000	;$00
   1060  f51a				   GM_BUG
   1061  f51a		       00		      .byte.b	#0
   1062  f51b		       00		      .byte.b	#%00000000	;$00
   1063  f51c		       00		      .byte.b	#%00000000	;$00
   1064  f51d		       52		      .byte.b	#%01010010	;$F0
   1065  f51e		       3c		      .byte.b	#%00111100	;$F0
   1066  f51f		       3c		      .byte.b	#%00111100	;$F2
   1067  f520		       52		      .byte.b	#%01010010	;$F0
   1068  f521		       00		      .byte.b	#%00000000	;$00
   1069  f522		       00		      .byte.b	#%00000000	;$00
   1070  f523				   GM_BIRD_1
   1071  f523		       00		      .byte.b	#0
   1072  f524		       01		      .byte.b	#%00000001	;$1C
   1073  f525		       3f		      .byte.b	#%00111111	;$0E
   1074  f526		       fe		      .byte.b	#%11111110	;$0A
   1075  f527		       18		      .byte.b	#%00011000	;$0E
   1076  f528		       76		      .byte.b	#%01110110	;$0E
   1077  f529				   GM_BIRD_2
   1078  f529		       00		      .byte.b	#0
   1079  f52a		       01		      .byte.b	#%00000001	;$1C
   1080  f52b		       3f		      .byte.b	#%00111111	;$0E
   1081  f52c		       fe		      .byte.b	#%11111110	;$0A
   1082  f52d		       f8		      .byte.b	#%11111000	;$0E
   1083  f52e		       00		      .byte.b	#%00000000	;$0E
   1084  f52f
   1085  f52f							;---End Graphics Data---
   1086  f52f
   1087  f52f
   1088  f52f				   GM_TREE
   1089  f52f		       00 80 80 80	      .byte.b	$00,$80,$80,$80
   1090  f533		       80 80 80 80*	      .byte.b	$80,$80,$80,$80,$D0,$F8,$F8,$F8
   1091  f53b		       f8 f0 f0 f0*	      .byte.b	$F8,$F0,$F0,$F0,$E0,$C0,$C0,$80
   1092  f543
   1093  f543							;---Color Data from PlayerPal 2600---
   1094  f543				   GM_PLAYER_COLOR_IDLE
   1095  f543		       00		      .byte.b	#0
   1096  f544		       70		      .byte.b	#$70	;
   1097  f545		       70		      .byte.b	#$70	;
   1098  f546		       70		      .byte.b	#$70	;
   1099  f547		       84		      .byte.b	#$84	;
   1100  f548		       84		      .byte.b	#$84	;
   1101  f549		       f4		      .byte.b	#$F4	;
   1102  f54a		       00		      .byte.b	#$00	;
   1103  f54b		       00		      .byte.b	#$00	;
   1104  f54c				   GM_PLAYER_COLOR_WALK1
   1105  f54c		       00		      .byte.b	#0
   1106  f54d		       70		      .byte.b	#$70	;
   1107  f54e		       70		      .byte.b	#$70	;
   1108  f54f		       70		      .byte.b	#$70	;
   1109  f550		       84		      .byte.b	#$84	;
   1110  f551		       84		      .byte.b	#$84	;
   1111  f552		       f4		      .byte.b	#$F4	;
   1112  f553		       00		      .byte.b	#$00	;
   1113  f554		       00		      .byte.b	#$00	;
   1114  f555				   GM_PLAYER_COLOR_WALK2
   1115  f555		       00		      .byte.b	#0
   1116  f556		       70		      .byte.b	#$70	;
   1117  f557		       70		      .byte.b	#$70	;
   1118  f558		       70		      .byte.b	#$70	;
   1119  f559		       84		      .byte.b	#$84	;
   1120  f55a		       84		      .byte.b	#$84	;
   1121  f55b		       f4		      .byte.b	#$F4	;
   1122  f55c		       00		      .byte.b	#$00	;
   1123  f55d		       00		      .byte.b	#$00	;
   1124  f55e				   GM_PLAYER_BW_IDLE
   1125  f55e		       00		      .byte.b	#0
   1126  f55f		       00		      .byte.b	#$0	;
   1127  f560		       00		      .byte.b	#$0	;
   1128  f561		       00		      .byte.b	#$0	;
   1129  f562		       02		      .byte.b	#$02	;
   1130  f563		       02		      .byte.b	#$02	;
   1131  f564		       04		      .byte.b	#$04	;
   1132  f565		       00		      .byte.b	#$00	;
   1133  f566		       00		      .byte.b	#$00	;
   1134  f567				   GM_PLAYER_BW_WALK1
   1135  f567		       00		      .byte.b	#0
   1136  f568		       00		      .byte.b	#$0	;
   1137  f569		       00		      .byte.b	#$0	;
   1138  f56a		       00		      .byte.b	#$0	;
   1139  f56b		       02		      .byte.b	#$02	;
   1140  f56c		       02		      .byte.b	#$02	;
   1141  f56d		       04		      .byte.b	#$04	;
   1142  f56e		       00		      .byte.b	#$00	;
   1143  f56f		       00		      .byte.b	#$00	;
   1144  f570				   GM_PLAYER_BW_WALK2
   1145  f570		       00		      .byte.b	#0
   1146  f571		       00		      .byte.b	#$0	;
   1147  f572		       00		      .byte.b	#$0	;
   1148  f573		       00		      .byte.b	#$0	;
   1149  f574		       02		      .byte.b	#$02	;
   1150  f575		       02		      .byte.b	#$02	;
   1151  f576		       04		      .byte.b	#$04	;
   1152  f577		       00		      .byte.b	#$00	;
   1153  f578		       00		      .byte.b	#$00	;
   1154  f579				   GM_BUG_COLOR
   1155  f579		       00		      .byte.b	#0
   1156  f57a		       00		      .byte.b	#$00	;
   1157  f57b		       00		      .byte.b	#$00	;
   1158  f57c		       f0		      .byte.b	#$F0	;
   1159  f57d		       f0		      .byte.b	#$F0	;
   1160  f57e		       f2		      .byte.b	#$F2	;
   1161  f57f		       f0		      .byte.b	#$F0	;
   1162  f580		       00		      .byte.b	#$00	;
   1163  f581		       00		      .byte.b	#$00	;
   1164  f582				   GM_BUG_BW
   1165  f582		       00		      .byte.b	#0
   1166  f583		       00		      .byte.b	#$00	;
   1167  f584		       00		      .byte.b	#$00	;
   1168  f585		       00		      .byte.b	#$00	;
   1169  f586		       00		      .byte.b	#$00	;
   1170  f587		       02		      .byte.b	#$02	;
   1171  f588		       00		      .byte.b	#$00	;
   1172  f589		       00		      .byte.b	#$00	;
   1173  f58a		       00		      .byte.b	#$00	;
   1174  f58b				   GM_BIRD_COLOR
   1175  f58b		       00		      .byte.b	#0
   1176  f58c		       1c		      .byte.b	#$1C	;
   1177  f58d		       0e		      .byte.b	#$0E	;
   1178  f58e		       0a		      .byte.b	#$0A	;
   1179  f58f		       0e		      .byte.b	#$0E	;
   1180  f590		       0e		      .byte.b	#$0E	;
   1181  f591				   GM_BIRD_BW
   1182  f591		       00		      .byte.b	#0
   1183  f592		       0c		      .byte.b	#$0C	;
   1184  f593		       0e		      .byte.b	#$0E	;
   1185  f594		       0a		      .byte.b	#$0A	;
   1186  f595		       0e		      .byte.b	#$0E	;
   1187  f596		       0e		      .byte.b	#$0E	;
   1188  f597
   1189  f597
   1190  f597							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1191  f597							;; Fill the 4K ROM
   1192  f597							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1193  fffc					      org	$FFFC	; insert two pointers at the end of ROM
   1194  fffc		       00 f0		      .word.w	Reset	; reset vector
   1195  fffe		       00 f0		      .word.w	Reset	; interrupt Vector
   1196  10000
   1197  10000
