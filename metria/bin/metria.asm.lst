------- FILE metria.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE metria.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE metria.asm
      5  0000 ????
      6  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  0000 ????						;; Macros
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????
     10  0000 ????				      MAC	wait_x_wsync
     11  0000 ????			   .WaitX
     12  0000 ????				      sta	WSYNC	; Wait for horizontal blank
     13  0000 ????				      dex		; X--
     14  0000 ????				      bne	.WaitX	; Loop until X = 0
     15  0000 ????				      ENDM
     16  0000 ????
     17  0000 ????				      MAC	fire_missile
     18  0000 ????				      lda	GM_MissileActive
     19  0000 ????				      bne	.NoMissile
     20  0000 ????				      lda	GM_PlayerXPos
     21  0000 ????				      clc
     22  0000 ????				      adc	#5
     23  0000 ????				      sta	GM_MissileXPos
     24  0000 ????				      lda	#70
     25  0000 ????				      sta	GM_MissileYPos
     26  0000 ????				      lda	#2
     27  0000 ????				      sta	GM_MissileActive
     28  0000 ????				      ldy	#sfxCOLLIDE
     29  0000 ????				      jsr	SFX_TRIGGER
     30  0000 ????			   .NoMissile
     31  0000 ????				      ENDM
     32  0000 ????
     33  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     34  0000 ????						;; Contants
     35  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     36  0000 ????
     37  0000 ????	       00 08	   BW_MASK    =	%00001000	; bitmask for black & white switch
     38  0000 ????	       00 01	   RESET_MASK =	%00000001	; bitmask for reset switch
     39  0000 ????	       00 80	   LEFT_BTN_MASK =	%10000000	; bitmask for left joystick button
     40  0000 ????	       00 2b	   TIMER_VBLANK =	43	; value for TIM64T vertical blank timer
     41  0000 ????	       00 23	   TIMER_OVERSCAN =	35	; value for TIM64T overscan timer
     42  0000 ????
     43  0000 ????	       00 72	   RANDOM_SEED =	$72
     44  0000 ????
     45  0000 ????	       00 38	   LOGO_BK_COLOR =	$38	; logo mode background color - color mode
     46  0000 ????	       00 06	   LOGO_BK_BW =	$06	; logo mode background color - black & white
     47  0000 ????	       00 04	   LOGO_FADE_INIT_STATE =	4	; initial value for the logo fade in state
     48  0000 ????	       00 28	   LOGO_FADE_INIT_DELAY =	40	; initial delay value before logo fades in
     49  0000 ????	       00 14	   LOGO_FADE_DELAY =	20	; delay for each fade step - 20 frames/step
     50  0000 ????
     51  0000 ????	       00 c8	   GAME_BK_COLOR =	$C8	; game background color - color mode
     52  0000 ????	       00 08	   GAME_BK_BW =	$08	; game background color - black & white
     53  0000 ????	       00 c0	   GAME_PF_COLOR =	$C0	; game playfield color - color mode
     54  0000 ????	       00 04	   GAME_PF_BW =	$04	; game playfield color - black & white
     55  0000 ????	       00 78	   GAME_SKY_COLOR =	$78	; game sky color - color mode
     56  0000 ????	       00 04	   GAME_SKY_BW =	$04	; game sky color - black & white
     57  0000 ????
     58  0000 ????	       00 00	   GAME_SCOREBACK_COLOR =	$0	; game score board color - all modes
     59  0000 ????	       00 20	   GAME_GAMEOVER_COLOR =	$20	; game over color - color mode
     60  0000 ????	       00 02	   GAME_GAMEOVER_BW =	$02	; game over color - black & white
     61  0000 ????
     62  0000 ????	       00 09	   GAME_PLAYER_HEIGHT =	9	; player sprite height
     63  0000 ????	       00 09	   GAME_BUG_HEIGHT =	9	; bug sprite height
     64  0000 ????
     65  0000 ????	       00 00	   GAME_PLAYER_MIN_X =	0	; player minimun x
     66  0000 ????	       00 92	   GAME_PLAYER_MAX_X =	146	; player minimun x
     67  0000 ????	       00 02	   GAME_PLAYER_MIN_Y =	2	; player minimun x
     68  0000 ????	       00 3e	   GAME_PLAYER_MAX_Y =	62	; player minimun x
     69  0000 ????	       00 0a	   GAME_PLAYER_ANIM_SPEED =	10
     70  0000 ????
     71  0000 ????	       00 06	   GAME_BIRD_HEIGHT =	6	; bird sprite height
     72  0000 ????	       00 0a	   GAME_BIRD_TICK_LEN =	10	; bird anim speed
     73  0000 ????	       00 0c	   GAME_BIRD_YPOS_TBL_LEN =	12	; bird anim table length
     74  0000 ????
     75  0000 ????	       00 05	   GAME_DIGIT_HEIGHT =	5	; digit height
     76  0000 ????
     77  0000 ????	       00 60	   GAME_MAX_TIME =	%01100000
     78  0000 ????
     79  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  0000 ????						;; RAM variables located outside ROM at address $0080
     81  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  0000 ????
     83 U00b7 ????				      seg.u	variables
     84 U0080					      org	$80	; RAM address memory start
     85 U0080
     86 U0080		       00	   LM_LogoFadeState ds	1	; current logo fade state
     87 U0081		       00	   LM_LogoFadeDelay ds	1	; current logo fade delay
     88 U0082
     89 U0082		       00	   GM_BackgroundColor ds	1
     90 U0083		       00	   GM_TreeColor ds	1
     91 U0084		       00	   GM_SkyColor ds	1
     92 U0085
     93 U0085		       00 00	   GM_PlayerPtr ds	2
     94 U0087		       00 00	   GM_PlayerColorPtr ds	2
     95 U0089		       00	   GM_PlayerXPos ds	1
     96 U008a		       00	   GM_PlayerYPos ds	1
     97 U008b		       00	   GM_PlayerAnimOn ds	1
     98 U008c		       00	   GM_PlayerAnimFrame ds	1
     99 U008d		       00	   GM_PlayerAnimTicks ds	1
    100 U008e
    101 U008e		       00 00	   GM_BirdPtr ds	2
    102 U0090		       00 00	   GM_BirdColorPtr ds	2
    103 U0092		       00	   GM_BirdYPos ds	1
    104 U0093		       00	   GM_BirdReflection ds	1
    105 U0094
    106 U0094		       00	   GM_BirdTick ds	1
    107 U0095		       00	   GM_BirdYPosIdx ds	1
    108 U0096
    109 U0096		       00	   GM_MissileXPos ds	1
    110 U0097		       00	   GM_MissileYPos ds	1
    111 U0098		       00	   GM_MissileActive ds	1
    112 U0099
    113 U0099		       00 00	   GM_BugColorPtr ds	2
    114 U009b		       00	   GM_BugXPos ds	1
    115 U009c		       00	   GM_BugYPos ds	1
    116 U009d		       00	   GM_PlayfieldIdx ds	1
    117 U009e
    118 U009e		       00	   PFCounter  ds	1
    119 U009f		       00	   Random     ds	1
    120 U00a0
    121 U00a0		       00	   GameOver   ds	1
    122 U00a1		       00	   Score      ds	1	; stored as BCD
    123 U00a2		       00	   Timer      ds	1	; stored as BCD
    124 U00a3		       00	   TimerTick  ds	1
    125 U00a4		       00 00	   OnesDigitOffset ds	2
    126 U00a6		       00 00	   TensDigitOffset ds	2
    127 U00a8		       00	   Temp       ds	1
    128 U00a9		       00 00 00 00*ScoreSprite ds	6
    129 U00af		       00 00 00 00*TimerSprite ds	6
    130 U00b5
    131 U00b5		       00	   SFX_LEFT   ds	1
    132 U00b6		       00	   SFX_RIGHT  ds	1
    133 U00b7
    134 U00b7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    135 U00b7							;; Program start - Located at top of ROM at address $F000
    136 U00b7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    137 U00b7
    138  10000 ????				       seg	code
    139  f000					      org	$F000	; start address of ROM
    140  f000
    141  f000				   Reset
      0  f000					      CLEAN_START		; set machine to known state on startup
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
    143  f00a
    144  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    145  f00a							;; Init variables
    146  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    147  f00a
    148  f00a		       a9 72		      lda	#RANDOM_SEED
    149  f00c		       85 9f		      sta	Random
    150  f00e
    151  f00e		       a9 04		      lda	#LOGO_FADE_INIT_STATE
    152  f010		       85 80		      sta	LM_LogoFadeState	; initialize logo fade state
    153  f012		       a9 28		      lda	#LOGO_FADE_INIT_DELAY
    154  f014		       85 81		      sta	LM_LogoFadeDelay	; initialize logo fade delay
    155  f016
      0  f016					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f016				   .POINTER   SET	GM_PlayerPtr
      2  f016				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f016
      4  f016		       a9 8f		      LDA	#<.ADDRESS
      5  f018		       85 85		      STA	.POINTER
      6  f01a		       a9 f6		      LDA	#>.ADDRESS
      7  f01c		       85 86		      STA	.POINTER+1
      8  f01e
      0  f01e					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f01e				   .POINTER   SET	GM_PlayerColorPtr
      2  f01e				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f01e
      4  f01e		       a9 ee		      LDA	#<.ADDRESS
      5  f020		       85 87		      STA	.POINTER
      6  f022		       a9 f6		      LDA	#>.ADDRESS
      7  f024		       85 88		      STA	.POINTER+1
      8  f026
    158  f026
      0  f026					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f026				   .POINTER   SET	GM_BugColorPtr
      2  f026				   .ADDRESS   SET	GM_BUG_COLOR
      3  f026
      4  f026		       a9 24		      LDA	#<.ADDRESS
      5  f028		       85 99		      STA	.POINTER
      6  f02a		       a9 f7		      LDA	#>.ADDRESS
      7  f02c		       85 9a		      STA	.POINTER+1
      8  f02e
    160  f02e
      0  f02e					      SET_POINTER	GM_BirdPtr, GM_BIRD_1
      1  f02e				   .POINTER   SET	GM_BirdPtr
      2  f02e				   .ADDRESS   SET	GM_BIRD_1
      3  f02e
      4  f02e		       a9 ce		      LDA	#<.ADDRESS
      5  f030		       85 8e		      STA	.POINTER
      6  f032		       a9 f6		      LDA	#>.ADDRESS
      7  f034		       85 8f		      STA	.POINTER+1
      8  f036
    162  f036
    163  f036		       a9 3e		      lda	#62
    164  f038		       85 89		      sta	GM_PlayerXPos
    165  f03a		       a9 15		      lda	#21
    166  f03c		       85 8a		      sta	GM_PlayerYPos
    167  f03e
    168  f03e		       a9 00		      lda	#0
    169  f040		       85 92		      sta	GM_BirdYPos
    170  f042		       a9 00		      lda	#0
    171  f044		       85 93		      sta	GM_BirdReflection
    172  f046		       85 98		      sta	GM_MissileActive
    173  f048		       a9 0a		      lda	#GAME_BIRD_TICK_LEN
    174  f04a		       85 94		      sta	GM_BirdTick
    175  f04c
    176  f04c		       a9 01		      lda	#1
    177  f04e		       85 a3		      sta	TimerTick
    178  f050		       a9 60		      lda	#GAME_MAX_TIME
    179  f052		       85 a2		      sta	Timer
    180  f054
    181  f054		       a9 01		      lda	#1
    182  f056		       85 a0		      sta	GameOver
    183  f058
    184  f058		       a9 02		      lda	#2
    185  f05a		       85 01		      sta	VBLANK	; turn on VBLANK
    186  f05c
    187  f05c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    188  f05c							;; LOGO MODE - LM
    189  f05c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    190  f05c				   LM_NextFrame
      0  f05c					      VERTICAL_SYNC		; vertical sync - 3 scanlines
      1  f05c		       a9 0e		      lda	#%1110
      2  f05e		       85 02	   .VSLP1     sta	WSYNC
      3  f060		       85 00		      sta	VSYNC
      4  f062		       4a		      lsr
      5  f063		       d0 f9		      bne	.VSLP1
    192  f065
    193  f065							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    194  f065							;; Vertical Blank - 37 scanlines - 2812 mc
    195  f065							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    196  f065		       a9 2b		      lda	#TIMER_VBLANK
    197  f067		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    198  f06a
    199  f06a				   .LM_Fade		; handles logo fade in
    200  f06a		       a5 80		      lda	LM_LogoFadeState
    201  f06c		       c9 00		      cmp	#0
    202  f06e		       f0 13		      beq	.LM_FadeDone	; if fade in is complete then jump out
    203  f070		       c6 81		      dec	LM_LogoFadeDelay	; dec fade delay
    204  f072		       d0 0f		      bne	.LM_FadeDone	; if still waiting for delay then jump out
    205  f074		       c6 80		      dec	LM_LogoFadeState	; dec fade in state
    206  f076		       a9 14		      lda	#LOGO_FADE_DELAY
    207  f078		       85 81		      sta	LM_LogoFadeDelay	; restore fade in delay
    208  f07a
    209  f07a		       a5 80		      lda	LM_LogoFadeState
    210  f07c		       d0 05		      bne	.LM_FadeDone
    211  f07e		       a0 20		      ldy	#sfxPING
    212  f080		       20 a4 f5 	      jsr	SFX_TRIGGER
    213  f083				   .LM_FadeDone
    214  f083
    215  f083				   .LM_SetColor 		; set correct colors
    216  f083		       a4 80		      ldy	LM_LogoFadeState	; set Y = index of logo color
    217  f085		       ad 82 02 	      lda	SWCHB	; load console switches
    218  f088		       29 08		      and	#BW_MASK	; check if black & white
    219  f08a		       f0 0c		      beq	.LM_BWMode
    220  f08c				   .LM_ColorMode
    221  f08c		       a9 38		      lda	#LOGO_BK_COLOR
    222  f08e		       85 09		      sta	COLUBK	; set background color
    223  f090		       b9 35 f6 	      lda	LM_LogoFade_Color,Y
    224  f093		       85 08		      sta	COLUPF	; set logo color
    225  f095		       4c a1 f0 	      jmp	.LM_SetColorDone
    226  f098				   .LM_BWMode
    227  f098		       a9 06		      lda	#LOGO_BK_BW
    228  f09a		       85 09		      sta	COLUBK	; set background color
    229  f09c		       b9 3a f6 	      lda	LM_LogoFade_BW,Y
    230  f09f		       85 08		      sta	COLUPF	; set logo color
    231  f0a1				   .LM_SetColorDone
    232  f0a1
    233  f0a1		       e6 9f		      inc	Random
    234  f0a3
    235  f0a3				   .LM_VBLankWait
    236  f0a3		       ae 84 02 	      ldx	INTIM
    237  f0a6		       d0 fb		      bne	.LM_VBLankWait	; wait until timer is done
    238  f0a8		       a9 00		      lda	#0
    239  f0aa		       85 02		      sta	WSYNC	; get a fresh scanline
    240  f0ac							; -------------------------
    241  f0ac		       85 01		      sta	VBLANK	; turn off VBLANK
    242  f0ae
    243  f0ae							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    244  f0ae							;; Playfield - 192 scanlines - 14592 mc
    245  f0ae							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    246  f0ae
    247  f0ae				   .LM_Top		; waste 68 scanlines
    248  f0ae		       a2 44		      ldx	#68
      0  f0b0					      WAIT_X_WSYNC
      1  f0b0				   .WaitX
      2  f0b0		       85 02		      sta	WSYNC
      3  f0b2		       ca		      dex
      4  f0b3		       d0 fb		      bne	.WaitX
    250  f0b5							; -------------------------
    251  f0b5
    252  f0b5				   .LM_Middle		; logo is a total of 36 scanlines
    253  f0b5		       a0 00		      ldy	#0	; Y = index to playfield bytes
    254  f0b7				   .LM_LoopY
    255  f0b7		       a2 04		      ldx	#4	; draw every logo line 4 scanlines
    256  f0b9				   .LM_LoopX
    257  f0b9		       85 02		      sta	WSYNC	; get fresh scanline
    258  f0bb							; -------------------------
    259  f0bb		       b9 ff f5 	      lda	LM_LogoPF0,Y
    260  f0be		       85 0d		      sta	PF0	; set first part of left playfield
    261  f0c0		       b9 11 f6 	      lda	LM_LogoPF1,Y
    262  f0c3		       85 0e		      sta	PF1	; set second part of left playfield
    263  f0c5		       b9 23 f6 	      lda	LM_LogoPF2,Y
    264  f0c8		       85 0f		      sta	PF2	; set third part of left playfield
    265  f0ca		       c8		      iny		; inc Y to get the right playfield bytes
    266  f0cb		       b9 ff f5 	      lda	LM_LogoPF0,Y
    267  f0ce		       85 0d		      sta	PF0	; set first part of right playfield
    268  f0d0		       b9 11 f6 	      lda	LM_LogoPF1,Y
    269  f0d3		       85 0e		      sta	PF1	; set second part of right playfield
    270  f0d5		       b9 23 f6 	      lda	LM_LogoPF2,Y
    271  f0d8		       88		      dey		; dec Y to bea able to repeat left/right for 4 lines
    272  f0d9		       ea		      nop		; just for timing
    273  f0da		       85 0f		      sta	PF2	; set third part of right playfield
    274  f0dc
    275  f0dc		       ca		      dex
    276  f0dd		       d0 da		      bne	.LM_LoopX	; loop while we havn't drawn 4 scanlines
    277  f0df		       c8		      iny
    278  f0e0		       c8		      iny		; inc y by 2 to get to the next playfield byte pairs
    279  f0e1		       c0 12		      cpy	#18	; all bytes drawn?
    280  f0e3		       d0 d2		      bne	.LM_LoopY	; loop until all logo bytes are drawn
    281  f0e5
    282  f0e5				   .LM_TurnOffLogo		; use 1 scanline to turn off logo
    283  f0e5		       a5 02		      lda	WSYNC	; get a fresh scanline
    284  f0e7							; -------------------------
    285  f0e7		       a9 00		      lda	#0
    286  f0e9		       85 0d		      sta	PF0	; reset playfield graphics
    287  f0eb		       85 0e		      sta	PF1
    288  f0ed		       85 0f		      sta	PF2
    289  f0ef
    290  f0ef				   .LM_Bottom
    291  f0ef		       a2 57		      ldx	#87	; waste remaining 87 scanlines
      0  f0f1					      WAIT_X_WSYNC
      1  f0f1				   .WaitX
      2  f0f1		       85 02		      sta	WSYNC
      3  f0f3		       ca		      dex
      4  f0f4		       d0 fb		      bne	.WaitX
    293  f0f6							; -------------------------
    294  f0f6
    295  f0f6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    296  f0f6							;; Overscan - 30 scanlines - 2280 mc
    297  f0f6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    298  f0f6		       a9 02		      lda	#2	; A = 2 = #%00000010
    299  f0f8		       85 01		      sta	VBLANK	; Turn on VBLANK
    300  f0fa		       a9 23		      lda	#TIMER_OVERSCAN
    301  f0fc		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    302  f0ff
    303  f0ff				   .LM_CheckReset
    304  f0ff		       ad 82 02 	      lda	SWCHB	; load console switches
    305  f102		       29 01		      and	#RESET_MASK
    306  f104		       d0 03		      bne	.LM_NoReset
    307  f106		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    308  f109				   .LM_NoReset
    309  f109
    310  f109				   .LM_CheckLeftButton
    311  f109		       a5 0c		      lda	INPT4	; load left joystick button
    312  f10b		       29 80		      and	#LEFT_BTN_MASK
    313  f10d		       d0 08		      bne	.LM_NoLeftButton
    314  f10f		       85 02		      sta	WSYNC
    315  f111		       20 6d f4 	      jsr	PlaceBug
    316  f114		       4c 24 f1 	      jmp	GM_NextFrame	; start game if button is pressed
    317  f117				   .LM_NoLeftButton
    318  f117
    319  f117		       20 c6 f5 	      jsr	SFX_UPDATE	; update sound effects
    320  f11a
    321  f11a				   .LM_OverscanWait
    322  f11a		       ae 84 02 	      ldx	INTIM
    323  f11d		       d0 fb		      bne	.LM_OverscanWait	; wait until timer is done
    324  f11f		       85 02		      sta	WSYNC
    325  f121							; -------------------------
    326  f121		       4c 5c f0 	      jmp	LM_NextFrame
    327  f124
    328  f124
    329  f124							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    330  f124							;; GAME MODE - GM
    331  f124							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    332  f124				   GM_NextFrame
      0  f124					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f124		       a9 0e		      lda	#%1110
      2  f126		       85 02	   .VSLP1     sta	WSYNC
      3  f128		       85 00		      sta	VSYNC
      4  f12a		       4a		      lsr
      5  f12b		       d0 f9		      bne	.VSLP1
    334  f12d
    335  f12d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    336  f12d							;; Vertical Blank - 37 scanlines - 2812 mc
    337  f12d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    338  f12d		       a9 2b		      lda	#TIMER_VBLANK
    339  f12f		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    340  f132
    341  f132				   .GM_CheckCollisions
    342  f132
    343  f132				   .GM_CheckColP0ToP1
    344  f132		       a5 07		      lda	CXPPMM
    345  f134		       29 80		      and	#%10000000
    346  f136		       f0 11		      beq	.GM_CheckColP0ToP1Done
    347  f138		       f8		      sed
    348  f139		       a5 a1		      lda	Score
    349  f13b		       18		      clc
    350  f13c		       69 01		      adc	#1
    351  f13e		       85 a1		      sta	Score
    352  f140		       d8		      cld
    353  f141		       a0 10		      ldy	#sfxCOLLECT
    354  f143		       20 a4 f5 	      jsr	SFX_TRIGGER
    355  f146		       20 6d f4 	      jsr	PlaceBug
    356  f149				   .GM_CheckColP0ToP1Done
    357  f149
    358  f149				   .GM_CheckColM1ToP0
    359  f149		       a5 01		      lda	CXM1P
    360  f14b		       29 80		      and	#%10000000
    361  f14d		       f0 18		      beq	.GM_CheckColM1ToP0Done
    362  f14f
    363  f14f
    364  f14f		       f8		      sed
    365  f150		       a5 a1		      lda	Score
    366  f152		       38		      sec
    367  f153		       e9 05		      sbc	#5
    368  f155		       10 04		      bpl	.GM_ScoreSubOk
    369  f157		       a9 00		      lda	#0
    370  f159		       85 a1		      sta	Score
    371  f15b				   .GM_ScoreSubOk
    372  f15b		       85 a1		      sta	Score
    373  f15d		       d8		      cld
    374  f15e
    375  f15e		       a9 00		      lda	#0
    376  f160		       85 98		      sta	GM_MissileActive
    377  f162		       a0 30		      ldy	#sfxGAMEOVER
    378  f164		       20 a4 f5 	      jsr	SFX_TRIGGER
    379  f167				   .GM_CheckColM1ToP0Done
    380  f167
    381  f167
    382  f167				   .GM_CheckColM1ToPF
    383  f167		       a5 05		      lda	CXM1FB
    384  f169		       29 80		      and	#%10000000
    385  f16b		       f0 04		      beq	.GM_CheckColM1ToPFDone
    386  f16d		       a9 00		      lda	#0
    387  f16f		       85 98		      sta	GM_MissileActive
    388  f171				   .GM_CheckColM1ToPFDone
    389  f171
    390  f171
    391  f171				   .GM_CheckCollisionsDone
    392  f171		       85 2c		      sta	CXCLR
    393  f173
    394  f173		       a5 89		      lda	GM_PlayerXPos	; load player x pos
    395  f175		       a0 00		      ldy	#0	; set Y = 0 for player 0
    396  f177		       20 90 f4 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    397  f17a
    398  f17a		       a5 9b		      lda	GM_BugXPos	; load bug x pos
    399  f17c		       a0 01		      ldy	#1	; set Y = 1 for player 1
    400  f17e		       20 90 f4 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    401  f181
    402  f181		       a5 96		      lda	GM_MissileXPos	; load bug x pos
    403  f183		       a0 03		      ldy	#3	; set Y = 2 for missile 0
    404  f185		       20 90 f4 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    405  f188
    406  f188		       85 02		      sta	WSYNC	; geta fresh scanline
    407  f18a							; -------------------------
    408  f18a		       85 2a		      sta	HMOVE	; apply positions offset
    409  f18c
    410  f18c				   .GM_HandleTimer
    411  f18c		       a5 a0		      lda	GameOver
    412  f18e		       d0 1e		      bne	.GM_HandleTimerDone
    413  f190
    414  f190		       c6 a3		      dec	TimerTick
    415  f192		       d0 1a		      bne	.GM_HandleTimerDone
    416  f194
    417  f194		       a9 3c		      lda	#60
    418  f196		       85 a3		      sta	TimerTick
    419  f198
    420  f198		       f8		      sed
    421  f199		       a5 a2		      lda	Timer
    422  f19b		       38		      sec
    423  f19c		       e9 01		      sbc	#1
    424  f19e		       85 a2		      sta	Timer
    425  f1a0		       d8		      cld
    426  f1a1
    427  f1a1		       a5 a2		      lda	Timer
    428  f1a3		       d0 09		      bne	.GM_HandleTimerDone
    429  f1a5		       a9 01		      lda	#1
    430  f1a7		       85 a0		      sta	GameOver
    431  f1a9		       a0 49		      ldy	#sfxTEST
    432  f1ab		       20 a4 f5 	      jsr	SFX_TRIGGER
    433  f1ae
    434  f1ae				   .GM_HandleTimerDone
    435  f1ae
    436  f1ae				   .GM_SetColor 		; set correct colors
    437  f1ae		       ad 82 02 	      lda	SWCHB
    438  f1b1		       25 08		      and	BW_MASK
    439  f1b3		       f0 36		      beq	.GM_BWMode
    440  f1b5				   .GM_ColorMode
    441  f1b5		       a9 78		      lda	#GAME_SKY_COLOR
    442  f1b7		       85 84		      sta	GM_SkyColor
    443  f1b9		       a9 c8		      lda	#GAME_BK_COLOR
    444  f1bb		       85 82		      sta	GM_BackgroundColor
    445  f1bd		       a9 c0		      lda	#GAME_PF_COLOR
    446  f1bf		       85 83		      sta	GM_TreeColor
      0  f1c1					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f1c1				   .POINTER   SET	GM_PlayerColorPtr
      2  f1c1				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f1c1
      4  f1c1		       a9 ee		      LDA	#<.ADDRESS
      5  f1c3		       85 87		      STA	.POINTER
      6  f1c5		       a9 f6		      LDA	#>.ADDRESS
      7  f1c7		       85 88		      STA	.POINTER+1
      8  f1c9
      0  f1c9					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f1c9				   .POINTER   SET	GM_BugColorPtr
      2  f1c9				   .ADDRESS   SET	GM_BUG_COLOR
      3  f1c9
      4  f1c9		       a9 24		      LDA	#<.ADDRESS
      5  f1cb		       85 99		      STA	.POINTER
      6  f1cd		       a9 f7		      LDA	#>.ADDRESS
      7  f1cf		       85 9a		      STA	.POINTER+1
      8  f1d1
      0  f1d1					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_COLOR
      1  f1d1				   .POINTER   SET	GM_BirdColorPtr
      2  f1d1				   .ADDRESS   SET	GM_BIRD_COLOR
      3  f1d1
      4  f1d1		       a9 36		      LDA	#<.ADDRESS
      5  f1d3		       85 90		      STA	.POINTER
      6  f1d5		       a9 f7		      LDA	#>.ADDRESS
      7  f1d7		       85 91		      STA	.POINTER+1
      8  f1d9
    450  f1d9
    451  f1d9				   .GM_SetCoreboardColorCM
    452  f1d9		       a5 a2		      lda	Timer
    453  f1db		       f0 07		      beq	.GM_GameOverCM
    454  f1dd		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    455  f1df		       85 09		      sta	COLUBK
    456  f1e1		       4c e8 f1 	      jmp	.GM_SetScoreboardColorCMDone
    457  f1e4				   .GM_GameOverCM
    458  f1e4		       a9 20		      lda	#GAME_GAMEOVER_COLOR
    459  f1e6		       85 09		      sta	COLUBK
    460  f1e8				   .GM_SetScoreboardColorCMDone
    461  f1e8
    462  f1e8		       4c 1e f2 	      jmp	.GM_SetColorDone
    463  f1eb				   .GM_BWMode
    464  f1eb		       a9 04		      lda	#GAME_SKY_BW
    465  f1ed		       85 84		      sta	GM_SkyColor
    466  f1ef		       a9 08		      lda	#GAME_BK_BW
    467  f1f1		       85 82		      sta	GM_BackgroundColor
    468  f1f3		       a9 04		      lda	#GAME_PF_BW
    469  f1f5		       85 83		      sta	GM_TreeColor
      0  f1f7					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_BW_IDLE
      1  f1f7				   .POINTER   SET	GM_PlayerColorPtr
      2  f1f7				   .ADDRESS   SET	GM_PLAYER_BW_IDLE
      3  f1f7
      4  f1f7		       a9 09		      LDA	#<.ADDRESS
      5  f1f9		       85 87		      STA	.POINTER
      6  f1fb		       a9 f7		      LDA	#>.ADDRESS
      7  f1fd		       85 88		      STA	.POINTER+1
      8  f1ff
      0  f1ff					      SET_POINTER	GM_BugColorPtr, GM_BUG_BW
      1  f1ff				   .POINTER   SET	GM_BugColorPtr
      2  f1ff				   .ADDRESS   SET	GM_BUG_BW
      3  f1ff
      4  f1ff		       a9 2d		      LDA	#<.ADDRESS
      5  f201		       85 99		      STA	.POINTER
      6  f203		       a9 f7		      LDA	#>.ADDRESS
      7  f205		       85 9a		      STA	.POINTER+1
      8  f207
      0  f207					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_BW
      1  f207				   .POINTER   SET	GM_BirdColorPtr
      2  f207				   .ADDRESS   SET	GM_BIRD_BW
      3  f207
      4  f207		       a9 3c		      LDA	#<.ADDRESS
      5  f209		       85 90		      STA	.POINTER
      6  f20b		       a9 f7		      LDA	#>.ADDRESS
      7  f20d		       85 91		      STA	.POINTER+1
      8  f20f
    473  f20f
    474  f20f				   .GM_SetCoreboardColorBW
    475  f20f		       a5 a2		      lda	Timer
    476  f211		       f0 07		      beq	.GM_GameOverBW
    477  f213		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    478  f215		       85 09		      sta	COLUBK
    479  f217		       4c 1e f2 	      jmp	.GM_SetScoreboardColorBWDone
    480  f21a				   .GM_GameOverBW
    481  f21a		       a9 02		      lda	#GAME_GAMEOVER_BW
    482  f21c		       85 09		      sta	COLUBK
    483  f21e				   .GM_SetScoreboardColorBWDone
    484  f21e
    485  f21e				   .GM_SetColorDone
    486  f21e
    487  f21e				   .GM_SetGraphics
    488  f21e		       ad 82 02 	      lda	SWCHB
    489  f221		       29 40		      and	#%01000000
    490  f223		       f0 26		      beq	.GM_SetDress
    491  f225				   .GM_SetPants
      0  f225					      SET_POINTER	GM_PlayerPtr, GM_PANTS_IDLE
      1  f225				   .POINTER   SET	GM_PlayerPtr
      2  f225				   .ADDRESS   SET	GM_PANTS_IDLE
      3  f225
      4  f225		       a9 aa		      LDA	#<.ADDRESS
      5  f227		       85 85		      STA	.POINTER
      6  f229		       a9 f6		      LDA	#>.ADDRESS
      7  f22b		       85 86		      STA	.POINTER+1
      8  f22d
    493  f22d		       a5 8b		      lda	GM_PlayerAnimOn
    494  f22f		       f0 40		      beq	.GM_SetGraphicsDone
    495  f231
    496  f231		       a5 8c		      lda	GM_PlayerAnimFrame
    497  f233		       d0 0b		      bne	.GM_PANTS2
      0  f235					      SET_POINTER	GM_PlayerPtr, GM_PANTS_WALK1
      1  f235				   .POINTER   SET	GM_PlayerPtr
      2  f235				   .ADDRESS   SET	GM_PANTS_WALK1
      3  f235
      4  f235		       a9 b3		      LDA	#<.ADDRESS
      5  f237		       85 85		      STA	.POINTER
      6  f239		       a9 f6		      LDA	#>.ADDRESS
      7  f23b		       85 86		      STA	.POINTER+1
      8  f23d
    499  f23d		       4c 71 f2 	      jmp	.GM_SetGraphicsDone
    500  f240				   .GM_PANTS2
      0  f240					      SET_POINTER	GM_PlayerPtr, GM_PANTS_WALK2
      1  f240				   .POINTER   SET	GM_PlayerPtr
      2  f240				   .ADDRESS   SET	GM_PANTS_WALK2
      3  f240
      4  f240		       a9 bc		      LDA	#<.ADDRESS
      5  f242		       85 85		      STA	.POINTER
      6  f244		       a9 f6		      LDA	#>.ADDRESS
      7  f246		       85 86		      STA	.POINTER+1
      8  f248
    502  f248
    503  f248		       4c 71 f2 	      jmp	.GM_SetGraphicsDone
    504  f24b				   .GM_SetDress
      0  f24b					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f24b				   .POINTER   SET	GM_PlayerPtr
      2  f24b				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f24b
      4  f24b		       a9 8f		      LDA	#<.ADDRESS
      5  f24d		       85 85		      STA	.POINTER
      6  f24f		       a9 f6		      LDA	#>.ADDRESS
      7  f251		       85 86		      STA	.POINTER+1
      8  f253
    506  f253		       a5 8b		      lda	GM_PlayerAnimOn
    507  f255		       f0 1a		      beq	.GM_SetGraphicsDone
    508  f257
    509  f257		       a5 8c		      lda	GM_PlayerAnimFrame
    510  f259		       d0 0b		      bne	.GM_DRESS2
      0  f25b					      SET_POINTER	GM_PlayerPtr, GM_DRESS_WALK1
      1  f25b				   .POINTER   SET	GM_PlayerPtr
      2  f25b				   .ADDRESS   SET	GM_DRESS_WALK1
      3  f25b
      4  f25b		       a9 98		      LDA	#<.ADDRESS
      5  f25d		       85 85		      STA	.POINTER
      6  f25f		       a9 f6		      LDA	#>.ADDRESS
      7  f261		       85 86		      STA	.POINTER+1
      8  f263
    512  f263		       4c 71 f2 	      jmp	.GM_SetGraphicsDone
    513  f266				   .GM_DRESS2
      0  f266					      SET_POINTER	GM_PlayerPtr, GM_DRESS_WALK2
      1  f266				   .POINTER   SET	GM_PlayerPtr
      2  f266				   .ADDRESS   SET	GM_DRESS_WALK2
      3  f266
      4  f266		       a9 a1		      LDA	#<.ADDRESS
      5  f268		       85 85		      STA	.POINTER
      6  f26a		       a9 f6		      LDA	#>.ADDRESS
      7  f26c		       85 86		      STA	.POINTER+1
      8  f26e
    515  f26e
    516  f26e		       4c 71 f2 	      jmp	.GM_SetGraphicsDone
    517  f271				   .GM_SetGraphicsDone
    518  f271
    519  f271				   .GM_PlayfieldInit
    520  f271		       a9 47		      lda	#71
    521  f273		       85 9e		      sta	PFCounter	; 144/2 scanelines
    522  f275		       20 a4 f4 	      jsr	PrepareScoreAndTimer
    523  f278
    524  f278				   .GM_VBLankWait
    525  f278		       ae 84 02 	      ldx	INTIM
    526  f27b		       d0 fb		      bne	.GM_VBLankWait	; wait until timer is done
    527  f27d		       a9 00		      lda	#0
    528  f27f		       85 02		      sta	WSYNC	; get a fresh scanline
    529  f281							; -------------------------
    530  f281		       85 01		      sta	VBLANK	; turn off VBLANK
    531  f283
    532  f283							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    533  f283							;; Score Board - 20 scanlines - 1520 mc
    534  f283							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    535  f283		       a9 0e		      lda	#$0E
    536  f285		       85 08		      sta	COLUPF
    537  f287
    538  f287		       a9 00		      lda	#0
    539  f289		       85 0d		      sta	PF0
    540  f28b		       85 0e		      sta	PF1
    541  f28d		       85 0f		      sta	PF2
    542  f28f		       a9 00		      lda	#00000000
    543  f291		       85 0a		      sta	CTRLPF	; disable playfield/scoreboard reflection
    544  f293
    545  f293		       a2 05		      ldx	#5
      0  f295					      WAIT_X_WSYNC
      1  f295				   .WaitX
      2  f295		       85 02		      sta	WSYNC
      3  f297		       ca		      dex
      4  f298		       d0 fb		      bne	.WaitX
    547  f29a							; -------------------------
    548  f29a
    549  f29a		       a0 05		      ldy	#5
    550  f29c				   .GM_ScoreboardLoop
    551  f29c
    552  f29c					      REPEAT	2
    553  f29c		       b9 a9 00 	      lda	ScoreSprite,Y
    554  f29f		       85 0e		      sta	PF1
    555  f2a1
    556  f2a1					      REPEAT	13
    557  f2a1		       ea		      nop
    556  f2a1					      REPEND
    557  f2a2		       ea		      nop
    556  f2a2					      REPEND
    557  f2a3		       ea		      nop
    556  f2a3					      REPEND
    557  f2a4		       ea		      nop
    556  f2a4					      REPEND
    557  f2a5		       ea		      nop
    556  f2a5					      REPEND
    557  f2a6		       ea		      nop
    556  f2a6					      REPEND
    557  f2a7		       ea		      nop
    556  f2a7					      REPEND
    557  f2a8		       ea		      nop
    556  f2a8					      REPEND
    557  f2a9		       ea		      nop
    556  f2a9					      REPEND
    557  f2aa		       ea		      nop
    556  f2aa					      REPEND
    557  f2ab		       ea		      nop
    556  f2ab					      REPEND
    557  f2ac		       ea		      nop
    556  f2ac					      REPEND
    557  f2ad		       ea		      nop
    558  f2ae					      REPEND
    559  f2ae
    560  f2ae		       b9 af 00 	      lda	TimerSprite,Y
    561  f2b1		       85 0e		      sta	PF1
    562  f2b3
    563  f2b3		       85 02		      sta	WSYNC
    564  f2b5							; -------------------------
    552  f2b5					      REPEND
    553  f2b5		       b9 a9 00 	      lda	ScoreSprite,Y
    554  f2b8		       85 0e		      sta	PF1
    555  f2ba
    556  f2ba					      REPEAT	13
    557  f2ba		       ea		      nop
    556  f2ba					      REPEND
    557  f2bb		       ea		      nop
    556  f2bb					      REPEND
    557  f2bc		       ea		      nop
    556  f2bc					      REPEND
    557  f2bd		       ea		      nop
    556  f2bd					      REPEND
    557  f2be		       ea		      nop
    556  f2be					      REPEND
    557  f2bf		       ea		      nop
    556  f2bf					      REPEND
    557  f2c0		       ea		      nop
    556  f2c0					      REPEND
    557  f2c1		       ea		      nop
    556  f2c1					      REPEND
    557  f2c2		       ea		      nop
    556  f2c2					      REPEND
    557  f2c3		       ea		      nop
    556  f2c3					      REPEND
    557  f2c4		       ea		      nop
    556  f2c4					      REPEND
    557  f2c5		       ea		      nop
    556  f2c5					      REPEND
    557  f2c6		       ea		      nop
    558  f2c7					      REPEND
    559  f2c7
    560  f2c7		       b9 af 00 	      lda	TimerSprite,Y
    561  f2ca		       85 0e		      sta	PF1
    562  f2cc
    563  f2cc		       85 02		      sta	WSYNC
    564  f2ce							; -------------------------
    565  f2ce					      REPEND
    566  f2ce
    567  f2ce		       88		      dey
    568  f2cf		       d0 cb		      bne	.GM_ScoreboardLoop
    569  f2d1
    570  f2d1		       a9 00		      lda	#0
    571  f2d3		       85 0e		      sta	PF1
    572  f2d5
    573  f2d5		       a2 05		      ldx	#5
      0  f2d7					      WAIT_X_WSYNC
      1  f2d7				   .WaitX
      2  f2d7		       85 02		      sta	WSYNC
      3  f2d9		       ca		      dex
      4  f2da		       d0 fb		      bne	.WaitX
    575  f2dc
    576  f2dc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    577  f2dc							;; Sky - 30 scanlines - 1520 mc
    578  f2dc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    579  f2dc		       a5 84		      lda	GM_SkyColor
    580  f2de		       85 09		      sta	COLUBK
    581  f2e0		       a2 0e		      ldx	#14
    582  f2e2		       a9 00		      lda	#0
    583  f2e4		       85 25		      sta	VDELP0	; clear vertical delay för player 0
    584  f2e6
    585  f2e6		       a5 93		      lda	GM_BirdReflection
    586  f2e8		       85 0b		      sta	REFP0
    587  f2ea
    588  f2ea				   .GM_SkyLoop
    589  f2ea
    590  f2ea				   .GM_DrawBird
    591  f2ea		       8a		      txa		; transfer X to A
    592  f2eb		       38		      sec		; make sure carry flag is set
    593  f2ec		       e5 92		      sbc	GM_BirdYPos	; subtract sprite Y coordinate
    594  f2ee		       c5 06		      cmp	GAME_BIRD_HEIGHT	; are we inside the sprite height bounds?
    595  f2f0		       90 02		      bcc	.GM_WriteBird	; if result < SpriteHeight, call subroutine
    596  f2f2		       a9 00		      lda	#0	; else, set index to 0
    597  f2f4				   .GM_WriteBird
    598  f2f4		       a8		      tay
    599  f2f5		       b1 8e		      lda	(GM_BirdPtr),Y	; load player bitmap slice of data
    600  f2f7		       85 02		      sta	WSYNC	; wait for next scanline
    601  f2f9							; -------------------------
    602  f2f9		       85 1b		      sta	GRP0	; set graphics for player 0 slice
    603  f2fb		       b1 90		      lda	(GM_BirdColorPtr),Y	; load player color from lookup table
    604  f2fd		       85 06		      sta	COLUP0	; set color for player 1 slice
    605  f2ff				   .GM_DrawBirdDone
    606  f2ff		       85 02		      sta	WSYNC	; wait for next scanline
    607  f301							; -------------------------
    608  f301		       ca		      dex
    609  f302		       d0 e6		      bne	.GM_SkyLoop
    610  f304
    611  f304
    612  f304							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    613  f304							;; Playfield - 152 scanlines - 11552 mc
    614  f304							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    615  f304
    616  f304		       a9 01		      lda	#1
    617  f306		       85 25		      sta	VDELP0	; set vertical delay för player 0
    618  f308		       a9 00		      lda	#0
    619  f30a		       85 0b		      sta	REFP0
    620  f30c		       85 02		      sta	WSYNC
    621  f30e		       a5 83		      lda	GM_TreeColor
    622  f310		       85 08		      sta	COLUPF
    623  f312		       a9 00		      lda	#$00	; load player color from lookup table
    624  f314		       85 07		      sta	COLUP1	; set color for player 1 slice
    625  f316		       a9 01		      lda	#%00000001
    626  f318		       85 0a		      sta	CTRLPF	; enable playfield reflection
    627  f31a		       85 02		      sta	WSYNC
    628  f31c		       a5 82		      lda	GM_BackgroundColor
    629  f31e		       85 09		      sta	COLUBK
    630  f320
    631  f320		       a2 47		      ldx	#71
    632  f322				   .GM_PlayfieldLoop
    633  f322							; ldx PFCounter	       ; A = current scanline in playfield
    634  f322
    635  f322				   .GM_DrawMissile
    636  f322		       8a		      txa
    637  f323		       a0 00		      ldy	#0	; start accumualtor with 0 (null position)
    638  f325		       c5 97		      cmp	GM_MissileYPos	; compare X/scanline with missile y-position
    639  f327		       d0 02		      bne	.GM_DrawMissileDone	; if is not equal, skip the draw of missile0
    640  f329		       a4 98		      ldy	GM_MissileActive	; and set ENABL second bit to enable missile
    641  f32b				   .GM_DrawMissileDone
    642  f32b		       84 1e		      sty	ENAM1	; store correct value in the TIA missile register
    643  f32d
    644  f32d
    645  f32d				   .GM_DrawPlayer
    646  f32d		       8a		      txa
    647  f32e		       38		      sec		; make sure carry flag is set
    648  f32f		       e5 8a		      sbc	GM_PlayerYPos	; subtract sprite Y coordinate
    649  f331		       c9 09		      cmp	#GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    650  f333		       90 02		      bcc	.GM_WritePlayer	; if result < height then A contains the index
    651  f335		       a9 00		      lda	#0	; else, set A to 0
    652  f337				   .GM_WritePlayer
    653  f337		       a8		      tay
    654  f338		       b1 85		      lda	(GM_PlayerPtr),Y	; load player bitmap slice of data
    655  f33a		       85 1b		      sta	GRP0	; set graphics for player 0 slice - delayed
    656  f33c		       b1 87		      lda	(GM_PlayerColorPtr),Y	; load player color from lookup table
    657  f33e		       85 a8		      sta	Temp
    658  f340				   .GM_DrawPlayerDone
    659  f340
    660  f340				   .GM_DrawBug
    661  f340		       8a		      txa		; transfer X to A
    662  f341		       38		      sec		; make sure carry flag is set
    663  f342		       e5 9c		      sbc	GM_BugYPos	; subtract sprite Y coordinate
    664  f344		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    665  f346		       90 02		      bcc	.GM_WriteBug	; if result < SpriteHeight, call subroutine
    666  f348		       a9 00		      lda	#0	; else, set index to 0
    667  f34a				   .GM_WriteBug
    668  f34a		       a8		      tay
    669  f34b		       b9 c5 f6 	      lda	GM_BUG,Y	; load player bitmap slice of data
    670  f34e		       85 02		      sta	WSYNC	; wait for next scanline
    671  f350							; -------------------------
    672  f350		       85 1c		      sta	GRP1	; set graphics for player 1 + 0 slice
    673  f352		       a5 a8		      lda	Temp
    674  f354		       85 06		      sta	COLUP0	; set color for player 0 slice
    675  f356				   .GM_DrawBugDone
    676  f356
    677  f356				   .GM_DrawTree
    678  f356		       8a		      txa		; A = current scanline in playfield
    679  f357		       38		      sec		; make sure carry flag is set
    680  f358		       e9 1c		      sbc	#28	; subtract sprite Y coordinate
    681  f35a		       c9 14		      cmp	#20	; are we inside the sprite height bounds?
    682  f35c		       90 02		      bcc	.GM_WriteTree	; if result < height then A contains the index
    683  f35e		       a9 00		      lda	#0	; else, set A to 0
    684  f360				   .GM_WriteTree
    685  f360		       a8		      tay
    686  f361		       b9 da f6 	      lda	GM_TREE,y
    687  f364		       85 0f		      sta	PF2
    688  f366				   .GM_DrawTreeDone
    689  f366
    690  f366		       85 02		      sta	WSYNC
    691  f368							; -------------------------
    692  f368
    693  f368		       ca		      dex
    694  f369		       d0 b7		      bne	.GM_PlayfieldLoop	; repeat next scanline until finished
    695  f36b
    696  f36b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    697  f36b							;; Overscan - 30 scanlines - 2280 mc
    698  f36b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    699  f36b		       a9 02		      lda	#2	; A = 2 = #%00000010
    700  f36d		       85 01		      sta	VBLANK	; Turn on VBLANK
    701  f36f		       a9 23		      lda	#TIMER_OVERSCAN
    702  f371		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    703  f374
    704  f374				   .GM_CheckReset
    705  f374		       ad 82 02 	      lda	SWCHB	; load console switches
    706  f377		       29 01		      and	#RESET_MASK
    707  f379		       d0 03		      bne	.GM_NoReset
    708  f37b		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    709  f37e				   .GM_NoReset
    710  f37e
    711  f37e		       20 c6 f5 	      jsr	SFX_UPDATE
    712  f381
    713  f381		       a5 a0		      lda	GameOver
    714  f383		       f0 07		      beq	.GM_NotGameOver
    715  f385		       a5 a2		      lda	Timer
    716  f387		       d0 03		      bne	.GM_NotGameOver
    717  f389		       4c 63 f4 	      jmp	.GM_Continue
    718  f38c				   .GM_NotGameOver
    719  f38c
    720  f38c		       c6 94		      dec	GM_BirdTick
    721  f38e		       d0 45		      bne	.GM_BirdAnimDone
    722  f390		       a9 0a		      lda	#GAME_BIRD_TICK_LEN
    723  f392		       85 94		      sta	GM_BirdTick
    724  f394		       e6 95		      inc	GM_BirdYPosIdx
    725  f396		       a5 95		      lda	GM_BirdYPosIdx
    726  f398		       c9 0c		      cmp	#GAME_BIRD_YPOS_TBL_LEN
    727  f39a		       d0 1c		      bne	.GM_BirdAnimSet
      0  f39c					      FIRE_MISSILE
      1  f39c		       a5 98		      lda	GM_MissileActive
      2  f39e		       d0 14		      bne	.NoMissile
      3  f3a0		       a5 89		      lda	GM_PlayerXPos
      4  f3a2		       18		      clc
      5  f3a3		       69 05		      adc	#5
      6  f3a5		       85 96		      sta	GM_MissileXPos
      7  f3a7		       a9 46		      lda	#70
      8  f3a9		       85 97		      sta	GM_MissileYPos
      9  f3ab		       a9 02		      lda	#2
     10  f3ad		       85 98		      sta	GM_MissileActive
     11  f3af		       a0 03		      ldy	#sfxCOLLIDE
     12  f3b1		       20 a4 f5 	      jsr	SFX_TRIGGER
     13  f3b4				   .NoMissile
    729  f3b4		       a9 00		      lda	#0
    730  f3b6		       85 95		      sta	GM_BirdYPosIdx
    731  f3b8				   .GM_BirdAnimSet
    732  f3b8		       a8		      tay
    733  f3b9
    734  f3b9		       29 01		      and	#1
    735  f3bb		       f0 0b		      beq	.GM_BirdFlap
      0  f3bd					      SET_POINTER	GM_BirdPtr, GM_BIRD_2
      1  f3bd				   .POINTER   SET	GM_BirdPtr
      2  f3bd				   .ADDRESS   SET	GM_BIRD_2
      3  f3bd
      4  f3bd		       a9 d4		      LDA	#<.ADDRESS
      5  f3bf		       85 8e		      STA	.POINTER
      6  f3c1		       a9 f6		      LDA	#>.ADDRESS
      7  f3c3		       85 8f		      STA	.POINTER+1
      8  f3c5
    737  f3c5		       4c d0 f3 	      jmp	.GM_BirdFlapDone
    738  f3c8				   .GM_BirdFlap
      0  f3c8					      SET_POINTER	GM_BirdPtr, GM_BIRD_1
      1  f3c8				   .POINTER   SET	GM_BirdPtr
      2  f3c8				   .ADDRESS   SET	GM_BIRD_1
      3  f3c8
      4  f3c8		       a9 ce		      LDA	#<.ADDRESS
      5  f3ca		       85 8e		      STA	.POINTER
      6  f3cc		       a9 f6		      LDA	#>.ADDRESS
      7  f3ce		       85 8f		      STA	.POINTER+1
      8  f3d0
    740  f3d0				   .GM_BirdFlapDone
    741  f3d0
    742  f3d0		       b9 f3 f5 	      lda	GM_BIRD_ANIM,Y
    743  f3d3		       85 92		      sta	GM_BirdYPos
    744  f3d5				   .GM_BirdAnimDone
    745  f3d5
    746  f3d5		       a9 02		      lda	#2
    747  f3d7		       c5 97		      cmp	GM_MissileYPos
    748  f3d9		       f0 07		      beq	.GM_StopMisssile
    749  f3db		       c6 97		      dec	GM_MissileYPos	; else, increase y-position of the bullet/ball
    750  f3dd		       c6 97		      dec	GM_MissileYPos	; else, increase y-position of the bullet/ball
    751  f3df		       4c e6 f3 	      jmp	.GM_MissileDone
    752  f3e2				   .GM_StopMisssile
    753  f3e2		       a9 00		      lda	#0
    754  f3e4		       85 98		      sta	GM_MissileActive
    755  f3e6				   .GM_MissileDone
    756  f3e6
    757  f3e6		       a2 00		      ldx	#0
    758  f3e8				   .GM_CheckInputUp
    759  f3e8		       a9 10		      lda	#%00010000
    760  f3ea		       2c 80 02 	      bit	SWCHA
    761  f3ed		       d0 0a		      bne	.GM_CheckInputDown
    762  f3ef		       a5 8a		      lda	GM_PlayerYPos
    763  f3f1		       c9 3e		      cmp	#GAME_PLAYER_MAX_Y
    764  f3f3		       f0 04		      beq	.GM_CheckInputDown
    765  f3f5		       a2 01		      ldx	#1
    766  f3f7		       e6 8a		      inc	GM_PlayerYPos
    767  f3f9
    768  f3f9				   .GM_CheckInputDown
    769  f3f9		       a9 20		      lda	#%00100000
    770  f3fb		       2c 80 02 	      bit	SWCHA
    771  f3fe		       d0 0a		      bne	.GM_CheckInputLeft
    772  f400		       a5 8a		      lda	GM_PlayerYPos
    773  f402		       c9 02		      cmp	#GAME_PLAYER_MIN_Y
    774  f404		       f0 04		      beq	.GM_CheckInputLeft
    775  f406		       a2 01		      ldx	#1
    776  f408		       c6 8a		      dec	GM_PlayerYPos
    777  f40a
    778  f40a				   .GM_CheckInputLeft
    779  f40a		       a9 40		      lda	#%01000000
    780  f40c		       2c 80 02 	      bit	SWCHA
    781  f40f		       d0 0e		      bne	.GM_CheckInputRight
    782  f411		       a5 89		      lda	GM_PlayerXPos
    783  f413		       c9 00		      cmp	#GAME_PLAYER_MIN_X
    784  f415		       f0 08		      beq	.GM_CheckInputRight
    785  f417		       a9 08		      lda	#%00001000
    786  f419		       85 93		      sta	GM_BirdReflection
    787  f41b		       a2 01		      ldx	#1
    788  f41d		       c6 89		      dec	GM_PlayerXPos
    789  f41f
    790  f41f				   .GM_CheckInputRight
    791  f41f		       a9 80		      lda	#%10000000
    792  f421		       2c 80 02 	      bit	SWCHA
    793  f424		       d0 0e		      bne	.GM_CheckInputDone
    794  f426		       a5 89		      lda	GM_PlayerXPos
    795  f428		       c9 92		      cmp	#GAME_PLAYER_MAX_X
    796  f42a		       f0 08		      beq	.GM_CheckInputDone
    797  f42c		       a9 00		      lda	#0
    798  f42e		       85 93		      sta	GM_BirdReflection
    799  f430		       a2 01		      ldx	#1
    800  f432		       e6 89		      inc	GM_PlayerXPos
    801  f434
    802  f434				   .GM_CheckInputDone
    803  f434		       e0 00		      cpx	#0
    804  f436		       f0 19		      beq	.GM_SetNoPlayerAnim
    805  f438		       a9 01		      lda	#1
    806  f43a		       85 8b		      sta	GM_PlayerAnimOn
    807  f43c
    808  f43c		       a5 8d		      lda	GM_PlayerAnimTicks
    809  f43e		       d0 0c		      bne	.GM_NoNewFrame
    810  f440		       a5 0a		      lda	GAME_PLAYER_ANIM_SPEED
    811  f442		       85 8d		      sta	GM_PlayerAnimTicks
    812  f444		       e6 8c		      inc	GM_PlayerAnimFrame
    813  f446		       a5 8c		      lda	GM_PlayerAnimFrame
    814  f448		       29 01		      and	#1
    815  f44a		       85 8c		      sta	GM_PlayerAnimFrame
    816  f44c				   .GM_NoNewFrame
    817  f44c		       c6 8d		      dec	GM_PlayerAnimTicks
    818  f44e				   .GM_FrameDone
    819  f44e
    820  f44e
    821  f44e		       4c 57 f4 	      jmp	.GM_SetPlayerAnimDone
    822  f451				   .GM_SetNoPlayerAnim
    823  f451		       a9 00		      lda	#0
    824  f453		       85 8b		      sta	GM_PlayerAnimOn
    825  f455		       85 8d		      sta	GM_PlayerAnimTicks
    826  f457				   .GM_SetPlayerAnimDone
    827  f457
    828  f457		       e0 01		      cpx	#1
    829  f459		       d0 08		      bne	.GM_Continue
    830  f45b		       a5 a2		      lda	Timer
    831  f45d		       f0 04		      beq	.GM_Continue
    832  f45f		       a9 00		      lda	#0
    833  f461		       85 a0		      sta	GameOver
    834  f463				   .GM_Continue
    835  f463
    836  f463				   .GM_OverscanWait
    837  f463		       ae 84 02 	      ldx	INTIM
    838  f466		       d0 fb		      bne	.GM_OverscanWait	; wait until timer is done
    839  f468		       85 02		      sta	WSYNC
    840  f46a							; -------------------------
    841  f46a		       4c 24 f1 	      jmp	GM_NextFrame
    842  f46d
    843  f46d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    844  f46d							;; Subruotines
    845  f46d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    846  f46d
    847  f46d				   PlaceBug   subroutine
    848  f46d		       20 80 f4 	      jsr	Randomize
    849  f470		       a5 9f		      lda	Random
    850  f472		       29 7f		      and	#%01111111
    851  f474		       85 9b		      sta	GM_BugXPos
    852  f476		       20 80 f4 	      jsr	Randomize
    853  f479		       a5 9f		      lda	Random
    854  f47b		       29 3f		      and	#%00111111
    855  f47d		       85 9c		      sta	GM_BugYPos
    856  f47f		       60		      rts
    857  f480
    858  f480				   Randomize  subroutine
    859  f480		       a5 9f		      lda	Random
    860  f482		       0a		      asl
    861  f483		       45 9f		      eor	Random
    862  f485		       0a		      asl
    863  f486		       45 9f		      eor	Random
    864  f488		       0a		      asl
    865  f489		       0a		      asl
    866  f48a		       45 9f		      eor	Random
    867  f48c		       0a		      asl
    868  f48d		       26 9f		      rol	Random	; performs a series of shifts and bit operations
    869  f48f		       60		      rts
    870  f490
    871  f490							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    872  f490							;; SetObjectXPos
    873  f490							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    874  f490							;; A : Contains the the desired x-coordinate
    875  f490							;; Y=0 : Player0
    876  f490							;; Y=1 : Player1
    877  f490							;; Y=2 : Missile0
    878  f490							;; Y=3 : Missile1
    879  f490							;; Y=4 : Ball
    880  f490							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    881  f490
    882  f490				   SetObjectXPos subroutine
    883  f490		       38		      sec		; Set carry flag
    884  f491		       85 02		      sta	WSYNC	; Get fresh scanline
    885  f493							; -------------------------
    886  f493				   .Div15Loop		; Divide A with 15 by subtraction in loop
    887  f493		       e9 0f		      sbc	#15	; Subtract 15 from A
    888  f495		       b0 fc		      bcs	.Div15Loop	; Loop if carry flag is set
    889  f497		       49 07		      eor	#7	; Adjust the remainder in A between -8 and 7
    890  f499					      REPEAT	4	; Repeat 4 times
    891  f499		       0a		      asl		; Shift bits left by one
    890  f499					      REPEND		; End of repeat
    891  f49a		       0a		      asl		; Shift bits left by one
    890  f49a					      REPEND		; End of repeat
    891  f49b		       0a		      asl		; Shift bits left by one
    890  f49b					      REPEND		; End of repeat
    891  f49c		       0a		      asl		; Shift bits left by one
    892  f49d					      REPEND		; End of repeat
    893  f49d		       99 20 00 	      sta	HMP0,Y	; Set fine position value for object HMP0+Y
    894  f4a0		       99 10 00 	      sta	RESP0,Y	; Seset rough position for object HMP0+Y
    895  f4a3		       60		      rts
    896  f4a4
    897  f4a4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    898  f4a4							;; Subroutine to handle scoreboard digits to be displayed on the screen
    899  f4a4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    900  f4a4							;; This is stored using BCD, so the display will be displayed in dec numbers.
    901  f4a4							;; Converts the high and low nibbles of the variables Score and Timer
    902  f4a4							;; into offsets into the digit lookup table so the values can be displayed.
    903  f4a4							;; Each digit has a height of 5 bytes in the lookup table.
    904  f4a4							;;
    905  f4a4							;; For the low nibble we need to multiply by 5:
    906  f4a4							;;   - we can use left shifts to perform multiplation by 2
    907  f4a4							;;   - for any number N, the value of N*5 = (N*2*2)+N
    908  f4a4							;;
    909  f4a4							;; For the upper nibble, since it is already times 16, we need to divide it
    910  f4a4							;; and then multiply it by 5:
    911  f4a4							;;   - we can use right shift to perform division by 2
    912  f4a4							;;   - for any number N, the value of (N/16)*5 = (N/4)+(N/16)
    913  f4a4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    914  f4a4				   PrepareScoreAndTimer subroutine
    915  f4a4		       a2 01		      ldx	#1	; X register is the loop counter
    916  f4a6				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    917  f4a6
    918  f4a6		       b5 a1		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    919  f4a8		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111
    920  f4aa		       85 a8		      sta	Temp	; save the value of A into Temp
    921  f4ac		       0a		      asl		; shift left (it is now N*2)
    922  f4ad		       0a		      asl		; shift left (it is now N*4)
    923  f4ae		       65 a8		      adc	Temp	; add the value saved in Temp (+N)
    924  f4b0		       95 a4		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset
    925  f4b2
    926  f4b2		       b5 a1		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    927  f4b4		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    928  f4b6		       4a		      lsr		; shift right (it is now N/2)
    929  f4b7		       4a		      lsr		; shift right (it is now N/4)
    930  f4b8		       85 a8		      sta	Temp	; save the value of A into Temp
    931  f4ba		       4a		      lsr		; shift right (it is now N/8)
    932  f4bb		       4a		      lsr		; shift right (it is now N/16)
    933  f4bc		       65 a8		      adc	Temp	; add the value saved in Temp (N/16+N/4)
    934  f4be		       95 a6		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    935  f4c0		       ca		      dex		; X--
    936  f4c1		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    937  f4c3
    938  f4c3		       a2 05		      ldx	#5
    939  f4c5				   .SpriteLoop
    940  f4c5
    941  f4c5		       a4 a6		      ldy	TensDigitOffset
    942  f4c7		       b9 3f f6 	      lda	Digits,y
    943  f4ca		       29 f0		      and	#$F0
    944  f4cc		       85 a8		      sta	Temp
    945  f4ce
    946  f4ce		       a4 a4		      ldy	OnesDigitOffset
    947  f4d0		       b9 3f f6 	      lda	Digits,y
    948  f4d3		       29 0f		      and	#$0F
    949  f4d5		       05 a8		      ora	Temp
    950  f4d7		       85 a8		      sta	Temp
    951  f4d9
    952  f4d9		       a5 a8		      lda	Temp
    953  f4db		       95 a9		      sta	ScoreSprite,X
    954  f4dd
    955  f4dd		       a4 a7		      ldy	TensDigitOffset+1
    956  f4df		       b9 3f f6 	      lda	Digits,y
    957  f4e2		       29 f0		      and	#$F0
    958  f4e4		       85 a8		      sta	Temp
    959  f4e6
    960  f4e6		       a4 a5		      ldy	OnesDigitOffset+1
    961  f4e8		       b9 3f f6 	      lda	Digits,y
    962  f4eb		       29 0f		      and	#$0F
    963  f4ed		       05 a8		      ora	Temp
    964  f4ef		       85 a8		      sta	Temp
    965  f4f1
    966  f4f1		       a5 a8		      lda	Temp
    967  f4f3		       95 af		      sta	TimerSprite,X
    968  f4f5
    969  f4f5		       e6 a6		      inc	TensDigitOffset
    970  f4f7		       e6 a7		      inc	TensDigitOffset+1
    971  f4f9		       e6 a4		      inc	OnesDigitOffset
    972  f4fb		       e6 a5		      inc	OnesDigitOffset+1
    973  f4fd
    974  f4fd		       ca		      dex
    975  f4fe		       d0 c5		      bne	.SpriteLoop
    976  f500
    977  f500		       60		      rts
    978  f501
------- FILE sfx.asm LEVEL 2 PASS 2
      0  f501					      include	sfx.asm
      1  f501							; Like player graphics, sound data is stored in reverse order.
      2  f501							; two tables are used, SFX_F and SFX_CV.  Values in the tables are used in
      3  f501							; pairs, one from SFX_F and one from SFX_CV.  As such, both tables must be the
      4  f501							; same size.  Also, the size of each table is limited to just 256 bytes. DASM
      5  f501							; will output a compile-time warning if it spots a size problem.
      6  f501							;
      7  f501							; Each pair of values are used for a single frame (ie: 1/60th of a secon).  A
      8  f501							; 0 value in the SFX_CV table means "end of sound effect", though for clarity
      9  f501							; it is recommended to also use a matching 0 in SFX_F.
     10  f501							;
     11  f501							; table SFX_F holds the Frequency for the sound effects.
     12  f501							; each .byte line contains the Frequency data for a single sound effect.
     13  f501							; Frequency values range from 0-31
     14  f501				   SFX_F
     15  f501		       00 0f 0f 0f	      .byte.b	0, 15, 15, 15	; collide
     16  f505		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3	; collect
     17  f512		       00 08 08 08*	      .byte.b	0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8	; ping
     18  f522		       00 1f 1f 1f*	      .byte.b	0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31	; game over
     19  f532		       00 1c 1c 1c*	      .byte.b	0, 28, 28, 28, 28 ,28 ,28 ,28, 28, 22, 22, 22, 22 ,22 ,22 ,22, 22, 18, 18, 18, 18 ,18 ,18 ,18, 18	; test
     20  f54b
     21  f54b							; calculate size of SFX_F table and validate size
     22  f54b		       00 4a	   SFX_Fcount =	*-SFX_F
     23  f54b				  -	      if	SFX_Fcount > 256
     24  f54b				  -	      echo	"SFX Warning: table SFX_F is too large"
     25  f54b					      endif
     26  f54b
     27  f54b
     28  f54b							; table SFX_CV holds the sound effect Channel (tone) and Volume values.
     29  f54b							; Both values range from 0-15, so they are combined together.
     30  f54b							; The $ denotes a HEX value where the digits are 0123456789abcdef (a=10, f=15).
     31  f54b							; the first digit is the Channel value.
     32  f54b							; the second digit is the Volume value.
     33  f54b							; each .byte line contains the Channel and Volume data for a single sound effect
     34  f54b							; the first value of every .byte line should be 0, which denotes end-of-sfx
     35  f54b							; the = line below each .byte line calculates the value used when calling
     36  f54b							; sfxtrigger.
     37  f54b							; Channel values are:
     38  f54b							; 0 = No sound (silent).
     39  f54b							; 1 = Buzzy tones.
     40  f54b							; 2 = Carries distortion 1 downward into a rumble.
     41  f54b							; 3 = Flangy wavering tones, like a UFO.
     42  f54b							; 4 = Pure tone.
     43  f54b							; 5 = Same as 4.
     44  f54b							; 6 = Between pure tone and buzzy tone (Adventure death uses this).
     45  f54b							; 7 = Reedy tones, much brighter, down to Enduro car rumble.
     46  f54b							; 8 = White noise/explosions/lightning, jet/spacecraft engine.
     47  f54b							; 9 = Same as 7.
     48  f54b							; a = Same as 6.
     49  f54b							; b = Same as 0.
     50  f54b							; c = Pure tone, goes much lower in pitch than 4 & 5.
     51  f54b							; d = Same as c.
     52  f54b							; e = Electronic tones, mostly lows, extends to rumble.
     53  f54b							; f = Electronic tones, mostly lows, extends to rumble.
     54  f54b
     55  f54b				   SFX_CV
     56  f54b		       00 ef ef ef	      .byte.b	0,$ef,$ef,$ef	; collide
     57  f54b		       00 03	   sfxCOLLIDE =	*-SFX_CV-1
     58  f54f		       00 6f 6f 6f*	      .byte.b	0,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f	; collect
     59  f54f		       00 10	   sfxCOLLECT =	*-SFX_CV-1
     60  f55c		       00 41 42 43*	      .byte.b	0,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f	; ping
     61  f55c		       00 20	   sfxPING    =	*-SFX_CV-1
     62  f56c		       00 cf cf cf*	      .byte.b	0,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf	; game over
     63  f56c		       00 30	   sfxGAMEOVER =	*-SFX_CV-1
     64  f57c		       00 4f 4f 4f*	      .byte.b	0,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f	; game over
     65  f57c		       00 49	   sfxTEST    =	*-SFX_CV-1
     66  f595
     67  f595							; calculate size of SFX_CV table and validate size
     68  f595		       00 4a	   SFX_CVcount =	*-SFX_CV
     69  f595
     70  f595				  -	      if	SFX_CVcount > 256
     71  f595				  -	      echo	"SFX Warning: table SFX_CV is too large"
     72  f595					      endif
     73  f595				  -	      if	SFX_CVcount != SFX_Fcount
     74  f595				  -	      echo	"SFX Warning: table SFX_F is not the same size as table SFX_CV"
     75  f595					      endif
     76  f595
     77  f595
     78  f595				   SFX_OFF
     79  f595		       a2 00		      ldx	#0	; silence sound output
     80  f597		       86 b5		      stx	SFX_LEFT
     81  f599		       86 b6		      stx	SFX_RIGHT
     82  f59b		       86 19		      stx	AUDV0
     83  f59d		       86 1a		      stx	AUDV1
     84  f59f		       86 15		      stx	AUDC0
     85  f5a1		       86 16		      stx	AUDC1
     86  f5a3		       60		      rts
     87  f5a4
     88  f5a4				   SFX_TRIGGER
     89  f5a4		       a6 b5		      ldx	SFX_LEFT	; test left channel
     90  f5a6		       bd 4b f5 	      lda	SFX_CV,x	; CV value will be 0 if channel is idle
     91  f5a9		       d0 03		      bne	.leftnotfree	; if not 0 then skip ahead
     92  f5ab		       84 b5		      sty	SFX_LEFT	; channel is idle, use it
     93  f5ad		       60		      rts		; all done
     94  f5ae				   .leftnotfree
     95  f5ae		       a6 b6		      ldx	SFX_RIGHT	; test right channel
     96  f5b0		       bd 4b f5 	      lda	SFX_CV,x	; CV value will be 0 if channel is idle
     97  f5b3		       d0 03		      bne	.rightnotfree	; if not 0 then skip ahead
     98  f5b5		       84 b6		      sty	SFX_RIGHT	; channel is idle, use it
     99  f5b7		       60		      rts		; all done
    100  f5b8				   .rightnotfree
    101  f5b8		       c4 b5		      cpy	SFX_LEFT	; test sfx priority with left channel
    102  f5ba		       90 03		      bcc	.leftnotlower	; skip ahead if new sfx has lower priority than active sfx
    103  f5bc		       84 b5		      sty	SFX_LEFT	; new sfx has higher priority so use left channel
    104  f5be		       60		      rts		; all done
    105  f5bf				   .leftnotlower
    106  f5bf		       c4 b6		      cpy	SFX_RIGHT	; test sfx with right channel
    107  f5c1		       90 02		      bcc	.rightnotlower	; skip ahead if new sfx has lower priority than active sfx
    108  f5c3		       84 b6		      sty	SFX_RIGHT	; new sfx has higher priority so use right channel
    109  f5c5				   .rightnotlower
    110  f5c5		       60		      rts
    111  f5c6
    112  f5c6				   SFX_UPDATE
    113  f5c6		       a6 b5		      ldx	SFX_LEFT	; get the pointer for the left channel
    114  f5c8		       bd 01 f5 	      lda	SFX_F,x	; get the Frequency value
    115  f5cb		       85 17		      sta	AUDF0	; update the Frequency register
    116  f5cd		       bd 4b f5 	      lda	SFX_CV,x	; get the combined Control and Volume value
    117  f5d0		       85 19		      sta	AUDV0	; update the Volume register
    118  f5d2		       4a		      lsr		; prep the Control value,
    119  f5d3		       4a		      lsr		;   it's stored in the upper nybble
    120  f5d4		       4a		      lsr		;   but must be in the lower nybble
    121  f5d5		       4a		      lsr		;   when Control is updated
    122  f5d6		       85 15		      sta	AUDC0	; update the Control register
    123  f5d8		       f0 02		      beq	.skipleftdec	; skip ahead if Control = 0
    124  f5da		       c6 b5		      dec	SFX_LEFT	; update pointer for left channel
    125  f5dc				   .skipleftdec
    126  f5dc		       a6 b6		      ldx	SFX_RIGHT	; get the pointer for the right channel
    127  f5de		       bd 01 f5 	      lda	SFX_F,x	; get the Frequency value
    128  f5e1		       85 18		      sta	AUDF1	; update the Frequency register
    129  f5e3		       bd 4b f5 	      lda	SFX_CV,x	; get the combined Control and Volume value
    130  f5e6		       85 1a		      sta	AUDV1	; update the Volume register
    131  f5e8		       4a		      lsr		; prep the Control value,
    132  f5e9		       4a		      lsr		;   it's stored in the upper nybble
    133  f5ea		       4a		      lsr		;   but must be in the lower nybble
    134  f5eb		       4a		      lsr		;   when Control is updated
    135  f5ec		       85 16		      sta	AUDC1	; update the Control register
    136  f5ee		       f0 02		      beq	.skiprightdec	; skip ahead if Control = 0
    137  f5f0		       c6 b6		      dec	SFX_RIGHT	; update pointer for right channel
    138  f5f2				   .skiprightdec
    139  f5f2		       60		      rts		; all done
    140  f5f3
------- FILE metria.asm
    980  f5f3
    981  f5f3
    982  f5f3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    983  f5f3							;; Lookup tabes
    984  f5f3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    985  f5f3
    986  f5f3				   GM_BIRD_ANIM
    987  f5f3		       02 05 07 08*	      .byte.b	#2,#5,#7,#8,#8,#8,#8,#8,#7,#5,#2,#1
    988  f5ff
    989  f5ff							; https://www.masswerk.at/vcs-tools/TinyPlayfieldEditor/
    990  f5ff							; mode: asymmetric repeat line-height 4
    991  f5ff				   LM_LogoPF0
    992  f5ff		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$90
    993  f607		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$40,$00,$40
    994  f60f		       00 70		      .byte.b	$00,$70
    995  f611				   LM_LogoPF1
    996  f611		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$00,$05,$DE
    997  f619		       0a 42 0a 4e*	      .byte.b	$0A,$42,$0A,$4E,$08,$52,$08,$56
    998  f621		       38 7b		      .byte.b	$38,$7B
    999  f623				   LM_LogoPF2
   1000  f623		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$80,$00,$F8,$00
   1001  f62b		       a5 00 a5 00*	      .byte.b	$A5,$00,$A5,$00,$BF,$00,$85,$00
   1002  f633		       39 03		      .byte.b	$39,$03
   1003  f635
   1004  f635				   LM_LogoFade_Color
   1005  f635		       0e 3e 3c 3a*	      .byte.b	$0E,$3E,$3C,$3A,$38
   1006  f63a
   1007  f63a				   LM_LogoFade_BW
   1008  f63a		       0e 0c 0a 08*	      .byte.b	$0E,$0C,$0A,$08,$06
   1009  f63f
   1010  f63f				   Digits
   1011  f63f		       77		      .byte.b	%01110111	; ### ###
   1012  f640		       55		      .byte.b	%01010101	; # # # #
   1013  f641		       55		      .byte.b	%01010101	; # # # #
   1014  f642		       55		      .byte.b	%01010101	; # # # #
   1015  f643		       77		      .byte.b	%01110111	; ### ###
   1016  f644
   1017  f644		       11		      .byte.b	%00010001	;   #	 #
   1018  f645		       11		      .byte.b	%00010001	;   #	 #
   1019  f646		       11		      .byte.b	%00010001	;   #	 #
   1020  f647		       11		      .byte.b	%00010001	;   #	 #
   1021  f648		       11		      .byte.b	%00010001	;   #	 #
   1022  f649
   1023  f649		       77		      .byte.b	%01110111	; ### ###
   1024  f64a		       11		      .byte.b	%00010001	;   #	 #
   1025  f64b		       77		      .byte.b	%01110111	; ### ###
   1026  f64c		       44		      .byte.b	%01000100	; #   #
   1027  f64d		       77		      .byte.b	%01110111	; ### ###
   1028  f64e
   1029  f64e		       77		      .byte.b	%01110111	; ### ###
   1030  f64f		       11		      .byte.b	%00010001	;   #	 #
   1031  f650		       33		      .byte.b	%00110011	;  ##	##
   1032  f651		       11		      .byte.b	%00010001	;   #	 #
   1033  f652		       77		      .byte.b	%01110111	; ### ###
   1034  f653
   1035  f653		       55		      .byte.b	%01010101	; # # # #
   1036  f654		       55		      .byte.b	%01010101	; # # # #
   1037  f655		       77		      .byte.b	%01110111	; ### ###
   1038  f656		       11		      .byte.b	%00010001	;   #	 #
   1039  f657		       11		      .byte.b	%00010001	;   #	 #
   1040  f658
   1041  f658		       77		      .byte.b	%01110111	; ### ###
   1042  f659		       44		      .byte.b	%01000100	; #   #
   1043  f65a		       77		      .byte.b	%01110111	; ### ###
   1044  f65b		       11		      .byte.b	%00010001	;   #	 #
   1045  f65c		       77		      .byte.b	%01110111	; ### ###
   1046  f65d
   1047  f65d		       77		      .byte.b	%01110111	; ### ###
   1048  f65e		       44		      .byte.b	%01000100	; #   #
   1049  f65f		       77		      .byte.b	%01110111	; ### ###
   1050  f660		       55		      .byte.b	%01010101	; # # # #
   1051  f661		       77		      .byte.b	%01110111	; ### ###
   1052  f662
   1053  f662		       77		      .byte.b	%01110111	; ### ###
   1054  f663		       11		      .byte.b	%00010001	;   #	 #
   1055  f664		       11		      .byte.b	%00010001	;   #	 #
   1056  f665		       11		      .byte.b	%00010001	;   #	 #
   1057  f666		       11		      .byte.b	%00010001	;   #	 #
   1058  f667
   1059  f667		       77		      .byte.b	%01110111	; ### ###
   1060  f668		       55		      .byte.b	%01010101	; # # # #
   1061  f669		       77		      .byte.b	%01110111	; ### ###
   1062  f66a		       55		      .byte.b	%01010101	; # # # #
   1063  f66b		       77		      .byte.b	%01110111	; ### ###
   1064  f66c
   1065  f66c		       77		      .byte.b	%01110111	; ### ###
   1066  f66d		       55		      .byte.b	%01010101	; # # # #
   1067  f66e		       77		      .byte.b	%01110111	; ### ###
   1068  f66f		       11		      .byte.b	%00010001	;   #	 #
   1069  f670		       77		      .byte.b	%01110111	; ### ###
   1070  f671
   1071  f671		       22		      .byte.b	%00100010	;  #	#
   1072  f672		       55		      .byte.b	%01010101	; # # # #
   1073  f673		       77		      .byte.b	%01110111	; ### ###
   1074  f674		       55		      .byte.b	%01010101	; # # # #
   1075  f675		       55		      .byte.b	%01010101	; # # # #
   1076  f676
   1077  f676		       77		      .byte.b	%01110111	; ### ###
   1078  f677		       55		      .byte.b	%01010101	; # # # #
   1079  f678		       66		      .byte.b	%01100110	; ##  ##
   1080  f679		       55		      .byte.b	%01010101	; # # # #
   1081  f67a		       77		      .byte.b	%01110111	; ### ###
   1082  f67b
   1083  f67b		       77		      .byte.b	%01110111	; ### ###
   1084  f67c		       44		      .byte.b	%01000100	; #   #
   1085  f67d		       44		      .byte.b	%01000100	; #   #
   1086  f67e		       44		      .byte.b	%01000100	; #   #
   1087  f67f		       77		      .byte.b	%01110111	; ### ###
   1088  f680
   1089  f680		       66		      .byte.b	%01100110	; ##  ##
   1090  f681		       55		      .byte.b	%01010101	; # # # #
   1091  f682		       55		      .byte.b	%01010101	; # # # #
   1092  f683		       55		      .byte.b	%01010101	; # # # #
   1093  f684		       66		      .byte.b	%01100110	; ##  ##
   1094  f685
   1095  f685		       77		      .byte.b	%01110111	; ### ###
   1096  f686		       44		      .byte.b	%01000100	; #   #
   1097  f687		       77		      .byte.b	%01110111	; ### ###
   1098  f688		       44		      .byte.b	%01000100	; #   #
   1099  f689		       77		      .byte.b	%01110111	; ### ###
   1100  f68a
   1101  f68a		       77		      .byte.b	%01110111	; ### ###
   1102  f68b		       44		      .byte.b	%01000100	; #   #
   1103  f68c		       66		      .byte.b	%01100110	; ##  ##
   1104  f68d		       44		      .byte.b	%01000100	; #   #
   1105  f68e		       44		      .byte.b	%01000100	; #   #
   1106  f68f
   1107  f68f							;---Graphics Data from PlayerPal 2600---
   1108  f68f
   1109  f68f				   GM_DRESS_IDLE
   1110  f68f		       00		      .byte.b	#0
   1111  f690		       7e		      .byte.b	#%01111110	;$70
   1112  f691		       7e		      .byte.b	#%01111110	;$70
   1113  f692		       3c		      .byte.b	#%00111100	;$70
   1114  f693		       5a		      .byte.b	#%01011010	;$84
   1115  f694		       7e		      .byte.b	#%01111110	;$84
   1116  f695		       18		      .byte.b	#%00011000	;$F4
   1117  f696		       3c		      .byte.b	#%00111100	;$00
   1118  f697		       18		      .byte.b	#%00011000	;$00
   1119  f698				   GM_DRESS_WALK1
   1120  f698		       00		      .byte.b	#0
   1121  f699		       78		      .byte.b	#%01111000	;$70
   1122  f69a		       7e		      .byte.b	#%01111110	;$70
   1123  f69b		       3c		      .byte.b	#%00111100	;$70
   1124  f69c		       1a		      .byte.b	#%00011010	;$84
   1125  f69d		       7e		      .byte.b	#%01111110	;$84
   1126  f69e		       18		      .byte.b	#%00011000	;$F4
   1127  f69f		       3c		      .byte.b	#%00111100	;$00
   1128  f6a0		       18		      .byte.b	#%00011000	;$00
   1129  f6a1				   GM_DRESS_WALK2
   1130  f6a1		       00		      .byte.b	#0
   1131  f6a2		       1e		      .byte.b	#%00011110	;$70
   1132  f6a3		       7e		      .byte.b	#%01111110	;$70
   1133  f6a4		       3c		      .byte.b	#%00111100	;$70
   1134  f6a5		       58		      .byte.b	#%01011000	;$84
   1135  f6a6		       7e		      .byte.b	#%01111110	;$84
   1136  f6a7		       18		      .byte.b	#%00011000	;$F4
   1137  f6a8		       3c		      .byte.b	#%00111100	;$00
   1138  f6a9		       18		      .byte.b	#%00011000	;$00
   1139  f6aa				   GM_PANTS_IDLE
   1140  f6aa		       00		      .byte.b	#0
   1141  f6ab		       66		      .byte.b	#%01100110	;$70
   1142  f6ac		       24		      .byte.b	#%00100100	;$70
   1143  f6ad		       3c		      .byte.b	#%00111100	;$70
   1144  f6ae		       5a		      .byte.b	#%01011010	;$84
   1145  f6af		       7e		      .byte.b	#%01111110	;$84
   1146  f6b0		       18		      .byte.b	#%00011000	;$F4
   1147  f6b1		       3c		      .byte.b	#%00111100	;$00
   1148  f6b2		       18		      .byte.b	#%00011000	;$00
   1149  f6b3				   GM_PANTS_WALK1
   1150  f6b3		       00		      .byte.b	#0
   1151  f6b4		       60		      .byte.b	#%01100000	;$70
   1152  f6b5		       26		      .byte.b	#%00100110	;$70
   1153  f6b6		       3c		      .byte.b	#%00111100	;$70
   1154  f6b7		       1a		      .byte.b	#%00011010	;$84
   1155  f6b8		       7e		      .byte.b	#%01111110	;$84
   1156  f6b9		       18		      .byte.b	#%00011000	;$F4
   1157  f6ba		       3c		      .byte.b	#%00111100	;$00
   1158  f6bb		       18		      .byte.b	#%00011000	;$00
   1159  f6bc				   GM_PANTS_WALK2
   1160  f6bc		       00		      .byte.b	#0
   1161  f6bd		       06		      .byte.b	#%00000110	;$70
   1162  f6be		       64		      .byte.b	#%01100100	;$70
   1163  f6bf		       3c		      .byte.b	#%00111100	;$70
   1164  f6c0		       58		      .byte.b	#%01011000	;$84
   1165  f6c1		       7e		      .byte.b	#%01111110	;$84
   1166  f6c2		       18		      .byte.b	#%00011000	;$F4
   1167  f6c3		       3c		      .byte.b	#%00111100	;$00
   1168  f6c4		       18		      .byte.b	#%00011000	;$00
   1169  f6c5				   GM_BUG
   1170  f6c5		       00		      .byte.b	#0
   1171  f6c6		       00		      .byte.b	#%00000000	;$00
   1172  f6c7		       00		      .byte.b	#%00000000	;$00
   1173  f6c8		       52		      .byte.b	#%01010010	;$F0
   1174  f6c9		       3c		      .byte.b	#%00111100	;$F0
   1175  f6ca		       3c		      .byte.b	#%00111100	;$F2
   1176  f6cb		       52		      .byte.b	#%01010010	;$F0
   1177  f6cc		       00		      .byte.b	#%00000000	;$00
   1178  f6cd		       00		      .byte.b	#%00000000	;$00
   1179  f6ce				   GM_BIRD_1
   1180  f6ce		       00		      .byte.b	#0
   1181  f6cf		       01		      .byte.b	#%00000001	;$1C
   1182  f6d0		       3f		      .byte.b	#%00111111	;$0E
   1183  f6d1		       fe		      .byte.b	#%11111110	;$0A
   1184  f6d2		       18		      .byte.b	#%00011000	;$0E
   1185  f6d3		       76		      .byte.b	#%01110110	;$0E
   1186  f6d4				   GM_BIRD_2
   1187  f6d4		       00		      .byte.b	#0
   1188  f6d5		       01		      .byte.b	#%00000001	;$1C
   1189  f6d6		       3f		      .byte.b	#%00111111	;$0E
   1190  f6d7		       fe		      .byte.b	#%11111110	;$0A
   1191  f6d8		       f8		      .byte.b	#%11111000	;$0E
   1192  f6d9		       00		      .byte.b	#%00000000	;$0E
   1193  f6da
   1194  f6da							;---End Graphics Data---
   1195  f6da
   1196  f6da
   1197  f6da				   GM_TREE
   1198  f6da		       00 80 80 80	      .byte.b	$00,$80,$80,$80
   1199  f6de		       80 80 80 80*	      .byte.b	$80,$80,$80,$80,$D0,$F8,$F8,$F8
   1200  f6e6		       f8 f0 f0 f0*	      .byte.b	$F8,$F0,$F0,$F0,$E0,$C0,$C0,$80
   1201  f6ee
   1202  f6ee							;---Color Data from PlayerPal 2600---
   1203  f6ee				   GM_PLAYER_COLOR_IDLE
   1204  f6ee		       00		      .byte.b	#0
   1205  f6ef		       70		      .byte.b	#$70	;
   1206  f6f0		       70		      .byte.b	#$70	;
   1207  f6f1		       70		      .byte.b	#$70	;
   1208  f6f2		       84		      .byte.b	#$84	;
   1209  f6f3		       84		      .byte.b	#$84	;
   1210  f6f4		       f4		      .byte.b	#$F4	;
   1211  f6f5		       00		      .byte.b	#$00	;
   1212  f6f6		       00		      .byte.b	#$00	;
   1213  f6f7				   GM_PLAYER_COLOR_WALK1
   1214  f6f7		       00		      .byte.b	#0
   1215  f6f8		       70		      .byte.b	#$70	;
   1216  f6f9		       70		      .byte.b	#$70	;
   1217  f6fa		       70		      .byte.b	#$70	;
   1218  f6fb		       84		      .byte.b	#$84	;
   1219  f6fc		       84		      .byte.b	#$84	;
   1220  f6fd		       f4		      .byte.b	#$F4	;
   1221  f6fe		       00		      .byte.b	#$00	;
   1222  f6ff		       00		      .byte.b	#$00	;
   1223  f700				   GM_PLAYER_COLOR_WALK2
   1224  f700		       00		      .byte.b	#0
   1225  f701		       70		      .byte.b	#$70	;
   1226  f702		       70		      .byte.b	#$70	;
   1227  f703		       70		      .byte.b	#$70	;
   1228  f704		       84		      .byte.b	#$84	;
   1229  f705		       84		      .byte.b	#$84	;
   1230  f706		       f4		      .byte.b	#$F4	;
   1231  f707		       00		      .byte.b	#$00	;
   1232  f708		       00		      .byte.b	#$00	;
   1233  f709				   GM_PLAYER_BW_IDLE
   1234  f709		       00		      .byte.b	#0
   1235  f70a		       00		      .byte.b	#$0	;
   1236  f70b		       00		      .byte.b	#$0	;
   1237  f70c		       00		      .byte.b	#$0	;
   1238  f70d		       02		      .byte.b	#$02	;
   1239  f70e		       02		      .byte.b	#$02	;
   1240  f70f		       04		      .byte.b	#$04	;
   1241  f710		       00		      .byte.b	#$00	;
   1242  f711		       00		      .byte.b	#$00	;
   1243  f712				   GM_PLAYER_BW_WALK1
   1244  f712		       00		      .byte.b	#0
   1245  f713		       00		      .byte.b	#$0	;
   1246  f714		       00		      .byte.b	#$0	;
   1247  f715		       00		      .byte.b	#$0	;
   1248  f716		       02		      .byte.b	#$02	;
   1249  f717		       02		      .byte.b	#$02	;
   1250  f718		       04		      .byte.b	#$04	;
   1251  f719		       00		      .byte.b	#$00	;
   1252  f71a		       00		      .byte.b	#$00	;
   1253  f71b				   GM_PLAYER_BW_WALK2
   1254  f71b		       00		      .byte.b	#0
   1255  f71c		       00		      .byte.b	#$0	;
   1256  f71d		       00		      .byte.b	#$0	;
   1257  f71e		       00		      .byte.b	#$0	;
   1258  f71f		       02		      .byte.b	#$02	;
   1259  f720		       02		      .byte.b	#$02	;
   1260  f721		       04		      .byte.b	#$04	;
   1261  f722		       00		      .byte.b	#$00	;
   1262  f723		       00		      .byte.b	#$00	;
   1263  f724				   GM_BUG_COLOR
   1264  f724		       00		      .byte.b	#0
   1265  f725		       00		      .byte.b	#$00	;
   1266  f726		       00		      .byte.b	#$00	;
   1267  f727		       f0		      .byte.b	#$F0	;
   1268  f728		       f0		      .byte.b	#$F0	;
   1269  f729		       f2		      .byte.b	#$F2	;
   1270  f72a		       f0		      .byte.b	#$F0	;
   1271  f72b		       00		      .byte.b	#$00	;
   1272  f72c		       00		      .byte.b	#$00	;
   1273  f72d				   GM_BUG_BW
   1274  f72d		       00		      .byte.b	#0
   1275  f72e		       00		      .byte.b	#$00	;
   1276  f72f		       00		      .byte.b	#$00	;
   1277  f730		       00		      .byte.b	#$00	;
   1278  f731		       00		      .byte.b	#$00	;
   1279  f732		       02		      .byte.b	#$02	;
   1280  f733		       00		      .byte.b	#$00	;
   1281  f734		       00		      .byte.b	#$00	;
   1282  f735		       00		      .byte.b	#$00	;
   1283  f736				   GM_BIRD_COLOR
   1284  f736		       00		      .byte.b	#0
   1285  f737		       1c		      .byte.b	#$1C	;
   1286  f738		       0e		      .byte.b	#$0E	;
   1287  f739		       0a		      .byte.b	#$0A	;
   1288  f73a		       0e		      .byte.b	#$0E	;
   1289  f73b		       0e		      .byte.b	#$0E	;
   1290  f73c				   GM_BIRD_BW
   1291  f73c		       00		      .byte.b	#0
   1292  f73d		       0c		      .byte.b	#$0C	;
   1293  f73e		       0e		      .byte.b	#$0E	;
   1294  f73f		       0a		      .byte.b	#$0A	;
   1295  f740		       0e		      .byte.b	#$0E	;
   1296  f741		       0e		      .byte.b	#$0E	;
   1297  f742
   1298  f742
   1299  f742							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1300  f742							;; Fill the 4K ROM
   1301  f742							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1302  fffc					      org	$FFFC	; insert two pointers at the end of ROM
   1303  fffc		       00 f0		      .word.w	Reset	; reset vector
   1304  fffe		       00 f0		      .word.w	Reset	; interrupt Vector
   1305  10000
   1306  10000
