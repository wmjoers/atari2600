------- FILE metria.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE metria.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE metria.asm
      5  0000 ????
      6  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  0000 ????						;; Macros
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????
     10  0000 ????				      MAC	wait_x_wsync
     11  0000 ????			   .WaitX
     12  0000 ????				      sta	WSYNC	; Wait for horizontal blank
     13  0000 ????				      dex		; X--
     14  0000 ????				      bne	.WaitX	; Loop until X = 0
     15  0000 ????				      ENDM
     16  0000 ????
     17  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     18  0000 ????						;; Contants
     19  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     20  0000 ????
     21  0000 ????	       00 08	   BW_MASK    =	%00001000	; bitmask for black & white switch
     22  0000 ????	       00 01	   RESET_MASK =	%00000001	; bitmask for reset switch
     23  0000 ????	       00 80	   LEFT_BTN_MASK =	%10000000	; bitmask for left joystick button
     24  0000 ????	       00 2b	   TIMER_VBLANK =	43	; value for TIM64T vertical blank timer
     25  0000 ????	       00 23	   TIMER_OVERSCAN =	35	; value for TIM64T overscan timer
     26  0000 ????
     27  0000 ????	       00 72	   RANDOM_SEED =	$72
     28  0000 ????
     29  0000 ????	       00 38	   LOGO_BK_COLOR =	$38	; logo mode background color - color mode
     30  0000 ????	       00 06	   LOGO_BK_BW =	$06	; logo mode background color - black & white
     31  0000 ????	       00 04	   LOGO_FADE_INIT_STATE =	4	; initial value for the logo fade in state
     32  0000 ????	       00 28	   LOGO_FADE_INIT_DELAY =	40	; initial delay value before logo fades in
     33  0000 ????	       00 14	   LOGO_FADE_DELAY =	20	; delay for each fade step - 20 frames/step
     34  0000 ????
     35  0000 ????	       00 c8	   GAME_BK_COLOR =	$C8	; game background color - color mode
     36  0000 ????	       00 08	   GAME_BK_BW =	$08	; game background color - black & white
     37  0000 ????	       00 c0	   GAME_PF_COLOR =	$C0	; game playfield color - color mode
     38  0000 ????	       00 02	   GAME_PF_BW =	$02	; game playfield color - black & white
     39  0000 ????	       00 78	   GAME_SKY_COLOR =	$78	; game sky color - color mode
     40  0000 ????	       00 06	   GAME_SKY_BW =	$06	; game sky color - black & white
     41  0000 ????	       00 00	   GAME_SCOREBOARD_COLOR =	$0	; game score board color - all modes
     42  0000 ????
     43  0000 ????	       00 09	   GAME_PLAYER_HEIGHT =	9	; player sprite height
     44  0000 ????	       00 09	   GAME_BUG_HEIGHT =	9	; bug sprite height
     45  0000 ????
     46  0000 ????
     47  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     48  0000 ????						;; RAM variables located outside ROM at address $0080
     49  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     50  0000 ????
     51 U0097 ????				      seg.u	variables
     52 U0080					      org	$80	; RAM address memory start
     53 U0080
     54 U0080		       00	   LM_LogoFadeState ds	1	; current logo fade state
     55 U0081		       00	   LM_LogoFadeDelay ds	1	; current logo fade delay
     56 U0082
     57 U0082		       00	   GM_BackgroundColor ds	1
     58 U0083		       00	   GM_SkyColor ds	1
     59 U0084
     60 U0084		       00 00	   GM_PlayerPtr ds	2
     61 U0086		       00 00	   GM_PlayerColorPtr ds	2
     62 U0088		       00	   GM_PlayerXPos ds	1
     63 U0089		       00	   GM_PlayerYPos ds	1
     64 U008a
     65 U008a		       00 00	   GM_BirdPtr ds	2
     66 U008c		       00 00	   GM_BirdColorPtr ds	2
     67 U008e		       00	   GM_BirdYPos ds	1
     68 U008f		       00	   GM_BirdReflection ds	1
     69 U0090
     70 U0090		       00 00	   GM_BugColorPtr ds	2
     71 U0092		       00	   GM_BugXPos ds	1
     72 U0093		       00	   GM_BugYPos ds	1
     73 U0094		       00	   GM_PlayfieldIdx ds	1
     74 U0095
     75 U0095		       00	   PFCounter  ds	1
     76 U0096		       00	   Random     ds	1
     77 U0097
     78 U0097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     79 U0097							;; Program start - Located at top of ROM at address $F000
     80 U0097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     81 U0097
     82  10000 ????				       seg	code
     83  f000					      org	$F000	; start address of ROM
     84  f000
     85  f000				   Reset
      0  f000					      CLEAN_START		; set machine to known state on startup
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     87  f00a
     88  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     89  f00a							;; Init variables
     90  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     91  f00a
     92  f00a		       a9 72		      lda	#RANDOM_SEED
     93  f00c		       85 96		      sta	Random
     94  f00e
     95  f00e		       a9 04		      lda	#LOGO_FADE_INIT_STATE
     96  f010		       85 80		      sta	LM_LogoFadeState	; initialize logo fade state
     97  f012		       a9 28		      lda	#LOGO_FADE_INIT_DELAY
     98  f014		       85 81		      sta	LM_LogoFadeDelay	; initialize logo fade delay
     99  f016
      0  f016					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f016				   .POINTER   SET	GM_PlayerPtr
      2  f016				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f016
      4  f016		       a9 30		      LDA	#<.ADDRESS
      5  f018		       85 84		      STA	.POINTER
      6  f01a		       a9 f3		      LDA	#>.ADDRESS
      7  f01c		       85 85		      STA	.POINTER+1
      8  f01e
      0  f01e					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f01e				   .POINTER   SET	GM_PlayerColorPtr
      2  f01e				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f01e
      4  f01e		       a9 81		      LDA	#<.ADDRESS
      5  f020		       85 86		      STA	.POINTER
      6  f022		       a9 f3		      LDA	#>.ADDRESS
      7  f024		       85 87		      STA	.POINTER+1
      8  f026
    102  f026
      0  f026					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f026				   .POINTER   SET	GM_BugColorPtr
      2  f026				   .ADDRESS   SET	GM_BUG_COLOR
      3  f026
      4  f026		       a9 b7		      LDA	#<.ADDRESS
      5  f028		       85 90		      STA	.POINTER
      6  f02a		       a9 f3		      LDA	#>.ADDRESS
      7  f02c		       85 91		      STA	.POINTER+1
      8  f02e
    104  f02e
      0  f02e					      SET_POINTER	GM_BirdPtr, GM_BIRD_1
      1  f02e				   .POINTER   SET	GM_BirdPtr
      2  f02e				   .ADDRESS   SET	GM_BIRD_1
      3  f02e
      4  f02e		       a9 6f		      LDA	#<.ADDRESS
      5  f030		       85 8a		      STA	.POINTER
      6  f032		       a9 f3		      LDA	#>.ADDRESS
      7  f034		       85 8b		      STA	.POINTER+1
      8  f036
    106  f036
    107  f036		       a9 3e		      lda	#62
    108  f038		       85 88		      sta	GM_PlayerXPos
    109  f03a		       a9 15		      lda	#21
    110  f03c		       85 89		      sta	GM_PlayerYPos
    111  f03e
    112  f03e		       20 69 f2 	      jsr	PlaceBug
    113  f041
    114  f041		       a9 04		      lda	#4
    115  f043		       85 8e		      sta	GM_BirdYPos
    116  f045		       a9 00		      lda	#0
    117  f047		       85 8f		      sta	GM_BirdReflection
    118  f049
    119  f049		       a9 02		      lda	#2
    120  f04b		       85 01		      sta	VBLANK	; turn on VBLANK
    121  f04d
    122  f04d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    123  f04d							;; LOGO MODE - LM
    124  f04d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    125  f04d				   LM_NextFrame
      0  f04d					      VERTICAL_SYNC		; vertical sync - 3 scanlines
      1  f04d		       a9 0e		      lda	#%1110
      2  f04f		       85 02	   .VSLP1     sta	WSYNC
      3  f051		       85 00		      sta	VSYNC
      4  f053		       4a		      lsr
      5  f054		       d0 f9		      bne	.VSLP1
    127  f056
    128  f056							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    129  f056							;; Vertical Blank - 37 scanlines - 2812 mc
    130  f056							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    131  f056		       a9 2b		      lda	#TIMER_VBLANK
    132  f058		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    133  f05b
    134  f05b				   .LM_Fade		; handles logo fade in
    135  f05b		       a5 80		      lda	LM_LogoFadeState
    136  f05d		       c9 00		      cmp	#0
    137  f05f		       f0 0a		      beq	.LM_FadeDone	; if fade in is complete then jump out
    138  f061		       c6 81		      dec	LM_LogoFadeDelay	; dec fade delay
    139  f063		       d0 06		      bne	.LM_FadeDone	; if still waiting for delay then jump out
    140  f065		       c6 80		      dec	LM_LogoFadeState	; dec fade in state
    141  f067		       a9 14		      lda	#LOGO_FADE_DELAY
    142  f069		       85 81		      sta	LM_LogoFadeDelay	; restore fade in delay
    143  f06b				   .LM_FadeDone
    144  f06b
    145  f06b				   .LM_SetColor 		; set correct colors
    146  f06b		       a4 80		      ldy	LM_LogoFadeState	; set Y = index of logo color
    147  f06d		       ad 82 02 	      lda	SWCHB	; load console switches
    148  f070		       29 08		      and	#BW_MASK	; check if black & white
    149  f072		       f0 0c		      beq	.LM_BWMode
    150  f074				   .LM_ColorMode
    151  f074		       a9 38		      lda	#LOGO_BK_COLOR
    152  f076		       85 09		      sta	COLUBK	; set background color
    153  f078		       b9 d6 f2 	      lda	LM_LogoFade_Color,Y
    154  f07b		       85 08		      sta	COLUPF	; set logo color
    155  f07d		       4c 89 f0 	      jmp	.LM_SetColorDone
    156  f080				   .LM_BWMode
    157  f080		       a9 06		      lda	#LOGO_BK_BW
    158  f082		       85 09		      sta	COLUBK	; set background color
    159  f084		       b9 db f2 	      lda	LM_LogoFade_BW,Y
    160  f087		       85 08		      sta	COLUPF	; set logo color
    161  f089				   .LM_SetColorDone
    162  f089
    163  f089				   .LM_VBLankWait
    164  f089		       ae 84 02 	      ldx	INTIM
    165  f08c		       d0 fb		      bne	.LM_VBLankWait	; wait until timer is done
    166  f08e		       a9 00		      lda	#0
    167  f090		       85 02		      sta	WSYNC	; get a fresh scanline
    168  f092							; -------------------------
    169  f092		       85 01		      sta	VBLANK	; turn off VBLANK
    170  f094
    171  f094							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    172  f094							;; Playfield - 192 scanlines - 14592 mc
    173  f094							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    174  f094
    175  f094				   .LM_Top		; waste 68 scanlines
    176  f094		       a2 44		      ldx	#68
      0  f096					      WAIT_X_WSYNC
      1  f096				   .WaitX
      2  f096		       85 02		      sta	WSYNC
      3  f098		       ca		      dex
      4  f099		       d0 fb		      bne	.WaitX
    178  f09b							; -------------------------
    179  f09b
    180  f09b				   .LM_Middle		; logo is a total of 36 scanlines
    181  f09b		       a0 00		      ldy	#0	; Y = index to playfield bytes
    182  f09d				   .LM_LoopY
    183  f09d		       a2 04		      ldx	#4	; draw every logo line 4 scanlines
    184  f09f				   .LM_LoopX
    185  f09f		       85 02		      sta	WSYNC	; get fresh scanline
    186  f0a1							; -------------------------
    187  f0a1		       b9 a0 f2 	      lda	LM_LogoPF0,Y
    188  f0a4		       85 0d		      sta	PF0	; set first part of left playfield
    189  f0a6		       b9 b2 f2 	      lda	LM_LogoPF1,Y
    190  f0a9		       85 0e		      sta	PF1	; set second part of left playfield
    191  f0ab		       b9 c4 f2 	      lda	LM_LogoPF2,Y
    192  f0ae		       85 0f		      sta	PF2	; set third part of left playfield
    193  f0b0		       c8		      iny		; inc Y to get the right playfield bytes
    194  f0b1		       b9 a0 f2 	      lda	LM_LogoPF0,Y
    195  f0b4		       85 0d		      sta	PF0	; set first part of right playfield
    196  f0b6		       b9 b2 f2 	      lda	LM_LogoPF1,Y
    197  f0b9		       85 0e		      sta	PF1	; set second part of right playfield
    198  f0bb		       b9 c4 f2 	      lda	LM_LogoPF2,Y
    199  f0be		       88		      dey		; dec Y to bea able to repeat left/right for 4 lines
    200  f0bf		       ea		      nop		; just for timing
    201  f0c0		       85 0f		      sta	PF2	; set third part of right playfield
    202  f0c2
    203  f0c2		       ca		      dex
    204  f0c3		       d0 da		      bne	.LM_LoopX	; loop while we havn't drawn 4 scanlines
    205  f0c5		       c8		      iny
    206  f0c6		       c8		      iny		; inc y by 2 to get to the next playfield byte pairs
    207  f0c7		       c0 12		      cpy	#18	; all bytes drawn?
    208  f0c9		       d0 d2		      bne	.LM_LoopY	; loop until all logo bytes are drawn
    209  f0cb
    210  f0cb				   .LM_TurnOffLogo		; use 1 scanline to turn off logo
    211  f0cb		       a5 02		      lda	WSYNC	; get a fresh scanline
    212  f0cd							; -------------------------
    213  f0cd		       a9 00		      lda	#0
    214  f0cf		       85 0d		      sta	PF0	; reset playfield graphics
    215  f0d1		       85 0e		      sta	PF1
    216  f0d3		       85 0f		      sta	PF2
    217  f0d5
    218  f0d5				   .LM_Bottom
    219  f0d5		       a2 57		      ldx	#87	; waste remaining 87 scanlines
      0  f0d7					      WAIT_X_WSYNC
      1  f0d7				   .WaitX
      2  f0d7		       85 02		      sta	WSYNC
      3  f0d9		       ca		      dex
      4  f0da		       d0 fb		      bne	.WaitX
    221  f0dc							; -------------------------
    222  f0dc
    223  f0dc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    224  f0dc							;; Overscan - 30 scanlines - 2280 mc
    225  f0dc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    226  f0dc		       a9 02		      lda	#2	; A = 2 = #%00000010
    227  f0de		       85 01		      sta	VBLANK	; Turn on VBLANK
    228  f0e0		       a9 23		      lda	#TIMER_OVERSCAN
    229  f0e2		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    230  f0e5
    231  f0e5				   .LM_CheckReset
    232  f0e5		       ad 82 02 	      lda	SWCHB	; load console switches
    233  f0e8		       29 01		      and	#RESET_MASK
    234  f0ea		       d0 03		      bne	.LM_NoReset
    235  f0ec		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    236  f0ef				   .LM_NoReset
    237  f0ef
    238  f0ef				   .LM_CheckLeftButton
    239  f0ef		       a5 0c		      lda	INPT4	; load left joystick button
    240  f0f1		       29 80		      and	#LEFT_BTN_MASK
    241  f0f3		       d0 05		      bne	.LM_NoLeftButton
    242  f0f5		       85 02		      sta	WSYNC
    243  f0f7		       4c 04 f1 	      jmp	GM_NextFrame	; start game if button is pressed
    244  f0fa				   .LM_NoLeftButton
    245  f0fa
    246  f0fa				   .LM_OverscanWait
    247  f0fa		       ae 84 02 	      ldx	INTIM
    248  f0fd		       d0 fb		      bne	.LM_OverscanWait	; wait until timer is done
    249  f0ff		       85 02		      sta	WSYNC
    250  f101							; -------------------------
    251  f101		       4c 4d f0 	      jmp	LM_NextFrame
    252  f104
    253  f104
    254  f104							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    255  f104							;; GAME MODE - GM
    256  f104							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    257  f104				   GM_NextFrame
      0  f104					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f104		       a9 0e		      lda	#%1110
      2  f106		       85 02	   .VSLP1     sta	WSYNC
      3  f108		       85 00		      sta	VSYNC
      4  f10a		       4a		      lsr
      5  f10b		       d0 f9		      bne	.VSLP1
    259  f10d
    260  f10d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    261  f10d							;; Vertical Blank - 37 scanlines - 2812 mc
    262  f10d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    263  f10d		       a9 2b		      lda	#TIMER_VBLANK
    264  f10f		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    265  f112
    266  f112		       a5 88		      lda	GM_PlayerXPos	; load player x pos
    267  f114		       a0 00		      ldy	#0	; set Y = 0 for player 0
    268  f116		       20 8c f2 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    269  f119
    270  f119		       a5 92		      lda	GM_BugXPos	; load bug x pos
    271  f11b		       a0 01		      ldy	#1	; set Y = 1 for player 1
    272  f11d		       20 8c f2 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    273  f120
    274  f120		       85 02		      sta	WSYNC	; geta fresh scanline
    275  f122							; -------------------------
    276  f122		       85 2a		      sta	HMOVE	; apply positions offset
    277  f124
    278  f124				   .GM_SetColor 		; set correct colors
    279  f124		       ad 82 02 	      lda	SWCHB
    280  f127		       25 08		      and	BW_MASK
    281  f129		       f0 27		      beq	.GM_BWMode
    282  f12b				   .GM_ColorMode
    283  f12b		       a9 78		      lda	#GAME_SKY_COLOR
    284  f12d		       85 83		      sta	GM_SkyColor
    285  f12f		       a9 c8		      lda	#GAME_BK_COLOR
    286  f131		       85 82		      sta	GM_BackgroundColor
    287  f133		       a9 c0		      lda	#GAME_PF_COLOR
    288  f135		       85 08		      sta	COLUPF
      0  f137					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f137				   .POINTER   SET	GM_PlayerColorPtr
      2  f137				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f137
      4  f137		       a9 81		      LDA	#<.ADDRESS
      5  f139		       85 86		      STA	.POINTER
      6  f13b		       a9 f3		      LDA	#>.ADDRESS
      7  f13d		       85 87		      STA	.POINTER+1
      8  f13f
      0  f13f					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f13f				   .POINTER   SET	GM_BugColorPtr
      2  f13f				   .ADDRESS   SET	GM_BUG_COLOR
      3  f13f
      4  f13f		       a9 b7		      LDA	#<.ADDRESS
      5  f141		       85 90		      STA	.POINTER
      6  f143		       a9 f3		      LDA	#>.ADDRESS
      7  f145		       85 91		      STA	.POINTER+1
      8  f147
      0  f147					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_COLOR
      1  f147				   .POINTER   SET	GM_BirdColorPtr
      2  f147				   .ADDRESS   SET	GM_BIRD_COLOR
      3  f147
      4  f147		       a9 c9		      LDA	#<.ADDRESS
      5  f149		       85 8c		      STA	.POINTER
      6  f14b		       a9 f3		      LDA	#>.ADDRESS
      7  f14d		       85 8d		      STA	.POINTER+1
      8  f14f
    292  f14f		       4c 76 f1 	      jmp	.GM_SetColorDone
    293  f152				   .GM_BWMode
    294  f152		       a9 06		      lda	#GAME_SKY_BW
    295  f154		       85 83		      sta	GM_SkyColor
    296  f156		       a9 08		      lda	#GAME_BK_BW
    297  f158		       85 82		      sta	GM_BackgroundColor
    298  f15a		       a9 02		      lda	#GAME_PF_BW
    299  f15c		       85 08		      sta	COLUPF
      0  f15e					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_BW_IDLE
      1  f15e				   .POINTER   SET	GM_PlayerColorPtr
      2  f15e				   .ADDRESS   SET	GM_PLAYER_BW_IDLE
      3  f15e
      4  f15e		       a9 9c		      LDA	#<.ADDRESS
      5  f160		       85 86		      STA	.POINTER
      6  f162		       a9 f3		      LDA	#>.ADDRESS
      7  f164		       85 87		      STA	.POINTER+1
      8  f166
      0  f166					      SET_POINTER	GM_BugColorPtr, GM_BUG_BW
      1  f166				   .POINTER   SET	GM_BugColorPtr
      2  f166				   .ADDRESS   SET	GM_BUG_BW
      3  f166
      4  f166		       a9 c0		      LDA	#<.ADDRESS
      5  f168		       85 90		      STA	.POINTER
      6  f16a		       a9 f3		      LDA	#>.ADDRESS
      7  f16c		       85 91		      STA	.POINTER+1
      8  f16e
      0  f16e					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_BW
      1  f16e				   .POINTER   SET	GM_BirdColorPtr
      2  f16e				   .ADDRESS   SET	GM_BIRD_BW
      3  f16e
      4  f16e		       a9 d2		      LDA	#<.ADDRESS
      5  f170		       85 8c		      STA	.POINTER
      6  f172		       a9 f3		      LDA	#>.ADDRESS
      7  f174		       85 8d		      STA	.POINTER+1
      8  f176
    303  f176				   .GM_SetColorDone
    304  f176		       a9 00		      lda	#GAME_SCOREBOARD_COLOR
    305  f178		       85 09		      sta	COLUBK
    306  f17a
    307  f17a				   .GM_SetGraphics
    308  f17a		       ad 82 02 	      lda	SWCHB
    309  f17d		       29 40		      and	#%01000000
    310  f17f		       f0 0b		      beq	.GM_SetDress
    311  f181				   .GM_SetPants
      0  f181					      SET_POINTER	GM_PlayerPtr, GM_PANTS_IDLE
      1  f181				   .POINTER   SET	GM_PlayerPtr
      2  f181				   .ADDRESS   SET	GM_PANTS_IDLE
      3  f181
      4  f181		       a9 4b		      LDA	#<.ADDRESS
      5  f183		       85 84		      STA	.POINTER
      6  f185		       a9 f3		      LDA	#>.ADDRESS
      7  f187		       85 85		      STA	.POINTER+1
      8  f189
    313  f189		       4c 94 f1 	      jmp	.GM_SetGraphicsDone
    314  f18c				   .GM_SetDress
      0  f18c					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f18c				   .POINTER   SET	GM_PlayerPtr
      2  f18c				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f18c
      4  f18c		       a9 30		      LDA	#<.ADDRESS
      5  f18e		       85 84		      STA	.POINTER
      6  f190		       a9 f3		      LDA	#>.ADDRESS
      7  f192		       85 85		      STA	.POINTER+1
      8  f194
    316  f194				   .GM_SetGraphicsDone
    317  f194
    318  f194				   .GM_CheckCollisions
    319  f194		       a5 07		      lda	CXPPMM
    320  f196		       29 80		      and	#%10000000
    321  f198		       f0 03		      beq	.GM_CheckCollisionsDone
    322  f19a		       20 69 f2 	      jsr	PlaceBug
    323  f19d				   .GM_CheckCollisionsDone
    324  f19d		       85 2c		      sta	CXCLR
    325  f19f
    326  f19f				   .GM_PlayfieldInit
    327  f19f		       a9 47		      lda	#71
    328  f1a1		       85 95		      sta	PFCounter	; 144/2 scanelines
    329  f1a3
    330  f1a3				   .GM_VBLankWait
    331  f1a3		       ae 84 02 	      ldx	INTIM
    332  f1a6		       d0 fb		      bne	.GM_VBLankWait	; wait until timer is done
    333  f1a8		       a9 00		      lda	#0
    334  f1aa		       85 02		      sta	WSYNC	; get a fresh scanline
    335  f1ac							; -------------------------
    336  f1ac		       85 01		      sta	VBLANK	; turn off VBLANK
    337  f1ae
    338  f1ae							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    339  f1ae							;; Score Board - 20 scanlines - 1520 mc
    340  f1ae							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    341  f1ae		       a9 17		      lda	#23
    342  f1b0		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    343  f1b3
    344  f1b3				   .GM_ScoreBoardWait
    345  f1b3		       ae 84 02 	      ldx	INTIM
    346  f1b6		       d0 fb		      bne	.GM_ScoreBoardWait	; wait until timer is done
    347  f1b8		       85 02		      sta	WSYNC	; get a fresh scanline
    348  f1ba							; -------------------------
    349  f1ba
    350  f1ba							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    351  f1ba							;; Sky - 30 scanlines - 1520 mc
    352  f1ba							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    353  f1ba		       a5 83		      lda	GM_SkyColor
    354  f1bc		       85 09		      sta	COLUBK
    355  f1be		       a2 0f		      ldx	#15
    356  f1c0		       a9 00		      lda	#0
    357  f1c2		       85 25		      sta	VDELP0	; clear vertical delay för player 0
    358  f1c4
    359  f1c4		       a5 8f		      lda	GM_BirdReflection
    360  f1c6		       85 0b		      sta	REFP0
    361  f1c8
    362  f1c8				   .GM_SkyLoop
    363  f1c8
    364  f1c8				   .GM_DrawBird
    365  f1c8		       8a		      txa		; transfer X to A
    366  f1c9		       38		      sec		; make sure carry flag is set
    367  f1ca		       e5 8e		      sbc	GM_BirdYPos	; subtract sprite Y coordinate
    368  f1cc		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    369  f1ce		       90 02		      bcc	.GM_WriteBird	; if result < SpriteHeight, call subroutine
    370  f1d0		       a9 00		      lda	#0	; else, set index to 0
    371  f1d2				   .GM_WriteBird
    372  f1d2		       a8		      tay
    373  f1d3		       b1 8a		      lda	(GM_BirdPtr),Y	; load player bitmap slice of data
    374  f1d5		       85 02		      sta	WSYNC	; wait for next scanline
    375  f1d7							; -------------------------
    376  f1d7		       85 1b		      sta	GRP0	; set graphics for player 0 slice
    377  f1d9		       b1 8c		      lda	(GM_BirdColorPtr),Y	; load player color from lookup table
    378  f1db		       85 06		      sta	COLUP0	; set color for player 1 slice
    379  f1dd				   .GM_DrawBirdDone
    380  f1dd		       85 02		      sta	WSYNC	; wait for next scanline
    381  f1df							; -------------------------
    382  f1df		       ca		      dex
    383  f1e0		       d0 e6		      bne	.GM_SkyLoop
    384  f1e2
    385  f1e2
    386  f1e2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    387  f1e2							;; Playfield - 152 scanlines - 11552 mc
    388  f1e2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    389  f1e2		       a5 82		      lda	GM_BackgroundColor
    390  f1e4		       85 09		      sta	COLUBK
    391  f1e6		       a9 01		      lda	#1
    392  f1e8		       85 25		      sta	VDELP0	; set vertical delay för player 0
    393  f1ea		       a9 00		      lda	#0
    394  f1ec		       85 0b		      sta	REFP0
    395  f1ee
    396  f1ee				   .GM_PlayfieldLoop
    397  f1ee
    398  f1ee				   .GM_DrawPlayer
    399  f1ee		       a5 95		      lda	PFCounter	; A = current scanline in playfield
    400  f1f0		       38		      sec		; make sure carry flag is set
    401  f1f1		       e5 89		      sbc	GM_PlayerYPos	; subtract sprite Y coordinate
    402  f1f3		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    403  f1f5		       90 02		      bcc	.GM_WritePlayer	; if result < height then A contains the index
    404  f1f7		       a9 00		      lda	#0	; else, set A to 0
    405  f1f9				   .GM_WritePlayer
    406  f1f9		       a8		      tay
    407  f1fa		       b1 84		      lda	(GM_PlayerPtr),Y	; load player bitmap slice of data
    408  f1fc		       85 1b		      sta	GRP0	; set graphics for player 0 slice - delayed
    409  f1fe		       b1 86		      lda	(GM_PlayerColorPtr),Y	; load player color from lookup table
    410  f200		       aa		      tax
    411  f201				   .GM_DrawPlayerDone
    412  f201
    413  f201				   .GM_DrawBug
    414  f201		       a5 95		      lda	PFCounter	; transfer X to A
    415  f203		       38		      sec		; make sure carry flag is set
    416  f204		       e5 93		      sbc	GM_BugYPos	; subtract sprite Y coordinate
    417  f206		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    418  f208		       90 02		      bcc	.GM_WriteBug	; if result < SpriteHeight, call subroutine
    419  f20a		       a9 00		      lda	#0	; else, set index to 0
    420  f20c				   .GM_WriteBug
    421  f20c		       a8		      tay
    422  f20d		       b9 66 f3 	      lda	GM_BUG,Y	; load player bitmap slice of data
    423  f210		       85 02		      sta	WSYNC	; wait for next scanline
    424  f212							; -------------------------
    425  f212		       85 1c		      sta	GRP1	; set graphics for player 1 + 0 slice
    426  f214		       86 06		      stx	COLUP0	; set color for player 0 slice
    427  f216		       b1 90		      lda	(GM_BugColorPtr),Y	; load player color from lookup table
    428  f218		       85 07		      sta	COLUP1	; set color for player 1 slice
    429  f21a				   .GM_DrawBugDone
    430  f21a
    431  f21a		       85 02		      sta	WSYNC	; wait for end of second scanline
    432  f21c							; -------------------------
    433  f21c		       c6 95		      dec	PFCounter
    434  f21e		       d0 ce		      bne	.GM_PlayfieldLoop	; repeat next scanline until finished
    435  f220
    436  f220							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    437  f220							;; Overscan - 30 scanlines - 2280 mc
    438  f220							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    439  f220		       a9 02		      lda	#2	; A = 2 = #%00000010
    440  f222		       85 01		      sta	VBLANK	; Turn on VBLANK
    441  f224		       a9 23		      lda	#TIMER_OVERSCAN
    442  f226		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    443  f229
    444  f229				   .GM_CheckReset
    445  f229		       ad 82 02 	      lda	SWCHB	; load console switches
    446  f22c		       29 01		      and	#RESET_MASK
    447  f22e		       d0 03		      bne	.GM_NoReset
    448  f230		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    449  f233				   .GM_NoReset
    450  f233
    451  f233				   .GM_CheckInputUp
    452  f233		       a9 10		      lda	#%00010000
    453  f235		       2c 80 02 	      bit	SWCHA
    454  f238		       d0 02		      bne	.GM_CheckInputDown
    455  f23a		       e6 89		      inc	GM_PlayerYPos
    456  f23c
    457  f23c				   .GM_CheckInputDown
    458  f23c		       a9 20		      lda	#%00100000
    459  f23e		       2c 80 02 	      bit	SWCHA
    460  f241		       d0 02		      bne	.GM_CheckInputLeft
    461  f243		       c6 89		      dec	GM_PlayerYPos
    462  f245
    463  f245				   .GM_CheckInputLeft
    464  f245		       a9 40		      lda	#%01000000
    465  f247		       2c 80 02 	      bit	SWCHA
    466  f24a		       d0 06		      bne	.GM_CheckInputRight
    467  f24c		       a9 08		      lda	#%00001000
    468  f24e		       85 8f		      sta	GM_BirdReflection
    469  f250		       c6 88		      dec	GM_PlayerXPos
    470  f252
    471  f252				   .GM_CheckInputRight
    472  f252		       a9 80		      lda	#%10000000
    473  f254		       2c 80 02 	      bit	SWCHA
    474  f257		       d0 06		      bne	.GM_CheckInputDone
    475  f259		       a9 00		      lda	#0
    476  f25b		       85 8f		      sta	GM_BirdReflection
    477  f25d		       e6 88		      inc	GM_PlayerXPos
    478  f25f
    479  f25f				   .GM_CheckInputDone
    480  f25f
    481  f25f				   .GM_OverscanWait
    482  f25f		       ae 84 02 	      ldx	INTIM
    483  f262		       d0 fb		      bne	.GM_OverscanWait	; wait until timer is done
    484  f264		       85 02		      sta	WSYNC
    485  f266							; -------------------------
    486  f266		       4c 04 f1 	      jmp	GM_NextFrame
    487  f269
    488  f269							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    489  f269							;; Subruotines
    490  f269							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    491  f269
    492  f269				   PlaceBug   subroutine
    493  f269		       20 7c f2 	      jsr	Randomize
    494  f26c		       a5 96		      lda	Random
    495  f26e		       29 7f		      and	#%01111111
    496  f270		       85 92		      sta	GM_BugXPos
    497  f272		       20 7c f2 	      jsr	Randomize
    498  f275		       a5 96		      lda	Random
    499  f277		       29 3f		      and	#%00111111
    500  f279		       85 93		      sta	GM_BugYPos
    501  f27b		       60		      rts
    502  f27c
    503  f27c				   Randomize  subroutine
    504  f27c		       a5 96		      lda	Random
    505  f27e		       0a		      asl
    506  f27f		       45 96		      eor	Random
    507  f281		       0a		      asl
    508  f282		       45 96		      eor	Random
    509  f284		       0a		      asl
    510  f285		       0a		      asl
    511  f286		       45 96		      eor	Random
    512  f288		       0a		      asl
    513  f289		       26 96		      rol	Random	; performs a series of shifts and bit operations
    514  f28b		       60		      rts
    515  f28c
    516  f28c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    517  f28c							;; SetObjectXPos
    518  f28c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    519  f28c							;; A : Contains the the desired x-coordinate
    520  f28c							;; Y=0 : Player0
    521  f28c							;; Y=1 : Player1
    522  f28c							;; Y=2 : Missile0
    523  f28c							;; Y=3 : Missile1
    524  f28c							;; Y=4 : Ball
    525  f28c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    526  f28c
    527  f28c				   SetObjectXPos subroutine
    528  f28c		       38		      sec		; Set carry flag
    529  f28d		       85 02		      sta	WSYNC	; Get fresh scanline
    530  f28f							; -------------------------
    531  f28f				   .Div15Loop		; Divide A with 15 by subtraction in loop
    532  f28f		       e9 0f		      sbc	#15	; Subtract 15 from A
    533  f291		       b0 fc		      bcs	.Div15Loop	; Loop if carry flag is set
    534  f293		       49 07		      eor	#7	; Adjust the remainder in A between -8 and 7
    535  f295					      REPEAT	4	; Repeat 4 times
    536  f295		       0a		      asl		; Shift bits left by one
    535  f295					      REPEND		; End of repeat
    536  f296		       0a		      asl		; Shift bits left by one
    535  f296					      REPEND		; End of repeat
    536  f297		       0a		      asl		; Shift bits left by one
    535  f297					      REPEND		; End of repeat
    536  f298		       0a		      asl		; Shift bits left by one
    537  f299					      REPEND		; End of repeat
    538  f299		       99 20 00 	      sta	HMP0,Y	; Set fine position value for object HMP0+Y
    539  f29c		       99 10 00 	      sta	RESP0,Y	; Seset rough position for object HMP0+Y
    540  f29f		       60		      rts
    541  f2a0
    542  f2a0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    543  f2a0							;; Lookup tabes
    544  f2a0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    545  f2a0
    546  f2a0							; https://www.masswerk.at/vcs-tools/TinyPlayfieldEditor/
    547  f2a0							; mode: asymmetric repeat line-height 4
    548  f2a0				   LM_LogoPF0
    549  f2a0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$90
    550  f2a8		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$40,$00,$40
    551  f2b0		       00 70		      .byte.b	$00,$70
    552  f2b2				   LM_LogoPF1
    553  f2b2		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$00,$05,$DE
    554  f2ba		       0a 42 0a 4e*	      .byte.b	$0A,$42,$0A,$4E,$08,$52,$08,$56
    555  f2c2		       38 7b		      .byte.b	$38,$7B
    556  f2c4				   LM_LogoPF2
    557  f2c4		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$80,$00,$F8,$00
    558  f2cc		       a5 00 a5 00*	      .byte.b	$A5,$00,$A5,$00,$BF,$00,$85,$00
    559  f2d4		       39 03		      .byte.b	$39,$03
    560  f2d6
    561  f2d6				   LM_LogoFade_Color
    562  f2d6		       0e 3e 3c 3a*	      .byte.b	$0E,$3E,$3C,$3A,$38
    563  f2db
    564  f2db				   LM_LogoFade_BW
    565  f2db		       0e 0c 0a 08*	      .byte.b	$0E,$0C,$0A,$08,$06
    566  f2e0
    567  f2e0				   Digits
    568  f2e0		       77		      .byte.b	%01110111	; ### ###
    569  f2e1		       55		      .byte.b	%01010101	; # # # #
    570  f2e2		       55		      .byte.b	%01010101	; # # # #
    571  f2e3		       55		      .byte.b	%01010101	; # # # #
    572  f2e4		       77		      .byte.b	%01110111	; ### ###
    573  f2e5
    574  f2e5		       11		      .byte.b	%00010001	;   #	 #
    575  f2e6		       11		      .byte.b	%00010001	;   #	 #
    576  f2e7		       11		      .byte.b	%00010001	;   #	 #
    577  f2e8		       11		      .byte.b	%00010001	;   #	 #
    578  f2e9		       11		      .byte.b	%00010001	;   #	 #
    579  f2ea
    580  f2ea		       77		      .byte.b	%01110111	; ### ###
    581  f2eb		       11		      .byte.b	%00010001	;   #	 #
    582  f2ec		       77		      .byte.b	%01110111	; ### ###
    583  f2ed		       44		      .byte.b	%01000100	; #   #
    584  f2ee		       77		      .byte.b	%01110111	; ### ###
    585  f2ef
    586  f2ef		       77		      .byte.b	%01110111	; ### ###
    587  f2f0		       11		      .byte.b	%00010001	;   #	 #
    588  f2f1		       33		      .byte.b	%00110011	;  ##	##
    589  f2f2		       11		      .byte.b	%00010001	;   #	 #
    590  f2f3		       77		      .byte.b	%01110111	; ### ###
    591  f2f4
    592  f2f4		       55		      .byte.b	%01010101	; # # # #
    593  f2f5		       55		      .byte.b	%01010101	; # # # #
    594  f2f6		       77		      .byte.b	%01110111	; ### ###
    595  f2f7		       11		      .byte.b	%00010001	;   #	 #
    596  f2f8		       11		      .byte.b	%00010001	;   #	 #
    597  f2f9
    598  f2f9		       77		      .byte.b	%01110111	; ### ###
    599  f2fa		       44		      .byte.b	%01000100	; #   #
    600  f2fb		       77		      .byte.b	%01110111	; ### ###
    601  f2fc		       11		      .byte.b	%00010001	;   #	 #
    602  f2fd		       77		      .byte.b	%01110111	; ### ###
    603  f2fe
    604  f2fe		       77		      .byte.b	%01110111	; ### ###
    605  f2ff		       44		      .byte.b	%01000100	; #   #
    606  f300		       77		      .byte.b	%01110111	; ### ###
    607  f301		       55		      .byte.b	%01010101	; # # # #
    608  f302		       77		      .byte.b	%01110111	; ### ###
    609  f303
    610  f303		       77		      .byte.b	%01110111	; ### ###
    611  f304		       11		      .byte.b	%00010001	;   #	 #
    612  f305		       11		      .byte.b	%00010001	;   #	 #
    613  f306		       11		      .byte.b	%00010001	;   #	 #
    614  f307		       11		      .byte.b	%00010001	;   #	 #
    615  f308
    616  f308		       77		      .byte.b	%01110111	; ### ###
    617  f309		       55		      .byte.b	%01010101	; # # # #
    618  f30a		       77		      .byte.b	%01110111	; ### ###
    619  f30b		       55		      .byte.b	%01010101	; # # # #
    620  f30c		       77		      .byte.b	%01110111	; ### ###
    621  f30d
    622  f30d		       77		      .byte.b	%01110111	; ### ###
    623  f30e		       55		      .byte.b	%01010101	; # # # #
    624  f30f		       77		      .byte.b	%01110111	; ### ###
    625  f310		       11		      .byte.b	%00010001	;   #	 #
    626  f311		       77		      .byte.b	%01110111	; ### ###
    627  f312
    628  f312		       22		      .byte.b	%00100010	;  #	#
    629  f313		       55		      .byte.b	%01010101	; # # # #
    630  f314		       77		      .byte.b	%01110111	; ### ###
    631  f315		       55		      .byte.b	%01010101	; # # # #
    632  f316		       55		      .byte.b	%01010101	; # # # #
    633  f317
    634  f317		       77		      .byte.b	%01110111	; ### ###
    635  f318		       55		      .byte.b	%01010101	; # # # #
    636  f319		       66		      .byte.b	%01100110	; ##  ##
    637  f31a		       55		      .byte.b	%01010101	; # # # #
    638  f31b		       77		      .byte.b	%01110111	; ### ###
    639  f31c
    640  f31c		       77		      .byte.b	%01110111	; ### ###
    641  f31d		       44		      .byte.b	%01000100	; #   #
    642  f31e		       44		      .byte.b	%01000100	; #   #
    643  f31f		       44		      .byte.b	%01000100	; #   #
    644  f320		       77		      .byte.b	%01110111	; ### ###
    645  f321
    646  f321		       66		      .byte.b	%01100110	; ##  ##
    647  f322		       55		      .byte.b	%01010101	; # # # #
    648  f323		       55		      .byte.b	%01010101	; # # # #
    649  f324		       55		      .byte.b	%01010101	; # # # #
    650  f325		       66		      .byte.b	%01100110	; ##  ##
    651  f326
    652  f326		       77		      .byte.b	%01110111	; ### ###
    653  f327		       44		      .byte.b	%01000100	; #   #
    654  f328		       77		      .byte.b	%01110111	; ### ###
    655  f329		       44		      .byte.b	%01000100	; #   #
    656  f32a		       77		      .byte.b	%01110111	; ### ###
    657  f32b
    658  f32b		       77		      .byte.b	%01110111	; ### ###
    659  f32c		       44		      .byte.b	%01000100	; #   #
    660  f32d		       66		      .byte.b	%01100110	; ##  ##
    661  f32e		       44		      .byte.b	%01000100	; #   #
    662  f32f		       44		      .byte.b	%01000100	; #   #
    663  f330
    664  f330							;---Graphics Data from PlayerPal 2600---
    665  f330
    666  f330				   GM_DRESS_IDLE
    667  f330		       00		      .byte.b	#0
    668  f331		       7e		      .byte.b	#%01111110	;$70
    669  f332		       7e		      .byte.b	#%01111110	;$70
    670  f333		       3c		      .byte.b	#%00111100	;$70
    671  f334		       5a		      .byte.b	#%01011010	;$84
    672  f335		       7e		      .byte.b	#%01111110	;$84
    673  f336		       18		      .byte.b	#%00011000	;$F4
    674  f337		       3c		      .byte.b	#%00111100	;$00
    675  f338		       18		      .byte.b	#%00011000	;$00
    676  f339				   GM_DRESS_WALK1
    677  f339		       00		      .byte.b	#0
    678  f33a		       78		      .byte.b	#%01111000	;$70
    679  f33b		       7e		      .byte.b	#%01111110	;$70
    680  f33c		       3c		      .byte.b	#%00111100	;$70
    681  f33d		       1a		      .byte.b	#%00011010	;$84
    682  f33e		       7e		      .byte.b	#%01111110	;$84
    683  f33f		       18		      .byte.b	#%00011000	;$F4
    684  f340		       3c		      .byte.b	#%00111100	;$00
    685  f341		       18		      .byte.b	#%00011000	;$00
    686  f342				   GM_DRESS_WALK2
    687  f342		       00		      .byte.b	#0
    688  f343		       1e		      .byte.b	#%00011110	;$70
    689  f344		       7e		      .byte.b	#%01111110	;$70
    690  f345		       3c		      .byte.b	#%00111100	;$70
    691  f346		       58		      .byte.b	#%01011000	;$84
    692  f347		       7e		      .byte.b	#%01111110	;$84
    693  f348		       18		      .byte.b	#%00011000	;$F4
    694  f349		       3c		      .byte.b	#%00111100	;$00
    695  f34a		       18		      .byte.b	#%00011000	;$00
    696  f34b				   GM_PANTS_IDLE
    697  f34b		       00		      .byte.b	#0
    698  f34c		       66		      .byte.b	#%01100110	;$70
    699  f34d		       24		      .byte.b	#%00100100	;$70
    700  f34e		       3c		      .byte.b	#%00111100	;$70
    701  f34f		       5a		      .byte.b	#%01011010	;$84
    702  f350		       7e		      .byte.b	#%01111110	;$84
    703  f351		       18		      .byte.b	#%00011000	;$F4
    704  f352		       3c		      .byte.b	#%00111100	;$00
    705  f353		       18		      .byte.b	#%00011000	;$00
    706  f354				   GM_PANTS_WALK1
    707  f354		       00		      .byte.b	#0
    708  f355		       60		      .byte.b	#%01100000	;$70
    709  f356		       26		      .byte.b	#%00100110	;$70
    710  f357		       3c		      .byte.b	#%00111100	;$70
    711  f358		       1a		      .byte.b	#%00011010	;$84
    712  f359		       7e		      .byte.b	#%01111110	;$84
    713  f35a		       18		      .byte.b	#%00011000	;$F4
    714  f35b		       3c		      .byte.b	#%00111100	;$00
    715  f35c		       18		      .byte.b	#%00011000	;$00
    716  f35d				   GM_PANTS_WALK2
    717  f35d		       00		      .byte.b	#0
    718  f35e		       06		      .byte.b	#%00000110	;$70
    719  f35f		       64		      .byte.b	#%01100100	;$70
    720  f360		       3c		      .byte.b	#%00111100	;$70
    721  f361		       58		      .byte.b	#%01011000	;$84
    722  f362		       7e		      .byte.b	#%01111110	;$84
    723  f363		       18		      .byte.b	#%00011000	;$F4
    724  f364		       3c		      .byte.b	#%00111100	;$00
    725  f365		       18		      .byte.b	#%00011000	;$00
    726  f366				   GM_BUG
    727  f366		       00		      .byte.b	#0
    728  f367		       00		      .byte.b	#%00000000	;$00
    729  f368		       00		      .byte.b	#%00000000	;$00
    730  f369		       52		      .byte.b	#%01010010	;$F0
    731  f36a		       3c		      .byte.b	#%00111100	;$F0
    732  f36b		       3c		      .byte.b	#%00111100	;$F2
    733  f36c		       52		      .byte.b	#%01010010	;$F0
    734  f36d		       00		      .byte.b	#%00000000	;$00
    735  f36e		       00		      .byte.b	#%00000000	;$00
    736  f36f				   GM_BIRD_1
    737  f36f		       00		      .byte.b	#0
    738  f370		       00		      .byte.b	#%00000000	;$1C
    739  f371		       01		      .byte.b	#%00000001	;$1C
    740  f372		       3f		      .byte.b	#%00111111	;$0E
    741  f373		       fe		      .byte.b	#%11111110	;$0A
    742  f374		       18		      .byte.b	#%00011000	;$0E
    743  f375		       76		      .byte.b	#%01110110	;$0E
    744  f376		       00		      .byte.b	#%00000000	;$0E
    745  f377		       00		      .byte.b	#%00000000	;$0E
    746  f378				   GM_BIRD_2
    747  f378		       00		      .byte.b	#0
    748  f379		       00		      .byte.b	#%00000000	;$1C
    749  f37a		       01		      .byte.b	#%00000001	;$1C
    750  f37b		       3f		      .byte.b	#%00111111	;$0E
    751  f37c		       fe		      .byte.b	#%11111110	;$0A
    752  f37d		       f8		      .byte.b	#%11111000	;$0E
    753  f37e		       00		      .byte.b	#%00000000	;$0E
    754  f37f		       00		      .byte.b	#%00000000	;$0E
    755  f380		       00		      .byte.b	#%00000000	;$0E
    756  f381
    757  f381							;---End Graphics Data---
    758  f381
    759  f381
    760  f381							;---Color Data from PlayerPal 2600---
    761  f381				   GM_PLAYER_COLOR_IDLE
    762  f381		       00		      .byte.b	#0
    763  f382		       70		      .byte.b	#$70	;
    764  f383		       70		      .byte.b	#$70	;
    765  f384		       70		      .byte.b	#$70	;
    766  f385		       84		      .byte.b	#$84	;
    767  f386		       84		      .byte.b	#$84	;
    768  f387		       f4		      .byte.b	#$F4	;
    769  f388		       00		      .byte.b	#$00	;
    770  f389		       00		      .byte.b	#$00	;
    771  f38a				   GM_PLAYER_COLOR_WALK1
    772  f38a		       00		      .byte.b	#0
    773  f38b		       70		      .byte.b	#$70	;
    774  f38c		       70		      .byte.b	#$70	;
    775  f38d		       70		      .byte.b	#$70	;
    776  f38e		       84		      .byte.b	#$84	;
    777  f38f		       84		      .byte.b	#$84	;
    778  f390		       f4		      .byte.b	#$F4	;
    779  f391		       00		      .byte.b	#$00	;
    780  f392		       00		      .byte.b	#$00	;
    781  f393				   GM_PLAYER_COLOR_WALK2
    782  f393		       00		      .byte.b	#0
    783  f394		       70		      .byte.b	#$70	;
    784  f395		       70		      .byte.b	#$70	;
    785  f396		       70		      .byte.b	#$70	;
    786  f397		       84		      .byte.b	#$84	;
    787  f398		       84		      .byte.b	#$84	;
    788  f399		       f4		      .byte.b	#$F4	;
    789  f39a		       00		      .byte.b	#$00	;
    790  f39b		       00		      .byte.b	#$00	;
    791  f39c				   GM_PLAYER_BW_IDLE
    792  f39c		       00		      .byte.b	#0
    793  f39d		       00		      .byte.b	#$0	;
    794  f39e		       00		      .byte.b	#$0	;
    795  f39f		       00		      .byte.b	#$0	;
    796  f3a0		       02		      .byte.b	#$02	;
    797  f3a1		       02		      .byte.b	#$02	;
    798  f3a2		       04		      .byte.b	#$04	;
    799  f3a3		       00		      .byte.b	#$00	;
    800  f3a4		       00		      .byte.b	#$00	;
    801  f3a5				   GM_PLAYER_BW_WALK1
    802  f3a5		       00		      .byte.b	#0
    803  f3a6		       00		      .byte.b	#$0	;
    804  f3a7		       00		      .byte.b	#$0	;
    805  f3a8		       00		      .byte.b	#$0	;
    806  f3a9		       02		      .byte.b	#$02	;
    807  f3aa		       02		      .byte.b	#$02	;
    808  f3ab		       04		      .byte.b	#$04	;
    809  f3ac		       00		      .byte.b	#$00	;
    810  f3ad		       00		      .byte.b	#$00	;
    811  f3ae				   GM_PLAYER_BW_WALK2
    812  f3ae		       00		      .byte.b	#0
    813  f3af		       00		      .byte.b	#$0	;
    814  f3b0		       00		      .byte.b	#$0	;
    815  f3b1		       00		      .byte.b	#$0	;
    816  f3b2		       02		      .byte.b	#$02	;
    817  f3b3		       02		      .byte.b	#$02	;
    818  f3b4		       04		      .byte.b	#$04	;
    819  f3b5		       00		      .byte.b	#$00	;
    820  f3b6		       00		      .byte.b	#$00	;
    821  f3b7				   GM_BUG_COLOR
    822  f3b7		       00		      .byte.b	#0
    823  f3b8		       00		      .byte.b	#$00	;
    824  f3b9		       00		      .byte.b	#$00	;
    825  f3ba		       f0		      .byte.b	#$F0	;
    826  f3bb		       f0		      .byte.b	#$F0	;
    827  f3bc		       f2		      .byte.b	#$F2	;
    828  f3bd		       f0		      .byte.b	#$F0	;
    829  f3be		       00		      .byte.b	#$00	;
    830  f3bf		       00		      .byte.b	#$00	;
    831  f3c0				   GM_BUG_BW
    832  f3c0		       00		      .byte.b	#0
    833  f3c1		       00		      .byte.b	#$00	;
    834  f3c2		       00		      .byte.b	#$00	;
    835  f3c3		       00		      .byte.b	#$00	;
    836  f3c4		       00		      .byte.b	#$00	;
    837  f3c5		       02		      .byte.b	#$02	;
    838  f3c6		       00		      .byte.b	#$00	;
    839  f3c7		       00		      .byte.b	#$00	;
    840  f3c8		       00		      .byte.b	#$00	;
    841  f3c9				   GM_BIRD_COLOR
    842  f3c9		       00		      .byte.b	#0
    843  f3ca		       1c		      .byte.b	#$1C	;
    844  f3cb		       1c		      .byte.b	#$1C	;
    845  f3cc		       0e		      .byte.b	#$0E	;
    846  f3cd		       0a		      .byte.b	#$0A	;
    847  f3ce		       0e		      .byte.b	#$0E	;
    848  f3cf		       0e		      .byte.b	#$0E	;
    849  f3d0		       0e		      .byte.b	#$0E	;
    850  f3d1		       0e		      .byte.b	#$0E	;
    851  f3d2				   GM_BIRD_BW
    852  f3d2		       00		      .byte.b	#0
    853  f3d3		       0c		      .byte.b	#$0C	;
    854  f3d4		       0c		      .byte.b	#$0C	;
    855  f3d5		       0e		      .byte.b	#$0E	;
    856  f3d6		       0a		      .byte.b	#$0A	;
    857  f3d7		       0e		      .byte.b	#$0E	;
    858  f3d8		       0e		      .byte.b	#$0E	;
    859  f3d9		       0e		      .byte.b	#$0E	;
    860  f3da		       0e		      .byte.b	#$0E	;
    861  f3db
    862  f3db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    863  f3db							;; Fill the 4K ROM
    864  f3db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    865  fffc					      org	$FFFC	; insert two pointers at the end of ROM
    866  fffc		       00 f0		      .word.w	Reset	; reset vector
    867  fffe		       00 f0		      .word.w	Reset	; interrupt Vector
    868  10000
    869  10000
