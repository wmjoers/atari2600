------- FILE metria.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE metria.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE metria.asm
      5  0000 ????
      6  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  0000 ????						;; Macros
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????
     10  0000 ????				      MAC	wait_x_wsync
     11  0000 ????			   .WaitX
     12  0000 ????				      sta	WSYNC	; Wait for horizontal blank
     13  0000 ????				      dex		; X--
     14  0000 ????				      bne	.WaitX	; Loop until X = 0
     15  0000 ????				      ENDM
     16  0000 ????
     17  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     18  0000 ????						;; Contants
     19  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     20  0000 ????
     21  0000 ????	       00 08	   BW_MASK    =	%00001000	; bitmask for black & white switch
     22  0000 ????	       00 01	   RESET_MASK =	%00000001	; bitmask for reset switch
     23  0000 ????	       00 80	   LEFT_BTN_MASK =	%10000000	; bitmask for left joystick button
     24  0000 ????	       00 2b	   TIMER_VBLANK =	43	; value for TIM64T vertical blank timer
     25  0000 ????	       00 23	   TIMER_OVERSCAN =	35	; value for TIM64T overscan timer
     26  0000 ????
     27  0000 ????	       00 38	   LOGO_BK_COLOR =	$38	; logo mode background color - color mode
     28  0000 ????	       00 06	   LOGO_BK_BW =	$06	; logo mode background color - black & white
     29  0000 ????	       00 04	   LOGO_FADE_INIT_STATE =	4	; initial value for the logo fade in state
     30  0000 ????	       00 28	   LOGO_FADE_INIT_DELAY =	40	; initial delay value before logo fades in
     31  0000 ????	       00 14	   LOGO_FADE_DELAY =	20	; delay for each fade step - 20 frames/step
     32  0000 ????
     33  0000 ????	       00 c8	   GAME_BK_COLOR =	$C8	; game background color - color mode
     34  0000 ????	       00 08	   GAME_BK_BW =	$08	; game background color - black & white
     35  0000 ????	       00 c0	   GAME_PF_COLOR =	$C0	; game playfield color - color mode
     36  0000 ????	       00 02	   GAME_PF_BW =	$02	; game playfield color - black & white
     37  0000 ????
     38  0000 ????	       00 09	   GAME_PLAYER_HEIGHT =	9	; player sprite height
     39  0000 ????	       00 09	   GAME_BUG_HEIGHT =	9	; bug sprite height
     40  0000 ????
     41  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     42  0000 ????						;; RAM variables located outside ROM at address $0080
     43  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44  0000 ????
     45 U008e ????				      seg.u	variables
     46 U0080					      org	$80	; RAM address memory start
     47 U0080
     48 U0080		       00	   LM_LogoFadeState ds	1	; current logo fade state
     49 U0081		       00	   LM_LogoFadeDelay ds	1	; current logo fade delay
     50 U0082
     51 U0082		       00 00	   GM_PlayerPtr ds	2
     52 U0084		       00 00	   GM_PlayerColorPtr ds	2
     53 U0086		       00	   GM_PlayerXPos ds	1
     54 U0087		       00	   GM_PlayerYPos ds	1
     55 U0088
     56 U0088		       00 00	   GM_BugColorPtr ds	2
     57 U008a		       00	   GM_BugXPos ds	1
     58 U008b		       00	   GM_BugYPos ds	1
     59 U008c		       00	   GM_PlayfieldIdx ds	1
     60 U008d
     61 U008d		       00	   PFCounter  ds	1
     62 U008e
     63 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     64 U008e							;; Program start - Located at top of ROM at address $F000
     65 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     66 U008e
     67  10000 ????				       seg	code
     68  f000					      org	$F000	; start address of ROM
     69  f000
     70  f000				   Reset
      0  f000					      CLEAN_START		; set machine to known state on startup
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     72  f00a
     73  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     74  f00a							;; Init variables
     75  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     76  f00a
     77  f00a		       a9 04		      lda	#LOGO_FADE_INIT_STATE
     78  f00c		       85 80		      sta	LM_LogoFadeState	; initialize logo fade state
     79  f00e		       a9 28		      lda	#LOGO_FADE_INIT_DELAY
     80  f010		       85 81		      sta	LM_LogoFadeDelay	; initialize logo fade delay
     81  f012
      0  f012					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f012				   .POINTER   SET	GM_PlayerPtr
      2  f012				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f012
      4  f012		       a9 43		      LDA	#<.ADDRESS
      5  f014		       85 82		      STA	.POINTER
      6  f016		       a9 f2		      LDA	#>.ADDRESS
      7  f018		       85 83		      STA	.POINTER+1
      8  f01a
      0  f01a					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f01a				   .POINTER   SET	GM_PlayerColorPtr
      2  f01a				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f01a
      4  f01a		       a9 82		      LDA	#<.ADDRESS
      5  f01c		       85 84		      STA	.POINTER
      6  f01e		       a9 f2		      LDA	#>.ADDRESS
      7  f020		       85 85		      STA	.POINTER+1
      8  f022
     84  f022
      0  f022					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f022				   .POINTER   SET	GM_BugColorPtr
      2  f022				   .ADDRESS   SET	GM_BUG_COLOR
      3  f022
      4  f022		       a9 b8		      LDA	#<.ADDRESS
      5  f024		       85 88		      STA	.POINTER
      6  f026		       a9 f2		      LDA	#>.ADDRESS
      7  f028		       85 89		      STA	.POINTER+1
      8  f02a
     86  f02a
     87  f02a		       a9 3e		      lda	#62
     88  f02c		       85 86		      sta	GM_PlayerXPos
     89  f02e		       a9 15		      lda	#21
     90  f030		       85 87		      sta	GM_PlayerYPos
     91  f032
     92  f032		       a9 0a		      lda	#10
     93  f034		       85 8a		      sta	GM_BugXPos
     94  f036		       a9 0a		      lda	#10
     95  f038		       85 8b		      sta	GM_BugYPos
     96  f03a
     97  f03a		       a9 02		      lda	#2
     98  f03c		       85 01		      sta	VBLANK	; turn on VBLANK
     99  f03e
    100  f03e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    101  f03e							;; LOGO MODE - LM
    102  f03e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    103  f03e				   LM_NextFrame
      0  f03e					      VERTICAL_SYNC		; vertical sync - 3 scanlines
      1  f03e		       a9 0e		      lda	#%1110
      2  f040		       85 02	   .VSLP1     sta	WSYNC
      3  f042		       85 00		      sta	VSYNC
      4  f044		       4a		      lsr
      5  f045		       d0 f9		      bne	.VSLP1
    105  f047
    106  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    107  f047							;; Vertical Blank - 37 scanlines - 2812 mc
    108  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    109  f047		       a9 2b		      lda	#TIMER_VBLANK
    110  f049		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    111  f04c
    112  f04c				   .LM_Fade		; handles logo fade in
    113  f04c		       a5 80		      lda	LM_LogoFadeState
    114  f04e		       c9 00		      cmp	#0
    115  f050		       f0 0a		      beq	.LM_FadeDone	; if fade in is complete then jump out
    116  f052		       c6 81		      dec	LM_LogoFadeDelay	; dec fade delay
    117  f054		       d0 06		      bne	.LM_FadeDone	; if still waiting for delay then jump out
    118  f056		       c6 80		      dec	LM_LogoFadeState	; dec fade in state
    119  f058		       a9 14		      lda	#LOGO_FADE_DELAY
    120  f05a		       85 81		      sta	LM_LogoFadeDelay	; restore fade in delay
    121  f05c				   .LM_FadeDone
    122  f05c
    123  f05c				   .LM_SetColor 		; set correct colors
    124  f05c		       a4 80		      ldy	LM_LogoFadeState	; set Y = index of logo color
    125  f05e		       ad 82 02 	      lda	SWCHB	; load console switches
    126  f061		       29 08		      and	#BW_MASK	; check if black & white
    127  f063		       f0 0c		      beq	.LM_BWMode
    128  f065				   .LM_ColorMode
    129  f065		       a9 38		      lda	#LOGO_BK_COLOR
    130  f067		       85 09		      sta	COLUBK	; set background color
    131  f069		       b9 39 f2 	      lda	LM_LogoFade_Color,Y
    132  f06c		       85 08		      sta	COLUPF	; set logo color
    133  f06e		       4c 7a f0 	      jmp	.LM_SetColorDone
    134  f071				   .LM_BWMode
    135  f071		       a9 06		      lda	#LOGO_BK_BW
    136  f073		       85 09		      sta	COLUBK	; set background color
    137  f075		       b9 3e f2 	      lda	LM_LogoFade_BW,Y
    138  f078		       85 08		      sta	COLUPF	; set logo color
    139  f07a				   .LM_SetColorDone
    140  f07a
    141  f07a				   .LM_VBLankWait
    142  f07a		       ae 84 02 	      ldx	INTIM
    143  f07d		       d0 fb		      bne	.LM_VBLankWait	; wait until timer is done
    144  f07f		       a9 00		      lda	#0
    145  f081		       85 02		      sta	WSYNC	; get a fresh scanline
    146  f083							; -------------------------
    147  f083		       85 01		      sta	VBLANK	; turn off VBLANK
    148  f085
    149  f085							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    150  f085							;; Playfield - 192 scanlines - 14592 mc
    151  f085							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    152  f085
    153  f085				   .LM_Top		; waste 68 scanlines
    154  f085		       a2 44		      ldx	#68
      0  f087					      WAIT_X_WSYNC
      1  f087				   .WaitX
      2  f087		       85 02		      sta	WSYNC
      3  f089		       ca		      dex
      4  f08a		       d0 fb		      bne	.WaitX
    156  f08c							; -------------------------
    157  f08c
    158  f08c				   .LM_Middle		; logo is a total of 36 scanlines
    159  f08c		       a0 00		      ldy	#0	; Y = index to playfield bytes
    160  f08e				   .LM_LoopY
    161  f08e		       a2 04		      ldx	#4	;		       ; draw every logo line 4 scanlines
    162  f090				   .LM_LoopX
    163  f090		       85 02		      sta	WSYNC	; get fresh scanline
    164  f092							; -------------------------
    165  f092		       b9 03 f2 	      lda	LM_LogoPF0,Y
    166  f095		       85 0d		      sta	PF0	; set first part of left playfield
    167  f097		       b9 15 f2 	      lda	LM_LogoPF1,Y
    168  f09a		       85 0e		      sta	PF1	; set second part of left playfield
    169  f09c		       b9 27 f2 	      lda	LM_LogoPF2,Y
    170  f09f		       85 0f		      sta	PF2	; set third part of left playfield
    171  f0a1		       c8		      iny		; inc Y to get the right playfield bytes
    172  f0a2		       b9 03 f2 	      lda	LM_LogoPF0,Y
    173  f0a5		       85 0d		      sta	PF0	; set first part of right playfield
    174  f0a7		       b9 15 f2 	      lda	LM_LogoPF1,Y
    175  f0aa		       85 0e		      sta	PF1	; set second part of right playfield
    176  f0ac		       b9 27 f2 	      lda	LM_LogoPF2,Y
    177  f0af		       88		      dey		; dec Y to bea able to repeat left/right for 4 lines
    178  f0b0		       ea		      nop		; just for timing
    179  f0b1		       85 0f		      sta	PF2	; set third part of right playfield
    180  f0b3
    181  f0b3		       ca		      dex
    182  f0b4		       d0 da		      bne	.LM_LoopX	; loop while we havn't drawn 4 scanlines
    183  f0b6		       c8		      iny
    184  f0b7		       c8		      iny		; inc y by 2 to get to the next playfield byte pairs
    185  f0b8		       c0 12		      cpy	#18	; all bytes drawn?
    186  f0ba		       d0 d2		      bne	.LM_LoopY	; loop until all logo bytes are drawn
    187  f0bc
    188  f0bc				   .LM_TurnOffLogo		; use 1 scanline to turn off logo
    189  f0bc		       a5 02		      lda	WSYNC	; get a fresh scanline
    190  f0be							; -------------------------
    191  f0be		       a9 00		      lda	#0
    192  f0c0		       85 0d		      sta	PF0	; reset playfield graphics
    193  f0c2		       85 0e		      sta	PF1
    194  f0c4		       85 0f		      sta	PF2
    195  f0c6
    196  f0c6				   .LM_Bottom
    197  f0c6		       a2 57		      ldx	#87	; waste remaining 87 scanlines
      0  f0c8					      WAIT_X_WSYNC
      1  f0c8				   .WaitX
      2  f0c8		       85 02		      sta	WSYNC
      3  f0ca		       ca		      dex
      4  f0cb		       d0 fb		      bne	.WaitX
    199  f0cd							; -------------------------
    200  f0cd
    201  f0cd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    202  f0cd							;; Overscan - 30 scanlines - 2280 mc
    203  f0cd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    204  f0cd		       a9 02		      lda	#2	; A = 2 = #%00000010
    205  f0cf		       85 01		      sta	VBLANK	; Turn on VBLANK
    206  f0d1		       a9 23		      lda	#TIMER_OVERSCAN
    207  f0d3		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    208  f0d6
    209  f0d6				   .LM_CheckReset
    210  f0d6		       ad 82 02 	      lda	SWCHB	; load console switches
    211  f0d9		       29 01		      and	#RESET_MASK
    212  f0db		       d0 03		      bne	.LM_NoReset
    213  f0dd		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    214  f0e0				   .LM_NoReset
    215  f0e0
    216  f0e0				   .LM_CheckLeftButton
    217  f0e0		       a5 0c		      lda	INPT4	; load left joystick button
    218  f0e2		       29 80		      and	#LEFT_BTN_MASK
    219  f0e4		       d0 05		      bne	.LM_NoLeftButton
    220  f0e6		       85 02		      sta	WSYNC
    221  f0e8		       4c f5 f0 	      jmp	GM_NextFrame	; start game if button is pressed
    222  f0eb				   .LM_NoLeftButton
    223  f0eb
    224  f0eb				   .LM_OverscanWait
    225  f0eb		       ae 84 02 	      ldx	INTIM
    226  f0ee		       d0 fb		      bne	.LM_OverscanWait	; wait until timer is done
    227  f0f0		       85 02		      sta	WSYNC
    228  f0f2							; -------------------------
    229  f0f2		       4c 3e f0 	      jmp	LM_NextFrame
    230  f0f5
    231  f0f5
    232  f0f5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    233  f0f5							;; GAME MODE - GM
    234  f0f5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    235  f0f5				   GM_NextFrame
      0  f0f5					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f0f5		       a9 0e		      lda	#%1110
      2  f0f7		       85 02	   .VSLP1     sta	WSYNC
      3  f0f9		       85 00		      sta	VSYNC
      4  f0fb		       4a		      lsr
      5  f0fc		       d0 f9		      bne	.VSLP1
    237  f0fe
    238  f0fe							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    239  f0fe							;; Vertical Blank - 37 scanlines - 2812 mc
    240  f0fe							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    241  f0fe		       a9 2b		      lda	#TIMER_VBLANK
    242  f100		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    243  f103
    244  f103		       a5 86		      lda	GM_PlayerXPos	; load player x pos
    245  f105		       a0 00		      ldy	#0	; set Y = 0 for player 0
    246  f107		       20 ef f1 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    247  f10a
    248  f10a		       a5 8a		      lda	GM_BugXPos	; load bug x pos
    249  f10c		       a0 01		      ldy	#1	; set Y = 1 for player 1
    250  f10e		       20 ef f1 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    251  f111
    252  f111		       85 02		      sta	WSYNC	; geta fresh scanline
    253  f113							; -------------------------
    254  f113		       85 2a		      sta	HMOVE	; apply positions offset
    255  f115
    256  f115				   .GM_SetColor 		; set correct colors
    257  f115		       ad 82 02 	      lda	SWCHB
    258  f118		       25 08		      and	BW_MASK
    259  f11a		       f0 1b		      beq	.GM_BWMode
    260  f11c				   .GM_ColorMode
    261  f11c		       a9 c8		      lda	#GAME_BK_COLOR
    262  f11e		       85 09		      sta	COLUBK
    263  f120		       a9 c0		      lda	#GAME_PF_COLOR
    264  f122		       85 08		      sta	COLUPF
      0  f124					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f124				   .POINTER   SET	GM_PlayerColorPtr
      2  f124				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f124
      4  f124		       a9 82		      LDA	#<.ADDRESS
      5  f126		       85 84		      STA	.POINTER
      6  f128		       a9 f2		      LDA	#>.ADDRESS
      7  f12a		       85 85		      STA	.POINTER+1
      8  f12c
      0  f12c					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f12c				   .POINTER   SET	GM_BugColorPtr
      2  f12c				   .ADDRESS   SET	GM_BUG_COLOR
      3  f12c
      4  f12c		       a9 b8		      LDA	#<.ADDRESS
      5  f12e		       85 88		      STA	.POINTER
      6  f130		       a9 f2		      LDA	#>.ADDRESS
      7  f132		       85 89		      STA	.POINTER+1
      8  f134
    267  f134		       4c 4f f1 	      jmp	.GM_SetColorDone
    268  f137				   .GM_BWMode
    269  f137		       a9 08		      lda	#GAME_BK_BW
    270  f139		       85 09		      sta	COLUBK
    271  f13b		       a9 02		      lda	#GAME_PF_BW
    272  f13d		       85 08		      sta	COLUPF
      0  f13f					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_BW_IDLE
      1  f13f				   .POINTER   SET	GM_PlayerColorPtr
      2  f13f				   .ADDRESS   SET	GM_PLAYER_BW_IDLE
      3  f13f
      4  f13f		       a9 9d		      LDA	#<.ADDRESS
      5  f141		       85 84		      STA	.POINTER
      6  f143		       a9 f2		      LDA	#>.ADDRESS
      7  f145		       85 85		      STA	.POINTER+1
      8  f147
      0  f147					      SET_POINTER	GM_BugColorPtr, GM_BUG_BW
      1  f147				   .POINTER   SET	GM_BugColorPtr
      2  f147				   .ADDRESS   SET	GM_BUG_BW
      3  f147
      4  f147		       a9 c1		      LDA	#<.ADDRESS
      5  f149		       85 88		      STA	.POINTER
      6  f14b		       a9 f2		      LDA	#>.ADDRESS
      7  f14d		       85 89		      STA	.POINTER+1
      8  f14f
    275  f14f				   .GM_SetColorDone
    276  f14f
    277  f14f				   .GM_SetGraphics
    278  f14f		       ad 82 02 	      lda	SWCHB
    279  f152		       29 40		      and	#%01000000
    280  f154		       f0 0b		      beq	.GM_SetDress
    281  f156				   .GM_SetPants
      0  f156					      SET_POINTER	GM_PlayerPtr, GM_PANTS_IDLE
      1  f156				   .POINTER   SET	GM_PlayerPtr
      2  f156				   .ADDRESS   SET	GM_PANTS_IDLE
      3  f156
      4  f156		       a9 5e		      LDA	#<.ADDRESS
      5  f158		       85 82		      STA	.POINTER
      6  f15a		       a9 f2		      LDA	#>.ADDRESS
      7  f15c		       85 83		      STA	.POINTER+1
      8  f15e
    283  f15e		       4c 69 f1 	      jmp	.GM_SetGraphicsDone
    284  f161				   .GM_SetDress
      0  f161					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f161				   .POINTER   SET	GM_PlayerPtr
      2  f161				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f161
      4  f161		       a9 43		      LDA	#<.ADDRESS
      5  f163		       85 82		      STA	.POINTER
      6  f165		       a9 f2		      LDA	#>.ADDRESS
      7  f167		       85 83		      STA	.POINTER+1
      8  f169
    286  f169				   .GM_SetGraphicsDone
    287  f169
    288  f169		       a9 60		      lda	#96
    289  f16b		       85 8d		      sta	PFCounter
    290  f16d
    291  f16d		       a9 01		      lda	#1
    292  f16f		       85 25		      sta	VDELP0
    293  f171
    294  f171				   .GM_VBLankWait
    295  f171		       ae 84 02 	      ldx	INTIM
    296  f174		       d0 fb		      bne	.GM_VBLankWait	; wait until timer is done
    297  f176		       a9 00		      lda	#0
    298  f178		       85 02		      sta	WSYNC	; get a fresh scanline
    299  f17a							; -------------------------
    300  f17a		       85 01		      sta	VBLANK	; turn off VBLANK
    301  f17c
    302  f17c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    303  f17c							;; Playfield - 192 scanlines - 14592 mc
    304  f17c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    305  f17c
    306  f17c				   .GM_PlayfieldLoop
    307  f17c
    308  f17c				   .GM_DrawPlayer
    309  f17c		       a5 8d		      lda	PFCounter	; A = current scanline in playfield
    310  f17e		       38		      sec		; make sure carry flag is set
    311  f17f		       e5 87		      sbc	GM_PlayerYPos	; subtract sprite Y coordinate
    312  f181		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    313  f183		       90 02		      bcc	.GM_WritePlayer	; if result < height then A contains the index
    314  f185		       a9 00		      lda	#0	; else, set A to 0
    315  f187				   .GM_WritePlayer
    316  f187		       a8		      tay
    317  f188		       b1 82		      lda	(GM_PlayerPtr),Y	; load player bitmap slice of data
    318  f18a		       85 1b		      sta	GRP0	; set graphics for player 0 slice - delayed
    319  f18c		       b1 84		      lda	(GM_PlayerColorPtr),Y	; load player color from lookup table
    320  f18e		       aa		      tax
    321  f18f				   .GM_DrawPlayerDone
    322  f18f
    323  f18f				   .GM_DrawBug
    324  f18f		       a5 8d		      lda	PFCounter	; transfer X to A
    325  f191		       38		      sec		; make sure carry flag is set
    326  f192		       e5 8b		      sbc	GM_BugYPos	; subtract sprite Y coordinate
    327  f194		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    328  f196		       90 02		      bcc	.GM_WriteBug	; if result < SpriteHeight, call subroutine
    329  f198		       a9 00		      lda	#0	; else, set index to 0
    330  f19a				   .GM_WriteBug
    331  f19a		       a8		      tay
    332  f19b		       b9 79 f2 	      lda	GM_BUG,Y	; load player bitmap slice of data
    333  f19e		       85 02		      sta	WSYNC	; wait for next scanline
    334  f1a0							; -------------------------
    335  f1a0		       85 1c		      sta	GRP1	; set graphics for player 1 + 0 slice
    336  f1a2		       86 06		      stx	COLUP0	; set color for player 0 slice
    337  f1a4		       b1 88		      lda	(GM_BugColorPtr),Y	; load player color from lookup table
    338  f1a6		       85 07		      sta	COLUP1	; set color for player 1 slice
    339  f1a8				   .GM_DrawBugDone
    340  f1a8
    341  f1a8		       85 02		      sta	WSYNC	; wait for end of second scanline
    342  f1aa							; -------------------------
    343  f1aa		       c6 8d		      dec	PFCounter
    344  f1ac		       d0 ce		      bne	.GM_PlayfieldLoop	; repeat next scanline until finished
    345  f1ae
    346  f1ae							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    347  f1ae							;; Overscan - 30 scanlines - 2280 mc
    348  f1ae							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    349  f1ae		       a9 02		      lda	#2	; A = 2 = #%00000010
    350  f1b0		       85 01		      sta	VBLANK	; Turn on VBLANK
    351  f1b2		       a9 23		      lda	#TIMER_OVERSCAN
    352  f1b4		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    353  f1b7
    354  f1b7				   .GM_CheckReset
    355  f1b7		       ad 82 02 	      lda	SWCHB	; load console switches
    356  f1ba		       29 01		      and	#RESET_MASK
    357  f1bc		       d0 03		      bne	.GM_NoReset
    358  f1be		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    359  f1c1				   .GM_NoReset
    360  f1c1
    361  f1c1				   .GM_CheckInputUp
    362  f1c1		       a9 10		      lda	#%00010000
    363  f1c3		       2c 80 02 	      bit	SWCHA
    364  f1c6		       d0 02		      bne	.GM_CheckInputDown
    365  f1c8		       e6 87		      inc	GM_PlayerYPos
    366  f1ca
    367  f1ca				   .GM_CheckInputDown
    368  f1ca		       a9 20		      lda	#%00100000
    369  f1cc		       2c 80 02 	      bit	SWCHA
    370  f1cf		       d0 02		      bne	.GM_CheckInputLeft
    371  f1d1		       c6 87		      dec	GM_PlayerYPos
    372  f1d3
    373  f1d3				   .GM_CheckInputLeft
    374  f1d3		       a9 40		      lda	#%01000000
    375  f1d5		       2c 80 02 	      bit	SWCHA
    376  f1d8		       d0 02		      bne	.GM_CheckInputRight
    377  f1da		       c6 86		      dec	GM_PlayerXPos
    378  f1dc
    379  f1dc				   .GM_CheckInputRight
    380  f1dc		       a9 80		      lda	#%10000000
    381  f1de		       2c 80 02 	      bit	SWCHA
    382  f1e1		       d0 02		      bne	.GM_CheckInputDone
    383  f1e3		       e6 86		      inc	GM_PlayerXPos
    384  f1e5
    385  f1e5				   .GM_CheckInputDone
    386  f1e5
    387  f1e5				   .GM_OverscanWait
    388  f1e5		       ae 84 02 	      ldx	INTIM
    389  f1e8		       d0 fb		      bne	.GM_OverscanWait	; wait until timer is done
    390  f1ea		       85 02		      sta	WSYNC
    391  f1ec							; -------------------------
    392  f1ec		       4c f5 f0 	      jmp	GM_NextFrame
    393  f1ef
    394  f1ef							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    395  f1ef							;; Subruotines
    396  f1ef							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    397  f1ef
    398  f1ef							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    399  f1ef							;; SetObjectXPos
    400  f1ef							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    401  f1ef							;; A : Contains the the desired x-coordinate
    402  f1ef							;; Y=0 : Player0
    403  f1ef							;; Y=1 : Player1
    404  f1ef							;; Y=2 : Missile0
    405  f1ef							;; Y=3 : Missile1
    406  f1ef							;; Y=4 : Ball
    407  f1ef							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    408  f1ef
    409  f1ef				   SetObjectXPos subroutine
    410  f1ef		       38		      sec		; Set carry flag
    411  f1f0		       85 02		      sta	WSYNC	; Get fresh scanline
    412  f1f2							; -------------------------
    413  f1f2				   .Div15Loop		; Divide A with 15 by subtraction in loop
    414  f1f2		       e9 0f		      sbc	#15	; Subtract 15 from A
    415  f1f4		       b0 fc		      bcs	.Div15Loop	; Loop if carry flag is set
    416  f1f6		       49 07		      eor	#7	; Adjust the remainder in A between -8 and 7
    417  f1f8					      REPEAT	4	; Repeat 4 times
    418  f1f8		       0a		      asl		; Shift bits left by one
    417  f1f8					      REPEND		; End of repeat
    418  f1f9		       0a		      asl		; Shift bits left by one
    417  f1f9					      REPEND		; End of repeat
    418  f1fa		       0a		      asl		; Shift bits left by one
    417  f1fa					      REPEND		; End of repeat
    418  f1fb		       0a		      asl		; Shift bits left by one
    419  f1fc					      REPEND		; End of repeat
    420  f1fc		       99 20 00 	      sta	HMP0,Y	; Set fine position value for object HMP0+Y
    421  f1ff		       99 10 00 	      sta	RESP0,Y	; Seset rough position for object HMP0+Y
    422  f202		       60		      rts
    423  f203
    424  f203							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    425  f203							;; Lookup tabes
    426  f203							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    427  f203
    428  f203							; https://www.masswerk.at/vcs-tools/TinyPlayfieldEditor/
    429  f203							; mode: asymmetric repeat line-height 4
    430  f203				   LM_LogoPF0
    431  f203		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$90
    432  f20b		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$40,$00,$40
    433  f213		       00 70		      .byte.b	$00,$70
    434  f215				   LM_LogoPF1
    435  f215		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$00,$05,$DE
    436  f21d		       0a 42 0a 4e*	      .byte.b	$0A,$42,$0A,$4E,$08,$52,$08,$56
    437  f225		       38 7b		      .byte.b	$38,$7B
    438  f227				   LM_LogoPF2
    439  f227		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$80,$00,$F8,$00
    440  f22f		       a5 00 a5 00*	      .byte.b	$A5,$00,$A5,$00,$BF,$00,$85,$00
    441  f237		       39 03		      .byte.b	$39,$03
    442  f239
    443  f239				   LM_LogoFade_Color
    444  f239		       0e 3e 3c 3a*	      .byte.b	$0E,$3E,$3C,$3A,$38
    445  f23e
    446  f23e				   LM_LogoFade_BW
    447  f23e		       0e 0c 0a 08*	      .byte.b	$0E,$0C,$0A,$08,$06
    448  f243
    449  f243							;---Graphics Data from PlayerPal 2600---
    450  f243							; BGCOLOR = $C8
    451  f243
    452  f243				   GM_DRESS_IDLE
    453  f243		       00		      .byte.b	#0
    454  f244		       7e		      .byte.b	#%01111110	;$70
    455  f245		       7e		      .byte.b	#%01111110	;$70
    456  f246		       3c		      .byte.b	#%00111100	;$70
    457  f247		       5a		      .byte.b	#%01011010	;$84
    458  f248		       7e		      .byte.b	#%01111110	;$84
    459  f249		       18		      .byte.b	#%00011000	;$F4
    460  f24a		       3c		      .byte.b	#%00111100	;$00
    461  f24b		       18		      .byte.b	#%00011000	;$00
    462  f24c				   GM_DRESS_WALK1
    463  f24c		       00		      .byte.b	#0
    464  f24d		       78		      .byte.b	#%01111000	;$70
    465  f24e		       7e		      .byte.b	#%01111110	;$70
    466  f24f		       3c		      .byte.b	#%00111100	;$70
    467  f250		       1a		      .byte.b	#%00011010	;$84
    468  f251		       7e		      .byte.b	#%01111110	;$84
    469  f252		       18		      .byte.b	#%00011000	;$F4
    470  f253		       3c		      .byte.b	#%00111100	;$00
    471  f254		       18		      .byte.b	#%00011000	;$00
    472  f255				   GM_DRESS_WALK2
    473  f255		       00		      .byte.b	#0
    474  f256		       1e		      .byte.b	#%00011110	;$70
    475  f257		       7e		      .byte.b	#%01111110	;$70
    476  f258		       3c		      .byte.b	#%00111100	;$70
    477  f259		       58		      .byte.b	#%01011000	;$84
    478  f25a		       7e		      .byte.b	#%01111110	;$84
    479  f25b		       18		      .byte.b	#%00011000	;$F4
    480  f25c		       3c		      .byte.b	#%00111100	;$00
    481  f25d		       18		      .byte.b	#%00011000	;$00
    482  f25e				   GM_PANTS_IDLE
    483  f25e		       00		      .byte.b	#0
    484  f25f		       66		      .byte.b	#%01100110	;$70
    485  f260		       24		      .byte.b	#%00100100	;$70
    486  f261		       3c		      .byte.b	#%00111100	;$70
    487  f262		       5a		      .byte.b	#%01011010	;$84
    488  f263		       7e		      .byte.b	#%01111110	;$84
    489  f264		       18		      .byte.b	#%00011000	;$F4
    490  f265		       3c		      .byte.b	#%00111100	;$00
    491  f266		       18		      .byte.b	#%00011000	;$00
    492  f267				   GM_PANTS_WALK1
    493  f267		       00		      .byte.b	#0
    494  f268		       60		      .byte.b	#%01100000	;$70
    495  f269		       26		      .byte.b	#%00100110	;$70
    496  f26a		       3c		      .byte.b	#%00111100	;$70
    497  f26b		       1a		      .byte.b	#%00011010	;$84
    498  f26c		       7e		      .byte.b	#%01111110	;$84
    499  f26d		       18		      .byte.b	#%00011000	;$F4
    500  f26e		       3c		      .byte.b	#%00111100	;$00
    501  f26f		       18		      .byte.b	#%00011000	;$00
    502  f270				   GM_PANTS_WALK2
    503  f270		       00		      .byte.b	#0
    504  f271		       06		      .byte.b	#%00000110	;$70
    505  f272		       64		      .byte.b	#%01100100	;$70
    506  f273		       3c		      .byte.b	#%00111100	;$70
    507  f274		       58		      .byte.b	#%01011000	;$84
    508  f275		       7e		      .byte.b	#%01111110	;$84
    509  f276		       18		      .byte.b	#%00011000	;$F4
    510  f277		       3c		      .byte.b	#%00111100	;$00
    511  f278		       18		      .byte.b	#%00011000	;$00
    512  f279				   GM_BUG
    513  f279		       00		      .byte.b	#0
    514  f27a		       00		      .byte.b	#%00000000	;$00
    515  f27b		       00		      .byte.b	#%00000000	;$00
    516  f27c		       52		      .byte.b	#%01010010	;$F0
    517  f27d		       3c		      .byte.b	#%00111100	;$F0
    518  f27e		       3c		      .byte.b	#%00111100	;$F2
    519  f27f		       52		      .byte.b	#%01010010	;$F0
    520  f280		       00		      .byte.b	#%00000000	;$00
    521  f281		       00		      .byte.b	#%00000000	;$00
    522  f282							;---End Graphics Data---
    523  f282
    524  f282
    525  f282							;---Color Data from PlayerPal 2600---
    526  f282				   GM_PLAYER_COLOR_IDLE
    527  f282		       00		      .byte.b	#0
    528  f283		       70		      .byte.b	#$70	;
    529  f284		       70		      .byte.b	#$70	;
    530  f285		       70		      .byte.b	#$70	;
    531  f286		       84		      .byte.b	#$84	;
    532  f287		       84		      .byte.b	#$84	;
    533  f288		       f4		      .byte.b	#$F4	;
    534  f289		       00		      .byte.b	#$00	;
    535  f28a		       00		      .byte.b	#$00	;
    536  f28b				   GM_PLAYER_COLOR_WALK1
    537  f28b		       00		      .byte.b	#0
    538  f28c		       70		      .byte.b	#$70	;
    539  f28d		       70		      .byte.b	#$70	;
    540  f28e		       70		      .byte.b	#$70	;
    541  f28f		       84		      .byte.b	#$84	;
    542  f290		       84		      .byte.b	#$84	;
    543  f291		       f4		      .byte.b	#$F4	;
    544  f292		       00		      .byte.b	#$00	;
    545  f293		       00		      .byte.b	#$00	;
    546  f294				   GM_PLAYER_COLOR_WALK2
    547  f294		       00		      .byte.b	#0
    548  f295		       70		      .byte.b	#$70	;
    549  f296		       70		      .byte.b	#$70	;
    550  f297		       70		      .byte.b	#$70	;
    551  f298		       84		      .byte.b	#$84	;
    552  f299		       84		      .byte.b	#$84	;
    553  f29a		       f4		      .byte.b	#$F4	;
    554  f29b		       00		      .byte.b	#$00	;
    555  f29c		       00		      .byte.b	#$00	;
    556  f29d				   GM_PLAYER_BW_IDLE
    557  f29d		       00		      .byte.b	#0
    558  f29e		       00		      .byte.b	#$0	;
    559  f29f		       00		      .byte.b	#$0	;
    560  f2a0		       00		      .byte.b	#$0	;
    561  f2a1		       02		      .byte.b	#$02	;
    562  f2a2		       02		      .byte.b	#$02	;
    563  f2a3		       04		      .byte.b	#$04	;
    564  f2a4		       00		      .byte.b	#$00	;
    565  f2a5		       00		      .byte.b	#$00	;
    566  f2a6				   GM_PLAYER_BW_WALK1
    567  f2a6		       00		      .byte.b	#0
    568  f2a7		       00		      .byte.b	#$0	;
    569  f2a8		       00		      .byte.b	#$0	;
    570  f2a9		       00		      .byte.b	#$0	;
    571  f2aa		       02		      .byte.b	#$02	;
    572  f2ab		       02		      .byte.b	#$02	;
    573  f2ac		       04		      .byte.b	#$04	;
    574  f2ad		       00		      .byte.b	#$00	;
    575  f2ae		       00		      .byte.b	#$00	;
    576  f2af				   GM_PLAYER_BW_WALK2
    577  f2af		       00		      .byte.b	#0
    578  f2b0		       00		      .byte.b	#$0	;
    579  f2b1		       00		      .byte.b	#$0	;
    580  f2b2		       00		      .byte.b	#$0	;
    581  f2b3		       02		      .byte.b	#$02	;
    582  f2b4		       02		      .byte.b	#$02	;
    583  f2b5		       04		      .byte.b	#$04	;
    584  f2b6		       00		      .byte.b	#$00	;
    585  f2b7		       00		      .byte.b	#$00	;
    586  f2b8				   GM_BUG_COLOR
    587  f2b8		       00		      .byte.b	#0
    588  f2b9		       00		      .byte.b	#$00	;
    589  f2ba		       00		      .byte.b	#$00	;
    590  f2bb		       f0		      .byte.b	#$F0	;
    591  f2bc		       f0		      .byte.b	#$F0	;
    592  f2bd		       f2		      .byte.b	#$F2	;
    593  f2be		       f0		      .byte.b	#$F0	;
    594  f2bf		       00		      .byte.b	#$00	;
    595  f2c0		       00		      .byte.b	#$00	;
    596  f2c1				   GM_BUG_BW
    597  f2c1		       00		      .byte.b	#0
    598  f2c2		       00		      .byte.b	#$00	;
    599  f2c3		       00		      .byte.b	#$00	;
    600  f2c4		       00		      .byte.b	#$00	;
    601  f2c5		       00		      .byte.b	#$00	;
    602  f2c6		       02		      .byte.b	#$02	;
    603  f2c7		       00		      .byte.b	#$00	;
    604  f2c8		       00		      .byte.b	#$00	;
    605  f2c9		       00		      .byte.b	#$00	;
    606  f2ca
    607  f2ca							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    608  f2ca							;; Fill the 4K ROM
    609  f2ca							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    610  fffc					      org	$FFFC	; insert two pointers at the end of ROM
    611  fffc		       00 f0		      .word.w	Reset	; reset vector
    612  fffe		       00 f0		      .word.w	Reset	; interrupt Vector
    613  10000
    614  10000
