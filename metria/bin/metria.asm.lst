------- FILE metria.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE metria.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE metria.asm
      5  0000 ????
      6  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  0000 ????						;; Macros
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????
     10  0000 ????				      MAC	wait_x_wsync
     11  0000 ????			   .WaitX
     12  0000 ????				      sta	WSYNC	; Wait for horizontal blank
     13  0000 ????				      dex		; X--
     14  0000 ????				      bne	.WaitX	; Loop until X = 0
     15  0000 ????				      ENDM
     16  0000 ????
     17  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     18  0000 ????						;; Contants
     19  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     20  0000 ????
     21  0000 ????	       00 08	   BW_MASK    =	%00001000	; bitmask for black & white switch
     22  0000 ????	       00 01	   RESET_MASK =	%00000001	; bitmask for reset switch
     23  0000 ????	       00 80	   LEFT_BTN_MASK =	%10000000	; bitmask for left joystick button
     24  0000 ????	       00 2b	   TIMER_VBLANK =	43	; value for TIM64T vertical blank timer
     25  0000 ????	       00 23	   TIMER_OVERSCAN =	35	; value for TIM64T overscan timer
     26  0000 ????
     27  0000 ????	       00 72	   RANDOM_SEED =	$72
     28  0000 ????
     29  0000 ????	       00 38	   LOGO_BK_COLOR =	$38	; logo mode background color - color mode
     30  0000 ????	       00 06	   LOGO_BK_BW =	$06	; logo mode background color - black & white
     31  0000 ????	       00 04	   LOGO_FADE_INIT_STATE =	4	; initial value for the logo fade in state
     32  0000 ????	       00 28	   LOGO_FADE_INIT_DELAY =	40	; initial delay value before logo fades in
     33  0000 ????	       00 14	   LOGO_FADE_DELAY =	20	; delay for each fade step - 20 frames/step
     34  0000 ????
     35  0000 ????	       00 c8	   GAME_BK_COLOR =	$C8	; game background color - color mode
     36  0000 ????	       00 08	   GAME_BK_BW =	$08	; game background color - black & white
     37  0000 ????	       00 c0	   GAME_PF_COLOR =	$C0	; game playfield color - color mode
     38  0000 ????	       00 02	   GAME_PF_BW =	$02	; game playfield color - black & white
     39  0000 ????	       00 78	   GAME_SKY_COLOR =	$78	; game sky color - color mode
     40  0000 ????	       00 04	   GAME_SKY_BW =	$04	; game sky color - black & white
     41  0000 ????	       00 00	   GAME_SCOREBACK_COLOR =	$0	; game score board color - all modes
     42  0000 ????
     43  0000 ????	       00 09	   GAME_PLAYER_HEIGHT =	9	; player sprite height
     44  0000 ????	       00 09	   GAME_BUG_HEIGHT =	9	; bug sprite height
     45  0000 ????
     46  0000 ????	       00 09	   GAME_BIRD_HEIGHT =	9	; bird sprite height
     47  0000 ????
     48  0000 ????	       00 05	   GAME_DIGIT_HEIGHT =	5	; digit height
     49  0000 ????
     50  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     51  0000 ????						;; RAM variables located outside ROM at address $0080
     52  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     53  0000 ????
     54 U00a9 ????				      seg.u	variables
     55 U0080					      org	$80	; RAM address memory start
     56 U0080
     57 U0080		       00	   LM_LogoFadeState ds	1	; current logo fade state
     58 U0081		       00	   LM_LogoFadeDelay ds	1	; current logo fade delay
     59 U0082
     60 U0082		       00	   GM_BackgroundColor ds	1
     61 U0083		       00	   GM_SkyColor ds	1
     62 U0084
     63 U0084		       00 00	   GM_PlayerPtr ds	2
     64 U0086		       00 00	   GM_PlayerColorPtr ds	2
     65 U0088		       00	   GM_PlayerXPos ds	1
     66 U0089		       00	   GM_PlayerYPos ds	1
     67 U008a
     68 U008a		       00 00	   GM_BirdPtr ds	2
     69 U008c		       00 00	   GM_BirdColorPtr ds	2
     70 U008e		       00	   GM_BirdYPos ds	1
     71 U008f		       00	   GM_BirdReflection ds	1
     72 U0090
     73 U0090		       00 00	   GM_BugColorPtr ds	2
     74 U0092		       00	   GM_BugXPos ds	1
     75 U0093		       00	   GM_BugYPos ds	1
     76 U0094		       00	   GM_PlayfieldIdx ds	1
     77 U0095
     78 U0095		       00	   PFCounter  ds	1
     79 U0096		       00	   Random     ds	1
     80 U0097
     81 U0097		       00	   Score      ds	1	; stored as BCD
     82 U0098		       00	   Timer      ds	1	; stored as BCD
     83 U0099		       00	   TimerTick  ds	1
     84 U009a		       00 00	   OnesDigitOffset ds	2
     85 U009c		       00 00	   TensDigitOffset ds	2
     86 U009e		       00	   Temp       ds	1
     87 U009f		       00 00 00 00*ScoreSprite ds	5
     88 U00a4		       00 00 00 00*TimerSprite ds	5
     89 U00a9
     90 U00a9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     91 U00a9							;; Program start - Located at top of ROM at address $F000
     92 U00a9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     93 U00a9
     94  10000 ????				       seg	code
     95  f000					      org	$F000	; start address of ROM
     96  f000
     97  f000				   Reset
      0  f000					      CLEAN_START		; set machine to known state on startup
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     99  f00a
    100  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    101  f00a							;; Init variables
    102  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    103  f00a
    104  f00a		       a9 72		      lda	#RANDOM_SEED
    105  f00c		       85 96		      sta	Random
    106  f00e
    107  f00e		       a9 04		      lda	#LOGO_FADE_INIT_STATE
    108  f010		       85 80		      sta	LM_LogoFadeState	; initialize logo fade state
    109  f012		       a9 28		      lda	#LOGO_FADE_INIT_DELAY
    110  f014		       85 81		      sta	LM_LogoFadeDelay	; initialize logo fade delay
    111  f016
      0  f016					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f016				   .POINTER   SET	GM_PlayerPtr
      2  f016				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f016
      4  f016		       a9 03		      LDA	#<.ADDRESS
      5  f018		       85 84		      STA	.POINTER
      6  f01a		       a9 f4		      LDA	#>.ADDRESS
      7  f01c		       85 85		      STA	.POINTER+1
      8  f01e
      0  f01e					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f01e				   .POINTER   SET	GM_PlayerColorPtr
      2  f01e				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f01e
      4  f01e		       a9 54		      LDA	#<.ADDRESS
      5  f020		       85 86		      STA	.POINTER
      6  f022		       a9 f4		      LDA	#>.ADDRESS
      7  f024		       85 87		      STA	.POINTER+1
      8  f026
    114  f026
      0  f026					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f026				   .POINTER   SET	GM_BugColorPtr
      2  f026				   .ADDRESS   SET	GM_BUG_COLOR
      3  f026
      4  f026		       a9 8a		      LDA	#<.ADDRESS
      5  f028		       85 90		      STA	.POINTER
      6  f02a		       a9 f4		      LDA	#>.ADDRESS
      7  f02c		       85 91		      STA	.POINTER+1
      8  f02e
    116  f02e
      0  f02e					      SET_POINTER	GM_BirdPtr, GM_BIRD_1
      1  f02e				   .POINTER   SET	GM_BirdPtr
      2  f02e				   .ADDRESS   SET	GM_BIRD_1
      3  f02e
      4  f02e		       a9 42		      LDA	#<.ADDRESS
      5  f030		       85 8a		      STA	.POINTER
      6  f032		       a9 f4		      LDA	#>.ADDRESS
      7  f034		       85 8b		      STA	.POINTER+1
      8  f036
    118  f036
    119  f036		       a9 3e		      lda	#62
    120  f038		       85 88		      sta	GM_PlayerXPos
    121  f03a		       a9 15		      lda	#21
    122  f03c		       85 89		      sta	GM_PlayerYPos
    123  f03e
    124  f03e		       a9 04		      lda	#4
    125  f040		       85 8e		      sta	GM_BirdYPos
    126  f042		       a9 00		      lda	#0
    127  f044		       85 8f		      sta	GM_BirdReflection
    128  f046
    129  f046		       a9 3c		      lda	#60
    130  f048		       85 99		      sta	TimerTick
    131  f04a
    132  f04a		       a9 02		      lda	#2
    133  f04c		       85 01		      sta	VBLANK	; turn on VBLANK
    134  f04e
    135  f04e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    136  f04e							;; LOGO MODE - LM
    137  f04e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    138  f04e				   LM_NextFrame
      0  f04e					      VERTICAL_SYNC		; vertical sync - 3 scanlines
      1  f04e		       a9 0e		      lda	#%1110
      2  f050		       85 02	   .VSLP1     sta	WSYNC
      3  f052		       85 00		      sta	VSYNC
      4  f054		       4a		      lsr
      5  f055		       d0 f9		      bne	.VSLP1
    140  f057
    141  f057							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    142  f057							;; Vertical Blank - 37 scanlines - 2812 mc
    143  f057							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    144  f057		       a9 2b		      lda	#TIMER_VBLANK
    145  f059		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    146  f05c
    147  f05c				   .LM_Fade		; handles logo fade in
    148  f05c		       a5 80		      lda	LM_LogoFadeState
    149  f05e		       c9 00		      cmp	#0
    150  f060		       f0 0a		      beq	.LM_FadeDone	; if fade in is complete then jump out
    151  f062		       c6 81		      dec	LM_LogoFadeDelay	; dec fade delay
    152  f064		       d0 06		      bne	.LM_FadeDone	; if still waiting for delay then jump out
    153  f066		       c6 80		      dec	LM_LogoFadeState	; dec fade in state
    154  f068		       a9 14		      lda	#LOGO_FADE_DELAY
    155  f06a		       85 81		      sta	LM_LogoFadeDelay	; restore fade in delay
    156  f06c				   .LM_FadeDone
    157  f06c
    158  f06c				   .LM_SetColor 		; set correct colors
    159  f06c		       a4 80		      ldy	LM_LogoFadeState	; set Y = index of logo color
    160  f06e		       ad 82 02 	      lda	SWCHB	; load console switches
    161  f071		       29 08		      and	#BW_MASK	; check if black & white
    162  f073		       f0 0c		      beq	.LM_BWMode
    163  f075				   .LM_ColorMode
    164  f075		       a9 38		      lda	#LOGO_BK_COLOR
    165  f077		       85 09		      sta	COLUBK	; set background color
    166  f079		       b9 a9 f3 	      lda	LM_LogoFade_Color,Y
    167  f07c		       85 08		      sta	COLUPF	; set logo color
    168  f07e		       4c 8a f0 	      jmp	.LM_SetColorDone
    169  f081				   .LM_BWMode
    170  f081		       a9 06		      lda	#LOGO_BK_BW
    171  f083		       85 09		      sta	COLUBK	; set background color
    172  f085		       b9 ae f3 	      lda	LM_LogoFade_BW,Y
    173  f088		       85 08		      sta	COLUPF	; set logo color
    174  f08a				   .LM_SetColorDone
    175  f08a
    176  f08a		       e6 96		      inc	Random
    177  f08c
    178  f08c				   .LM_VBLankWait
    179  f08c		       ae 84 02 	      ldx	INTIM
    180  f08f		       d0 fb		      bne	.LM_VBLankWait	; wait until timer is done
    181  f091		       a9 00		      lda	#0
    182  f093		       85 02		      sta	WSYNC	; get a fresh scanline
    183  f095							; -------------------------
    184  f095		       85 01		      sta	VBLANK	; turn off VBLANK
    185  f097
    186  f097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    187  f097							;; Playfield - 192 scanlines - 14592 mc
    188  f097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    189  f097
    190  f097				   .LM_Top		; waste 68 scanlines
    191  f097		       a2 44		      ldx	#68
      0  f099					      WAIT_X_WSYNC
      1  f099				   .WaitX
      2  f099		       85 02		      sta	WSYNC
      3  f09b		       ca		      dex
      4  f09c		       d0 fb		      bne	.WaitX
    193  f09e							; -------------------------
    194  f09e
    195  f09e				   .LM_Middle		; logo is a total of 36 scanlines
    196  f09e		       a0 00		      ldy	#0	; Y = index to playfield bytes
    197  f0a0				   .LM_LoopY
    198  f0a0		       a2 04		      ldx	#4	; draw every logo line 4 scanlines
    199  f0a2				   .LM_LoopX
    200  f0a2		       85 02		      sta	WSYNC	; get fresh scanline
    201  f0a4							; -------------------------
    202  f0a4		       b9 73 f3 	      lda	LM_LogoPF0,Y
    203  f0a7		       85 0d		      sta	PF0	; set first part of left playfield
    204  f0a9		       b9 85 f3 	      lda	LM_LogoPF1,Y
    205  f0ac		       85 0e		      sta	PF1	; set second part of left playfield
    206  f0ae		       b9 97 f3 	      lda	LM_LogoPF2,Y
    207  f0b1		       85 0f		      sta	PF2	; set third part of left playfield
    208  f0b3		       c8		      iny		; inc Y to get the right playfield bytes
    209  f0b4		       b9 73 f3 	      lda	LM_LogoPF0,Y
    210  f0b7		       85 0d		      sta	PF0	; set first part of right playfield
    211  f0b9		       b9 85 f3 	      lda	LM_LogoPF1,Y
    212  f0bc		       85 0e		      sta	PF1	; set second part of right playfield
    213  f0be		       b9 97 f3 	      lda	LM_LogoPF2,Y
    214  f0c1		       88		      dey		; dec Y to bea able to repeat left/right for 4 lines
    215  f0c2		       ea		      nop		; just for timing
    216  f0c3		       85 0f		      sta	PF2	; set third part of right playfield
    217  f0c5
    218  f0c5		       ca		      dex
    219  f0c6		       d0 da		      bne	.LM_LoopX	; loop while we havn't drawn 4 scanlines
    220  f0c8		       c8		      iny
    221  f0c9		       c8		      iny		; inc y by 2 to get to the next playfield byte pairs
    222  f0ca		       c0 12		      cpy	#18	; all bytes drawn?
    223  f0cc		       d0 d2		      bne	.LM_LoopY	; loop until all logo bytes are drawn
    224  f0ce
    225  f0ce				   .LM_TurnOffLogo		; use 1 scanline to turn off logo
    226  f0ce		       a5 02		      lda	WSYNC	; get a fresh scanline
    227  f0d0							; -------------------------
    228  f0d0		       a9 00		      lda	#0
    229  f0d2		       85 0d		      sta	PF0	; reset playfield graphics
    230  f0d4		       85 0e		      sta	PF1
    231  f0d6		       85 0f		      sta	PF2
    232  f0d8
    233  f0d8				   .LM_Bottom
    234  f0d8		       a2 57		      ldx	#87	; waste remaining 87 scanlines
      0  f0da					      WAIT_X_WSYNC
      1  f0da				   .WaitX
      2  f0da		       85 02		      sta	WSYNC
      3  f0dc		       ca		      dex
      4  f0dd		       d0 fb		      bne	.WaitX
    236  f0df							; -------------------------
    237  f0df
    238  f0df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    239  f0df							;; Overscan - 30 scanlines - 2280 mc
    240  f0df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    241  f0df		       a9 02		      lda	#2	; A = 2 = #%00000010
    242  f0e1		       85 01		      sta	VBLANK	; Turn on VBLANK
    243  f0e3		       a9 23		      lda	#TIMER_OVERSCAN
    244  f0e5		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    245  f0e8
    246  f0e8				   .LM_CheckReset
    247  f0e8		       ad 82 02 	      lda	SWCHB	; load console switches
    248  f0eb		       29 01		      and	#RESET_MASK
    249  f0ed		       d0 03		      bne	.LM_NoReset
    250  f0ef		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    251  f0f2				   .LM_NoReset
    252  f0f2
    253  f0f2				   .LM_CheckLeftButton
    254  f0f2		       a5 0c		      lda	INPT4	; load left joystick button
    255  f0f4		       29 80		      and	#LEFT_BTN_MASK
    256  f0f6		       d0 08		      bne	.LM_NoLeftButton
    257  f0f8		       85 02		      sta	WSYNC
    258  f0fa		       20 df f2 	      jsr	PlaceBug
    259  f0fd		       4c 0a f1 	      jmp	GM_NextFrame	; start game if button is pressed
    260  f100				   .LM_NoLeftButton
    261  f100
    262  f100				   .LM_OverscanWait
    263  f100		       ae 84 02 	      ldx	INTIM
    264  f103		       d0 fb		      bne	.LM_OverscanWait	; wait until timer is done
    265  f105		       85 02		      sta	WSYNC
    266  f107							; -------------------------
    267  f107		       4c 4e f0 	      jmp	LM_NextFrame
    268  f10a
    269  f10a
    270  f10a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    271  f10a							;; GAME MODE - GM
    272  f10a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    273  f10a				   GM_NextFrame
      0  f10a					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f10a		       a9 0e		      lda	#%1110
      2  f10c		       85 02	   .VSLP1     sta	WSYNC
      3  f10e		       85 00		      sta	VSYNC
      4  f110		       4a		      lsr
      5  f111		       d0 f9		      bne	.VSLP1
    275  f113
    276  f113							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    277  f113							;; Vertical Blank - 37 scanlines - 2812 mc
    278  f113							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    279  f113		       a9 2b		      lda	#TIMER_VBLANK
    280  f115		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    281  f118
    282  f118		       a5 88		      lda	GM_PlayerXPos	; load player x pos
    283  f11a		       a0 00		      ldy	#0	; set Y = 0 for player 0
    284  f11c		       20 02 f3 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    285  f11f
    286  f11f		       a5 92		      lda	GM_BugXPos	; load bug x pos
    287  f121		       a0 01		      ldy	#1	; set Y = 1 for player 1
    288  f123		       20 02 f3 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    289  f126
    290  f126		       85 02		      sta	WSYNC	; geta fresh scanline
    291  f128							; -------------------------
    292  f128		       85 2a		      sta	HMOVE	; apply positions offset
    293  f12a
    294  f12a		       c6 99		      dec	TimerTick
    295  f12c		       d0 0d		      bne	.GM_SecondNotDone
    296  f12e		       f8		      sed
    297  f12f		       18		      clc
    298  f130		       a5 98		      lda	Timer
    299  f132		       69 01		      adc	#1
    300  f134		       85 98		      sta	Timer
    301  f136		       d8		      cld
    302  f137		       a9 3c		      lda	#60
    303  f139		       85 99		      sta	TimerTick
    304  f13b				   .GM_SecondNotDone
    305  f13b
    306  f13b				   .GM_SetColor 		; set correct colors
    307  f13b		       ad 82 02 	      lda	SWCHB
    308  f13e		       25 08		      and	BW_MASK
    309  f140		       f0 27		      beq	.GM_BWMode
    310  f142				   .GM_ColorMode
    311  f142		       a9 78		      lda	#GAME_SKY_COLOR
    312  f144		       85 83		      sta	GM_SkyColor
    313  f146		       a9 c8		      lda	#GAME_BK_COLOR
    314  f148		       85 82		      sta	GM_BackgroundColor
    315  f14a		       a9 c0		      lda	#GAME_PF_COLOR
    316  f14c		       85 08		      sta	COLUPF
      0  f14e					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f14e				   .POINTER   SET	GM_PlayerColorPtr
      2  f14e				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f14e
      4  f14e		       a9 54		      LDA	#<.ADDRESS
      5  f150		       85 86		      STA	.POINTER
      6  f152		       a9 f4		      LDA	#>.ADDRESS
      7  f154		       85 87		      STA	.POINTER+1
      8  f156
      0  f156					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f156				   .POINTER   SET	GM_BugColorPtr
      2  f156				   .ADDRESS   SET	GM_BUG_COLOR
      3  f156
      4  f156		       a9 8a		      LDA	#<.ADDRESS
      5  f158		       85 90		      STA	.POINTER
      6  f15a		       a9 f4		      LDA	#>.ADDRESS
      7  f15c		       85 91		      STA	.POINTER+1
      8  f15e
      0  f15e					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_COLOR
      1  f15e				   .POINTER   SET	GM_BirdColorPtr
      2  f15e				   .ADDRESS   SET	GM_BIRD_COLOR
      3  f15e
      4  f15e		       a9 9c		      LDA	#<.ADDRESS
      5  f160		       85 8c		      STA	.POINTER
      6  f162		       a9 f4		      LDA	#>.ADDRESS
      7  f164		       85 8d		      STA	.POINTER+1
      8  f166
    320  f166		       4c 8d f1 	      jmp	.GM_SetColorDone
    321  f169				   .GM_BWMode
    322  f169		       a9 04		      lda	#GAME_SKY_BW
    323  f16b		       85 83		      sta	GM_SkyColor
    324  f16d		       a9 08		      lda	#GAME_BK_BW
    325  f16f		       85 82		      sta	GM_BackgroundColor
    326  f171		       a9 02		      lda	#GAME_PF_BW
    327  f173		       85 08		      sta	COLUPF
      0  f175					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_BW_IDLE
      1  f175				   .POINTER   SET	GM_PlayerColorPtr
      2  f175				   .ADDRESS   SET	GM_PLAYER_BW_IDLE
      3  f175
      4  f175		       a9 6f		      LDA	#<.ADDRESS
      5  f177		       85 86		      STA	.POINTER
      6  f179		       a9 f4		      LDA	#>.ADDRESS
      7  f17b		       85 87		      STA	.POINTER+1
      8  f17d
      0  f17d					      SET_POINTER	GM_BugColorPtr, GM_BUG_BW
      1  f17d				   .POINTER   SET	GM_BugColorPtr
      2  f17d				   .ADDRESS   SET	GM_BUG_BW
      3  f17d
      4  f17d		       a9 93		      LDA	#<.ADDRESS
      5  f17f		       85 90		      STA	.POINTER
      6  f181		       a9 f4		      LDA	#>.ADDRESS
      7  f183		       85 91		      STA	.POINTER+1
      8  f185
      0  f185					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_BW
      1  f185				   .POINTER   SET	GM_BirdColorPtr
      2  f185				   .ADDRESS   SET	GM_BIRD_BW
      3  f185
      4  f185		       a9 a5		      LDA	#<.ADDRESS
      5  f187		       85 8c		      STA	.POINTER
      6  f189		       a9 f4		      LDA	#>.ADDRESS
      7  f18b		       85 8d		      STA	.POINTER+1
      8  f18d
    331  f18d				   .GM_SetColorDone
    332  f18d		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    333  f18f		       85 09		      sta	COLUBK
    334  f191
    335  f191				   .GM_SetGraphics
    336  f191		       ad 82 02 	      lda	SWCHB
    337  f194		       29 40		      and	#%01000000
    338  f196		       f0 0b		      beq	.GM_SetDress
    339  f198				   .GM_SetPants
      0  f198					      SET_POINTER	GM_PlayerPtr, GM_PANTS_IDLE
      1  f198				   .POINTER   SET	GM_PlayerPtr
      2  f198				   .ADDRESS   SET	GM_PANTS_IDLE
      3  f198
      4  f198		       a9 1e		      LDA	#<.ADDRESS
      5  f19a		       85 84		      STA	.POINTER
      6  f19c		       a9 f4		      LDA	#>.ADDRESS
      7  f19e		       85 85		      STA	.POINTER+1
      8  f1a0
    341  f1a0		       4c ab f1 	      jmp	.GM_SetGraphicsDone
    342  f1a3				   .GM_SetDress
      0  f1a3					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f1a3				   .POINTER   SET	GM_PlayerPtr
      2  f1a3				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f1a3
      4  f1a3		       a9 03		      LDA	#<.ADDRESS
      5  f1a5		       85 84		      STA	.POINTER
      6  f1a7		       a9 f4		      LDA	#>.ADDRESS
      7  f1a9		       85 85		      STA	.POINTER+1
      8  f1ab
    344  f1ab				   .GM_SetGraphicsDone
    345  f1ab
    346  f1ab				   .GM_CheckCollisions
    347  f1ab		       a5 07		      lda	CXPPMM
    348  f1ad		       29 80		      and	#%10000000
    349  f1af		       f0 0c		      beq	.GM_CheckCollisionsDone
    350  f1b1
    351  f1b1		       f8		      sed
    352  f1b2		       a5 97		      lda	Score
    353  f1b4		       18		      clc
    354  f1b5		       69 01		      adc	#1
    355  f1b7		       85 97		      sta	Score
    356  f1b9		       d8		      cld
    357  f1ba
    358  f1ba		       20 df f2 	      jsr	PlaceBug
    359  f1bd				   .GM_CheckCollisionsDone
    360  f1bd		       85 2c		      sta	CXCLR
    361  f1bf
    362  f1bf				   .GM_PlayfieldInit
    363  f1bf		       a9 47		      lda	#71
    364  f1c1		       85 95		      sta	PFCounter	; 144/2 scanelines
    365  f1c3		       20 16 f3 	      jsr	PrepareScoreAndTimer
    366  f1c6
    367  f1c6				   .GM_VBLankWait
    368  f1c6		       ae 84 02 	      ldx	INTIM
    369  f1c9		       d0 fb		      bne	.GM_VBLankWait	; wait until timer is done
    370  f1cb		       a9 00		      lda	#0
    371  f1cd		       85 02		      sta	WSYNC	; get a fresh scanline
    372  f1cf							; -------------------------
    373  f1cf		       85 01		      sta	VBLANK	; turn off VBLANK
    374  f1d1
    375  f1d1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    376  f1d1							;; Score Board - 20 scanlines - 1520 mc
    377  f1d1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    378  f1d1		       a9 00		      lda	#$00
    379  f1d3		       85 09		      sta	COLUBK
    380  f1d5		       a9 0e		      lda	#$0E
    381  f1d7		       85 08		      sta	COLUPF
    382  f1d9
    383  f1d9		       a9 00		      lda	#0
    384  f1db		       85 0d		      sta	PF0
    385  f1dd		       85 0e		      sta	PF1
    386  f1df		       85 0f		      sta	PF2
    387  f1e1		       a9 00		      lda	#00000000
    388  f1e3		       85 0a		      sta	CTRLPF	; disable playfield/scoreboard reflection
    389  f1e5
    390  f1e5		       a2 05		      ldx	#5
      0  f1e7					      WAIT_X_WSYNC
      1  f1e7				   .WaitX
      2  f1e7		       85 02		      sta	WSYNC
      3  f1e9		       ca		      dex
      4  f1ea		       d0 fb		      bne	.WaitX
    392  f1ec							; -------------------------
    393  f1ec
    394  f1ec		       a0 05		      ldy	#5
    395  f1ee				   .GM_ScoreboardLoop
    396  f1ee
    397  f1ee					      REPEAT	2
    398  f1ee		       b9 9f 00 	      lda	ScoreSprite,Y
    399  f1f1		       85 0e		      sta	PF1
    400  f1f3
    401  f1f3					      REPEAT	13
    402  f1f3		       ea		      nop
    401  f1f3					      REPEND
    402  f1f4		       ea		      nop
    401  f1f4					      REPEND
    402  f1f5		       ea		      nop
    401  f1f5					      REPEND
    402  f1f6		       ea		      nop
    401  f1f6					      REPEND
    402  f1f7		       ea		      nop
    401  f1f7					      REPEND
    402  f1f8		       ea		      nop
    401  f1f8					      REPEND
    402  f1f9		       ea		      nop
    401  f1f9					      REPEND
    402  f1fa		       ea		      nop
    401  f1fa					      REPEND
    402  f1fb		       ea		      nop
    401  f1fb					      REPEND
    402  f1fc		       ea		      nop
    401  f1fc					      REPEND
    402  f1fd		       ea		      nop
    401  f1fd					      REPEND
    402  f1fe		       ea		      nop
    401  f1fe					      REPEND
    402  f1ff		       ea		      nop
    403  f200					      REPEND
    404  f200
    405  f200		       b9 a4 00 	      lda	TimerSprite,Y
    406  f203		       85 0e		      sta	PF1
    407  f205
    408  f205		       85 02		      sta	WSYNC
    409  f207							; -------------------------
    397  f207					      REPEND
    398  f207		       b9 9f 00 	      lda	ScoreSprite,Y
    399  f20a		       85 0e		      sta	PF1
    400  f20c
    401  f20c					      REPEAT	13
    402  f20c		       ea		      nop
    401  f20c					      REPEND
    402  f20d		       ea		      nop
    401  f20d					      REPEND
    402  f20e		       ea		      nop
    401  f20e					      REPEND
    402  f20f		       ea		      nop
    401  f20f					      REPEND
    402  f210		       ea		      nop
    401  f210					      REPEND
    402  f211		       ea		      nop
    401  f211					      REPEND
    402  f212		       ea		      nop
    401  f212					      REPEND
    402  f213		       ea		      nop
    401  f213					      REPEND
    402  f214		       ea		      nop
    401  f214					      REPEND
    402  f215		       ea		      nop
    401  f215					      REPEND
    402  f216		       ea		      nop
    401  f216					      REPEND
    402  f217		       ea		      nop
    401  f217					      REPEND
    402  f218		       ea		      nop
    403  f219					      REPEND
    404  f219
    405  f219		       b9 a4 00 	      lda	TimerSprite,Y
    406  f21c		       85 0e		      sta	PF1
    407  f21e
    408  f21e		       85 02		      sta	WSYNC
    409  f220							; -------------------------
    410  f220					      REPEND
    411  f220
    412  f220		       88		      dey
    413  f221		       d0 cb		      bne	.GM_ScoreboardLoop
    414  f223
    415  f223		       a9 00		      lda	#0
    416  f225		       85 0e		      sta	PF1
    417  f227
    418  f227		       a2 05		      ldx	#5
      0  f229					      WAIT_X_WSYNC
      1  f229				   .WaitX
      2  f229		       85 02		      sta	WSYNC
      3  f22b		       ca		      dex
      4  f22c		       d0 fb		      bne	.WaitX
    420  f22e
    421  f22e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    422  f22e							;; Sky - 30 scanlines - 1520 mc
    423  f22e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    424  f22e		       a5 83		      lda	GM_SkyColor
    425  f230		       85 09		      sta	COLUBK
    426  f232		       a2 0f		      ldx	#15
    427  f234		       a9 00		      lda	#0
    428  f236		       85 25		      sta	VDELP0	; clear vertical delay för player 0
    429  f238
    430  f238		       a5 8f		      lda	GM_BirdReflection
    431  f23a		       85 0b		      sta	REFP0
    432  f23c
    433  f23c				   .GM_SkyLoop
    434  f23c
    435  f23c				   .GM_DrawBird
    436  f23c		       8a		      txa		; transfer X to A
    437  f23d		       38		      sec		; make sure carry flag is set
    438  f23e		       e5 8e		      sbc	GM_BirdYPos	; subtract sprite Y coordinate
    439  f240		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    440  f242		       90 02		      bcc	.GM_WriteBird	; if result < SpriteHeight, call subroutine
    441  f244		       a9 00		      lda	#0	; else, set index to 0
    442  f246				   .GM_WriteBird
    443  f246		       a8		      tay
    444  f247		       b1 8a		      lda	(GM_BirdPtr),Y	; load player bitmap slice of data
    445  f249		       85 02		      sta	WSYNC	; wait for next scanline
    446  f24b							; -------------------------
    447  f24b		       85 1b		      sta	GRP0	; set graphics for player 0 slice
    448  f24d		       b1 8c		      lda	(GM_BirdColorPtr),Y	; load player color from lookup table
    449  f24f		       85 06		      sta	COLUP0	; set color for player 1 slice
    450  f251				   .GM_DrawBirdDone
    451  f251		       85 02		      sta	WSYNC	; wait for next scanline
    452  f253							; -------------------------
    453  f253		       ca		      dex
    454  f254		       d0 e6		      bne	.GM_SkyLoop
    455  f256
    456  f256
    457  f256							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    458  f256							;; Playfield - 152 scanlines - 11552 mc
    459  f256							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    460  f256		       a5 82		      lda	GM_BackgroundColor
    461  f258		       85 09		      sta	COLUBK
    462  f25a		       a9 01		      lda	#1
    463  f25c		       85 25		      sta	VDELP0	; set vertical delay för player 0
    464  f25e		       a9 00		      lda	#0
    465  f260		       85 0b		      sta	REFP0
    466  f262
    467  f262				   .GM_PlayfieldLoop
    468  f262
    469  f262				   .GM_DrawPlayer
    470  f262		       a5 95		      lda	PFCounter	; A = current scanline in playfield
    471  f264		       38		      sec		; make sure carry flag is set
    472  f265		       e5 89		      sbc	GM_PlayerYPos	; subtract sprite Y coordinate
    473  f267		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    474  f269		       90 02		      bcc	.GM_WritePlayer	; if result < height then A contains the index
    475  f26b		       a9 00		      lda	#0	; else, set A to 0
    476  f26d				   .GM_WritePlayer
    477  f26d		       a8		      tay
    478  f26e		       b1 84		      lda	(GM_PlayerPtr),Y	; load player bitmap slice of data
    479  f270		       85 1b		      sta	GRP0	; set graphics for player 0 slice - delayed
    480  f272		       b1 86		      lda	(GM_PlayerColorPtr),Y	; load player color from lookup table
    481  f274		       aa		      tax
    482  f275				   .GM_DrawPlayerDone
    483  f275
    484  f275				   .GM_DrawBug
    485  f275		       a5 95		      lda	PFCounter	; transfer X to A
    486  f277		       38		      sec		; make sure carry flag is set
    487  f278		       e5 93		      sbc	GM_BugYPos	; subtract sprite Y coordinate
    488  f27a		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    489  f27c		       90 02		      bcc	.GM_WriteBug	; if result < SpriteHeight, call subroutine
    490  f27e		       a9 00		      lda	#0	; else, set index to 0
    491  f280				   .GM_WriteBug
    492  f280		       a8		      tay
    493  f281		       b9 39 f4 	      lda	GM_BUG,Y	; load player bitmap slice of data
    494  f284		       85 02		      sta	WSYNC	; wait for next scanline
    495  f286							; -------------------------
    496  f286		       85 1c		      sta	GRP1	; set graphics for player 1 + 0 slice
    497  f288		       86 06		      stx	COLUP0	; set color for player 0 slice
    498  f28a		       b1 90		      lda	(GM_BugColorPtr),Y	; load player color from lookup table
    499  f28c		       85 07		      sta	COLUP1	; set color for player 1 slice
    500  f28e				   .GM_DrawBugDone
    501  f28e		       85 02		      sta	WSYNC
    502  f290							; -------------------------
    503  f290		       c6 95		      dec	PFCounter
    504  f292		       d0 ce		      bne	.GM_PlayfieldLoop	; repeat next scanline until finished
    505  f294		       85 02		      sta	WSYNC
    506  f296
    507  f296							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    508  f296							;; Overscan - 30 scanlines - 2280 mc
    509  f296							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    510  f296		       a9 02		      lda	#2	; A = 2 = #%00000010
    511  f298		       85 01		      sta	VBLANK	; Turn on VBLANK
    512  f29a		       a9 23		      lda	#TIMER_OVERSCAN
    513  f29c		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    514  f29f
    515  f29f				   .GM_CheckReset
    516  f29f		       ad 82 02 	      lda	SWCHB	; load console switches
    517  f2a2		       29 01		      and	#RESET_MASK
    518  f2a4		       d0 03		      bne	.GM_NoReset
    519  f2a6		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    520  f2a9				   .GM_NoReset
    521  f2a9
    522  f2a9				   .GM_CheckInputUp
    523  f2a9		       a9 10		      lda	#%00010000
    524  f2ab		       2c 80 02 	      bit	SWCHA
    525  f2ae		       d0 02		      bne	.GM_CheckInputDown
    526  f2b0		       e6 89		      inc	GM_PlayerYPos
    527  f2b2
    528  f2b2				   .GM_CheckInputDown
    529  f2b2		       a9 20		      lda	#%00100000
    530  f2b4		       2c 80 02 	      bit	SWCHA
    531  f2b7		       d0 02		      bne	.GM_CheckInputLeft
    532  f2b9		       c6 89		      dec	GM_PlayerYPos
    533  f2bb
    534  f2bb				   .GM_CheckInputLeft
    535  f2bb		       a9 40		      lda	#%01000000
    536  f2bd		       2c 80 02 	      bit	SWCHA
    537  f2c0		       d0 06		      bne	.GM_CheckInputRight
    538  f2c2		       a9 08		      lda	#%00001000
    539  f2c4		       85 8f		      sta	GM_BirdReflection
    540  f2c6		       c6 88		      dec	GM_PlayerXPos
    541  f2c8
    542  f2c8				   .GM_CheckInputRight
    543  f2c8		       a9 80		      lda	#%10000000
    544  f2ca		       2c 80 02 	      bit	SWCHA
    545  f2cd		       d0 06		      bne	.GM_CheckInputDone
    546  f2cf		       a9 00		      lda	#0
    547  f2d1		       85 8f		      sta	GM_BirdReflection
    548  f2d3		       e6 88		      inc	GM_PlayerXPos
    549  f2d5
    550  f2d5				   .GM_CheckInputDone
    551  f2d5
    552  f2d5				   .GM_OverscanWait
    553  f2d5		       ae 84 02 	      ldx	INTIM
    554  f2d8		       d0 fb		      bne	.GM_OverscanWait	; wait until timer is done
    555  f2da		       85 02		      sta	WSYNC
    556  f2dc							; -------------------------
    557  f2dc		       4c 0a f1 	      jmp	GM_NextFrame
    558  f2df
    559  f2df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    560  f2df							;; Subruotines
    561  f2df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    562  f2df
    563  f2df				   PlaceBug   subroutine
    564  f2df		       20 f2 f2 	      jsr	Randomize
    565  f2e2		       a5 96		      lda	Random
    566  f2e4		       29 7f		      and	#%01111111
    567  f2e6		       85 92		      sta	GM_BugXPos
    568  f2e8		       20 f2 f2 	      jsr	Randomize
    569  f2eb		       a5 96		      lda	Random
    570  f2ed		       29 3f		      and	#%00111111
    571  f2ef		       85 93		      sta	GM_BugYPos
    572  f2f1		       60		      rts
    573  f2f2
    574  f2f2				   Randomize  subroutine
    575  f2f2		       a5 96		      lda	Random
    576  f2f4		       0a		      asl
    577  f2f5		       45 96		      eor	Random
    578  f2f7		       0a		      asl
    579  f2f8		       45 96		      eor	Random
    580  f2fa		       0a		      asl
    581  f2fb		       0a		      asl
    582  f2fc		       45 96		      eor	Random
    583  f2fe		       0a		      asl
    584  f2ff		       26 96		      rol	Random	; performs a series of shifts and bit operations
    585  f301		       60		      rts
    586  f302
    587  f302							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    588  f302							;; SetObjectXPos
    589  f302							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    590  f302							;; A : Contains the the desired x-coordinate
    591  f302							;; Y=0 : Player0
    592  f302							;; Y=1 : Player1
    593  f302							;; Y=2 : Missile0
    594  f302							;; Y=3 : Missile1
    595  f302							;; Y=4 : Ball
    596  f302							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    597  f302
    598  f302				   SetObjectXPos subroutine
    599  f302		       38		      sec		; Set carry flag
    600  f303		       85 02		      sta	WSYNC	; Get fresh scanline
    601  f305							; -------------------------
    602  f305				   .Div15Loop		; Divide A with 15 by subtraction in loop
    603  f305		       e9 0f		      sbc	#15	; Subtract 15 from A
    604  f307		       b0 fc		      bcs	.Div15Loop	; Loop if carry flag is set
    605  f309		       49 07		      eor	#7	; Adjust the remainder in A between -8 and 7
    606  f30b					      REPEAT	4	; Repeat 4 times
    607  f30b		       0a		      asl		; Shift bits left by one
    606  f30b					      REPEND		; End of repeat
    607  f30c		       0a		      asl		; Shift bits left by one
    606  f30c					      REPEND		; End of repeat
    607  f30d		       0a		      asl		; Shift bits left by one
    606  f30d					      REPEND		; End of repeat
    607  f30e		       0a		      asl		; Shift bits left by one
    608  f30f					      REPEND		; End of repeat
    609  f30f		       99 20 00 	      sta	HMP0,Y	; Set fine position value for object HMP0+Y
    610  f312		       99 10 00 	      sta	RESP0,Y	; Seset rough position for object HMP0+Y
    611  f315		       60		      rts
    612  f316
    613  f316							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    614  f316							;; Subroutine to handle scoreboard digits to be displayed on the screen
    615  f316							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    616  f316							;; This is stored using BCD, so the display will be displayed in dec numbers.
    617  f316							;; Converts the high and low nibbles of the variables Score and Timer
    618  f316							;; into offsets into the digit lookup table so the values can be displayed.
    619  f316							;; Each digit has a height of 5 bytes in the lookup table.
    620  f316							;;
    621  f316							;; For the low nibble we need to multiply by 5:
    622  f316							;;   - we can use left shifts to perform multiplation by 2
    623  f316							;;   - for any number N, the value of N*5 = (N*2*2)+N
    624  f316							;;
    625  f316							;; For the upper nibble, since it is already times 16, we need to divide it
    626  f316							;; and then multiply it by 5:
    627  f316							;;   - we can use right shift to perform division by 2
    628  f316							;;   - for any number N, the value of (N/16)*5 = (N/4)+(N/16)
    629  f316							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    630  f316				   PrepareScoreAndTimer subroutine
    631  f316		       a2 01		      ldx	#1	; X register is the loop counter
    632  f318				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    633  f318
    634  f318		       b5 97		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    635  f31a		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111
    636  f31c		       85 9e		      sta	Temp	; save the value of A into Temp
    637  f31e		       0a		      asl		; shift left (it is now N*2)
    638  f31f		       0a		      asl		; shift left (it is now N*4)
    639  f320		       65 9e		      adc	Temp	; add the value saved in Temp (+N)
    640  f322		       95 9a		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset
    641  f324
    642  f324		       b5 97		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    643  f326		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    644  f328		       4a		      lsr		; shift right (it is now N/2)
    645  f329		       4a		      lsr		; shift right (it is now N/4)
    646  f32a		       85 9e		      sta	Temp	; save the value of A into Temp
    647  f32c		       4a		      lsr		; shift right (it is now N/8)
    648  f32d		       4a		      lsr		; shift right (it is now N/16)
    649  f32e		       65 9e		      adc	Temp	; add the value saved in Temp (N/16+N/4)
    650  f330		       95 9c		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    651  f332		       ca		      dex		; X--
    652  f333		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    653  f335
    654  f335		       a2 05		      ldx	#5
    655  f337				   .SpriteLoop
    656  f337
    657  f337		       a4 9c		      ldy	TensDigitOffset
    658  f339		       b9 b3 f3 	      lda	Digits,y
    659  f33c		       29 f0		      and	#$F0
    660  f33e		       85 9e		      sta	Temp
    661  f340
    662  f340		       a4 9a		      ldy	OnesDigitOffset
    663  f342		       b9 b3 f3 	      lda	Digits,y
    664  f345		       29 0f		      and	#$0F
    665  f347		       05 9e		      ora	Temp
    666  f349		       85 9e		      sta	Temp
    667  f34b
    668  f34b		       a5 9e		      lda	Temp
    669  f34d		       95 9f		      sta	ScoreSprite,X
    670  f34f
    671  f34f		       a4 9d		      ldy	TensDigitOffset+1
    672  f351		       b9 b3 f3 	      lda	Digits,y
    673  f354		       29 f0		      and	#$F0
    674  f356		       85 9e		      sta	Temp
    675  f358
    676  f358		       a4 9b		      ldy	OnesDigitOffset+1
    677  f35a		       b9 b3 f3 	      lda	Digits,y
    678  f35d		       29 0f		      and	#$0F
    679  f35f		       05 9e		      ora	Temp
    680  f361		       85 9e		      sta	Temp
    681  f363
    682  f363		       a5 9e		      lda	Temp
    683  f365		       95 a4		      sta	TimerSprite,X
    684  f367
    685  f367		       e6 9c		      inc	TensDigitOffset
    686  f369		       e6 9d		      inc	TensDigitOffset+1
    687  f36b		       e6 9a		      inc	OnesDigitOffset
    688  f36d		       e6 9b		      inc	OnesDigitOffset+1
    689  f36f
    690  f36f		       ca		      dex
    691  f370		       d0 c5		      bne	.SpriteLoop
    692  f372
    693  f372		       60		      rts
    694  f373
    695  f373							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    696  f373							;; Lookup tabes
    697  f373							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    698  f373
    699  f373							; https://www.masswerk.at/vcs-tools/TinyPlayfieldEditor/
    700  f373							; mode: asymmetric repeat line-height 4
    701  f373				   LM_LogoPF0
    702  f373		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$90
    703  f37b		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$40,$00,$40
    704  f383		       00 70		      .byte.b	$00,$70
    705  f385				   LM_LogoPF1
    706  f385		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$00,$05,$DE
    707  f38d		       0a 42 0a 4e*	      .byte.b	$0A,$42,$0A,$4E,$08,$52,$08,$56
    708  f395		       38 7b		      .byte.b	$38,$7B
    709  f397				   LM_LogoPF2
    710  f397		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$80,$00,$F8,$00
    711  f39f		       a5 00 a5 00*	      .byte.b	$A5,$00,$A5,$00,$BF,$00,$85,$00
    712  f3a7		       39 03		      .byte.b	$39,$03
    713  f3a9
    714  f3a9				   LM_LogoFade_Color
    715  f3a9		       0e 3e 3c 3a*	      .byte.b	$0E,$3E,$3C,$3A,$38
    716  f3ae
    717  f3ae				   LM_LogoFade_BW
    718  f3ae		       0e 0c 0a 08*	      .byte.b	$0E,$0C,$0A,$08,$06
    719  f3b3
    720  f3b3				   Digits
    721  f3b3		       77		      .byte.b	%01110111	; ### ###
    722  f3b4		       55		      .byte.b	%01010101	; # # # #
    723  f3b5		       55		      .byte.b	%01010101	; # # # #
    724  f3b6		       55		      .byte.b	%01010101	; # # # #
    725  f3b7		       77		      .byte.b	%01110111	; ### ###
    726  f3b8
    727  f3b8		       11		      .byte.b	%00010001	;   #	 #
    728  f3b9		       11		      .byte.b	%00010001	;   #	 #
    729  f3ba		       11		      .byte.b	%00010001	;   #	 #
    730  f3bb		       11		      .byte.b	%00010001	;   #	 #
    731  f3bc		       11		      .byte.b	%00010001	;   #	 #
    732  f3bd
    733  f3bd		       77		      .byte.b	%01110111	; ### ###
    734  f3be		       11		      .byte.b	%00010001	;   #	 #
    735  f3bf		       77		      .byte.b	%01110111	; ### ###
    736  f3c0		       44		      .byte.b	%01000100	; #   #
    737  f3c1		       77		      .byte.b	%01110111	; ### ###
    738  f3c2
    739  f3c2		       77		      .byte.b	%01110111	; ### ###
    740  f3c3		       11		      .byte.b	%00010001	;   #	 #
    741  f3c4		       33		      .byte.b	%00110011	;  ##	##
    742  f3c5		       11		      .byte.b	%00010001	;   #	 #
    743  f3c6		       77		      .byte.b	%01110111	; ### ###
    744  f3c7
    745  f3c7		       55		      .byte.b	%01010101	; # # # #
    746  f3c8		       55		      .byte.b	%01010101	; # # # #
    747  f3c9		       77		      .byte.b	%01110111	; ### ###
    748  f3ca		       11		      .byte.b	%00010001	;   #	 #
    749  f3cb		       11		      .byte.b	%00010001	;   #	 #
    750  f3cc
    751  f3cc		       77		      .byte.b	%01110111	; ### ###
    752  f3cd		       44		      .byte.b	%01000100	; #   #
    753  f3ce		       77		      .byte.b	%01110111	; ### ###
    754  f3cf		       11		      .byte.b	%00010001	;   #	 #
    755  f3d0		       77		      .byte.b	%01110111	; ### ###
    756  f3d1
    757  f3d1		       77		      .byte.b	%01110111	; ### ###
    758  f3d2		       44		      .byte.b	%01000100	; #   #
    759  f3d3		       77		      .byte.b	%01110111	; ### ###
    760  f3d4		       55		      .byte.b	%01010101	; # # # #
    761  f3d5		       77		      .byte.b	%01110111	; ### ###
    762  f3d6
    763  f3d6		       77		      .byte.b	%01110111	; ### ###
    764  f3d7		       11		      .byte.b	%00010001	;   #	 #
    765  f3d8		       11		      .byte.b	%00010001	;   #	 #
    766  f3d9		       11		      .byte.b	%00010001	;   #	 #
    767  f3da		       11		      .byte.b	%00010001	;   #	 #
    768  f3db
    769  f3db		       77		      .byte.b	%01110111	; ### ###
    770  f3dc		       55		      .byte.b	%01010101	; # # # #
    771  f3dd		       77		      .byte.b	%01110111	; ### ###
    772  f3de		       55		      .byte.b	%01010101	; # # # #
    773  f3df		       77		      .byte.b	%01110111	; ### ###
    774  f3e0
    775  f3e0		       77		      .byte.b	%01110111	; ### ###
    776  f3e1		       55		      .byte.b	%01010101	; # # # #
    777  f3e2		       77		      .byte.b	%01110111	; ### ###
    778  f3e3		       11		      .byte.b	%00010001	;   #	 #
    779  f3e4		       77		      .byte.b	%01110111	; ### ###
    780  f3e5
    781  f3e5		       22		      .byte.b	%00100010	;  #	#
    782  f3e6		       55		      .byte.b	%01010101	; # # # #
    783  f3e7		       77		      .byte.b	%01110111	; ### ###
    784  f3e8		       55		      .byte.b	%01010101	; # # # #
    785  f3e9		       55		      .byte.b	%01010101	; # # # #
    786  f3ea
    787  f3ea		       77		      .byte.b	%01110111	; ### ###
    788  f3eb		       55		      .byte.b	%01010101	; # # # #
    789  f3ec		       66		      .byte.b	%01100110	; ##  ##
    790  f3ed		       55		      .byte.b	%01010101	; # # # #
    791  f3ee		       77		      .byte.b	%01110111	; ### ###
    792  f3ef
    793  f3ef		       77		      .byte.b	%01110111	; ### ###
    794  f3f0		       44		      .byte.b	%01000100	; #   #
    795  f3f1		       44		      .byte.b	%01000100	; #   #
    796  f3f2		       44		      .byte.b	%01000100	; #   #
    797  f3f3		       77		      .byte.b	%01110111	; ### ###
    798  f3f4
    799  f3f4		       66		      .byte.b	%01100110	; ##  ##
    800  f3f5		       55		      .byte.b	%01010101	; # # # #
    801  f3f6		       55		      .byte.b	%01010101	; # # # #
    802  f3f7		       55		      .byte.b	%01010101	; # # # #
    803  f3f8		       66		      .byte.b	%01100110	; ##  ##
    804  f3f9
    805  f3f9		       77		      .byte.b	%01110111	; ### ###
    806  f3fa		       44		      .byte.b	%01000100	; #   #
    807  f3fb		       77		      .byte.b	%01110111	; ### ###
    808  f3fc		       44		      .byte.b	%01000100	; #   #
    809  f3fd		       77		      .byte.b	%01110111	; ### ###
    810  f3fe
    811  f3fe		       77		      .byte.b	%01110111	; ### ###
    812  f3ff		       44		      .byte.b	%01000100	; #   #
    813  f400		       66		      .byte.b	%01100110	; ##  ##
    814  f401		       44		      .byte.b	%01000100	; #   #
    815  f402		       44		      .byte.b	%01000100	; #   #
    816  f403
    817  f403							;---Graphics Data from PlayerPal 2600---
    818  f403
    819  f403				   GM_DRESS_IDLE
    820  f403		       00		      .byte.b	#0
    821  f404		       7e		      .byte.b	#%01111110	;$70
    822  f405		       7e		      .byte.b	#%01111110	;$70
    823  f406		       3c		      .byte.b	#%00111100	;$70
    824  f407		       5a		      .byte.b	#%01011010	;$84
    825  f408		       7e		      .byte.b	#%01111110	;$84
    826  f409		       18		      .byte.b	#%00011000	;$F4
    827  f40a		       3c		      .byte.b	#%00111100	;$00
    828  f40b		       18		      .byte.b	#%00011000	;$00
    829  f40c				   GM_DRESS_WALK1
    830  f40c		       00		      .byte.b	#0
    831  f40d		       78		      .byte.b	#%01111000	;$70
    832  f40e		       7e		      .byte.b	#%01111110	;$70
    833  f40f		       3c		      .byte.b	#%00111100	;$70
    834  f410		       1a		      .byte.b	#%00011010	;$84
    835  f411		       7e		      .byte.b	#%01111110	;$84
    836  f412		       18		      .byte.b	#%00011000	;$F4
    837  f413		       3c		      .byte.b	#%00111100	;$00
    838  f414		       18		      .byte.b	#%00011000	;$00
    839  f415				   GM_DRESS_WALK2
    840  f415		       00		      .byte.b	#0
    841  f416		       1e		      .byte.b	#%00011110	;$70
    842  f417		       7e		      .byte.b	#%01111110	;$70
    843  f418		       3c		      .byte.b	#%00111100	;$70
    844  f419		       58		      .byte.b	#%01011000	;$84
    845  f41a		       7e		      .byte.b	#%01111110	;$84
    846  f41b		       18		      .byte.b	#%00011000	;$F4
    847  f41c		       3c		      .byte.b	#%00111100	;$00
    848  f41d		       18		      .byte.b	#%00011000	;$00
    849  f41e				   GM_PANTS_IDLE
    850  f41e		       00		      .byte.b	#0
    851  f41f		       66		      .byte.b	#%01100110	;$70
    852  f420		       24		      .byte.b	#%00100100	;$70
    853  f421		       3c		      .byte.b	#%00111100	;$70
    854  f422		       5a		      .byte.b	#%01011010	;$84
    855  f423		       7e		      .byte.b	#%01111110	;$84
    856  f424		       18		      .byte.b	#%00011000	;$F4
    857  f425		       3c		      .byte.b	#%00111100	;$00
    858  f426		       18		      .byte.b	#%00011000	;$00
    859  f427				   GM_PANTS_WALK1
    860  f427		       00		      .byte.b	#0
    861  f428		       60		      .byte.b	#%01100000	;$70
    862  f429		       26		      .byte.b	#%00100110	;$70
    863  f42a		       3c		      .byte.b	#%00111100	;$70
    864  f42b		       1a		      .byte.b	#%00011010	;$84
    865  f42c		       7e		      .byte.b	#%01111110	;$84
    866  f42d		       18		      .byte.b	#%00011000	;$F4
    867  f42e		       3c		      .byte.b	#%00111100	;$00
    868  f42f		       18		      .byte.b	#%00011000	;$00
    869  f430				   GM_PANTS_WALK2
    870  f430		       00		      .byte.b	#0
    871  f431		       06		      .byte.b	#%00000110	;$70
    872  f432		       64		      .byte.b	#%01100100	;$70
    873  f433		       3c		      .byte.b	#%00111100	;$70
    874  f434		       58		      .byte.b	#%01011000	;$84
    875  f435		       7e		      .byte.b	#%01111110	;$84
    876  f436		       18		      .byte.b	#%00011000	;$F4
    877  f437		       3c		      .byte.b	#%00111100	;$00
    878  f438		       18		      .byte.b	#%00011000	;$00
    879  f439				   GM_BUG
    880  f439		       00		      .byte.b	#0
    881  f43a		       00		      .byte.b	#%00000000	;$00
    882  f43b		       00		      .byte.b	#%00000000	;$00
    883  f43c		       52		      .byte.b	#%01010010	;$F0
    884  f43d		       3c		      .byte.b	#%00111100	;$F0
    885  f43e		       3c		      .byte.b	#%00111100	;$F2
    886  f43f		       52		      .byte.b	#%01010010	;$F0
    887  f440		       00		      .byte.b	#%00000000	;$00
    888  f441		       00		      .byte.b	#%00000000	;$00
    889  f442				   GM_BIRD_1
    890  f442		       00		      .byte.b	#0
    891  f443		       00		      .byte.b	#%00000000	;$1C
    892  f444		       01		      .byte.b	#%00000001	;$1C
    893  f445		       3f		      .byte.b	#%00111111	;$0E
    894  f446		       fe		      .byte.b	#%11111110	;$0A
    895  f447		       18		      .byte.b	#%00011000	;$0E
    896  f448		       76		      .byte.b	#%01110110	;$0E
    897  f449		       00		      .byte.b	#%00000000	;$0E
    898  f44a		       00		      .byte.b	#%00000000	;$0E
    899  f44b				   GM_BIRD_2
    900  f44b		       00		      .byte.b	#0
    901  f44c		       00		      .byte.b	#%00000000	;$1C
    902  f44d		       01		      .byte.b	#%00000001	;$1C
    903  f44e		       3f		      .byte.b	#%00111111	;$0E
    904  f44f		       fe		      .byte.b	#%11111110	;$0A
    905  f450		       f8		      .byte.b	#%11111000	;$0E
    906  f451		       00		      .byte.b	#%00000000	;$0E
    907  f452		       00		      .byte.b	#%00000000	;$0E
    908  f453		       00		      .byte.b	#%00000000	;$0E
    909  f454
    910  f454							;---End Graphics Data---
    911  f454
    912  f454
    913  f454							;---Color Data from PlayerPal 2600---
    914  f454				   GM_PLAYER_COLOR_IDLE
    915  f454		       00		      .byte.b	#0
    916  f455		       70		      .byte.b	#$70	;
    917  f456		       70		      .byte.b	#$70	;
    918  f457		       70		      .byte.b	#$70	;
    919  f458		       84		      .byte.b	#$84	;
    920  f459		       84		      .byte.b	#$84	;
    921  f45a		       f4		      .byte.b	#$F4	;
    922  f45b		       00		      .byte.b	#$00	;
    923  f45c		       00		      .byte.b	#$00	;
    924  f45d				   GM_PLAYER_COLOR_WALK1
    925  f45d		       00		      .byte.b	#0
    926  f45e		       70		      .byte.b	#$70	;
    927  f45f		       70		      .byte.b	#$70	;
    928  f460		       70		      .byte.b	#$70	;
    929  f461		       84		      .byte.b	#$84	;
    930  f462		       84		      .byte.b	#$84	;
    931  f463		       f4		      .byte.b	#$F4	;
    932  f464		       00		      .byte.b	#$00	;
    933  f465		       00		      .byte.b	#$00	;
    934  f466				   GM_PLAYER_COLOR_WALK2
    935  f466		       00		      .byte.b	#0
    936  f467		       70		      .byte.b	#$70	;
    937  f468		       70		      .byte.b	#$70	;
    938  f469		       70		      .byte.b	#$70	;
    939  f46a		       84		      .byte.b	#$84	;
    940  f46b		       84		      .byte.b	#$84	;
    941  f46c		       f4		      .byte.b	#$F4	;
    942  f46d		       00		      .byte.b	#$00	;
    943  f46e		       00		      .byte.b	#$00	;
    944  f46f				   GM_PLAYER_BW_IDLE
    945  f46f		       00		      .byte.b	#0
    946  f470		       00		      .byte.b	#$0	;
    947  f471		       00		      .byte.b	#$0	;
    948  f472		       00		      .byte.b	#$0	;
    949  f473		       02		      .byte.b	#$02	;
    950  f474		       02		      .byte.b	#$02	;
    951  f475		       04		      .byte.b	#$04	;
    952  f476		       00		      .byte.b	#$00	;
    953  f477		       00		      .byte.b	#$00	;
    954  f478				   GM_PLAYER_BW_WALK1
    955  f478		       00		      .byte.b	#0
    956  f479		       00		      .byte.b	#$0	;
    957  f47a		       00		      .byte.b	#$0	;
    958  f47b		       00		      .byte.b	#$0	;
    959  f47c		       02		      .byte.b	#$02	;
    960  f47d		       02		      .byte.b	#$02	;
    961  f47e		       04		      .byte.b	#$04	;
    962  f47f		       00		      .byte.b	#$00	;
    963  f480		       00		      .byte.b	#$00	;
    964  f481				   GM_PLAYER_BW_WALK2
    965  f481		       00		      .byte.b	#0
    966  f482		       00		      .byte.b	#$0	;
    967  f483		       00		      .byte.b	#$0	;
    968  f484		       00		      .byte.b	#$0	;
    969  f485		       02		      .byte.b	#$02	;
    970  f486		       02		      .byte.b	#$02	;
    971  f487		       04		      .byte.b	#$04	;
    972  f488		       00		      .byte.b	#$00	;
    973  f489		       00		      .byte.b	#$00	;
    974  f48a				   GM_BUG_COLOR
    975  f48a		       00		      .byte.b	#0
    976  f48b		       00		      .byte.b	#$00	;
    977  f48c		       00		      .byte.b	#$00	;
    978  f48d		       f0		      .byte.b	#$F0	;
    979  f48e		       f0		      .byte.b	#$F0	;
    980  f48f		       f2		      .byte.b	#$F2	;
    981  f490		       f0		      .byte.b	#$F0	;
    982  f491		       00		      .byte.b	#$00	;
    983  f492		       00		      .byte.b	#$00	;
    984  f493				   GM_BUG_BW
    985  f493		       00		      .byte.b	#0
    986  f494		       00		      .byte.b	#$00	;
    987  f495		       00		      .byte.b	#$00	;
    988  f496		       00		      .byte.b	#$00	;
    989  f497		       00		      .byte.b	#$00	;
    990  f498		       02		      .byte.b	#$02	;
    991  f499		       00		      .byte.b	#$00	;
    992  f49a		       00		      .byte.b	#$00	;
    993  f49b		       00		      .byte.b	#$00	;
    994  f49c				   GM_BIRD_COLOR
    995  f49c		       00		      .byte.b	#0
    996  f49d		       1c		      .byte.b	#$1C	;
    997  f49e		       1c		      .byte.b	#$1C	;
    998  f49f		       0e		      .byte.b	#$0E	;
    999  f4a0		       0a		      .byte.b	#$0A	;
   1000  f4a1		       0e		      .byte.b	#$0E	;
   1001  f4a2		       0e		      .byte.b	#$0E	;
   1002  f4a3		       0e		      .byte.b	#$0E	;
   1003  f4a4		       0e		      .byte.b	#$0E	;
   1004  f4a5				   GM_BIRD_BW
   1005  f4a5		       00		      .byte.b	#0
   1006  f4a6		       0c		      .byte.b	#$0C	;
   1007  f4a7		       0c		      .byte.b	#$0C	;
   1008  f4a8		       0e		      .byte.b	#$0E	;
   1009  f4a9		       0a		      .byte.b	#$0A	;
   1010  f4aa		       0e		      .byte.b	#$0E	;
   1011  f4ab		       0e		      .byte.b	#$0E	;
   1012  f4ac		       0e		      .byte.b	#$0E	;
   1013  f4ad		       0e		      .byte.b	#$0E	;
   1014  f4ae
   1015  f4ae							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1016  f4ae							;; Fill the 4K ROM
   1017  f4ae							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1018  fffc					      org	$FFFC	; insert two pointers at the end of ROM
   1019  fffc		       00 f0		      .word.w	Reset	; reset vector
   1020  fffe		       00 f0		      .word.w	Reset	; interrupt Vector
   1021  10000
   1022  10000
