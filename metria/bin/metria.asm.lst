------- FILE metria.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE metria.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE metria.asm
      5  0000 ????
      6  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  0000 ????						;; Macros
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????
     10  0000 ????				      MAC	wait_x_wsync
     11  0000 ????			   .WaitX
     12  0000 ????				      sta	WSYNC	; Wait for horizontal blank
     13  0000 ????				      dex		; X--
     14  0000 ????				      bne	.WaitX	; Loop until X = 0
     15  0000 ????				      ENDM
     16  0000 ????
     17  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     18  0000 ????						;; Contants
     19  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     20  0000 ????
     21  0000 ????	       00 08	   BW_MASK    =	%00001000	; bitmask for black & white switch
     22  0000 ????	       00 01	   RESET_MASK =	%00000001	; bitmask for reset switch
     23  0000 ????	       00 80	   LEFT_BTN_MASK =	%10000000	; bitmask for left joystick button
     24  0000 ????	       00 2b	   TIMER_VBLANK =	43	; value for TIM64T vertical blank timer
     25  0000 ????	       00 23	   TIMER_OVERSCAN =	35	; value for TIM64T overscan timer
     26  0000 ????
     27  0000 ????	       00 72	   RANDOM_SEED =	$72
     28  0000 ????
     29  0000 ????	       00 38	   LOGO_BK_COLOR =	$38	; logo mode background color - color mode
     30  0000 ????	       00 06	   LOGO_BK_BW =	$06	; logo mode background color - black & white
     31  0000 ????	       00 04	   LOGO_FADE_INIT_STATE =	4	; initial value for the logo fade in state
     32  0000 ????	       00 28	   LOGO_FADE_INIT_DELAY =	40	; initial delay value before logo fades in
     33  0000 ????	       00 14	   LOGO_FADE_DELAY =	20	; delay for each fade step - 20 frames/step
     34  0000 ????
     35  0000 ????	       00 c8	   GAME_BK_COLOR =	$C8	; game background color - color mode
     36  0000 ????	       00 08	   GAME_BK_BW =	$08	; game background color - black & white
     37  0000 ????	       00 c0	   GAME_PF_COLOR =	$C0	; game playfield color - color mode
     38  0000 ????	       00 02	   GAME_PF_BW =	$02	; game playfield color - black & white
     39  0000 ????	       00 78	   GAME_SKY_COLOR =	$78	; game sky color - color mode
     40  0000 ????	       00 04	   GAME_SKY_BW =	$04	; game sky color - black & white
     41  0000 ????
     42  0000 ????	       00 00	   GAME_SCOREBACK_COLOR =	$0	; game score board color - all modes
     43  0000 ????	       00 20	   GAME_GAMEOVER_COLOR =	$20	; game over color - color mode
     44  0000 ????	       00 02	   GAME_GAMEOVER_BW =	$02	; game over color - black & white
     45  0000 ????
     46  0000 ????	       00 09	   GAME_PLAYER_HEIGHT =	9	; player sprite height
     47  0000 ????	       00 09	   GAME_BUG_HEIGHT =	9	; bug sprite height
     48  0000 ????
     49  0000 ????	       00 09	   GAME_BIRD_HEIGHT =	9	; bird sprite height
     50  0000 ????
     51  0000 ????	       00 05	   GAME_DIGIT_HEIGHT =	5	; digit height
     52  0000 ????
     53  0000 ????	       00 10	   GAME_MAX_TIME =	%00010000
     54  0000 ????
     55  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     56  0000 ????						;; RAM variables located outside ROM at address $0080
     57  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     58  0000 ????
     59 U00ad ????				      seg.u	variables
     60 U0080					      org	$80	; RAM address memory start
     61 U0080
     62 U0080		       00	   LM_LogoFadeState ds	1	; current logo fade state
     63 U0081		       00	   LM_LogoFadeDelay ds	1	; current logo fade delay
     64 U0082
     65 U0082		       00	   GM_BackgroundColor ds	1
     66 U0083		       00	   GM_TreeColor ds	1
     67 U0084		       00	   GM_SkyColor ds	1
     68 U0085
     69 U0085		       00 00	   GM_PlayerPtr ds	2
     70 U0087		       00 00	   GM_PlayerColorPtr ds	2
     71 U0089		       00	   GM_PlayerXPos ds	1
     72 U008a		       00	   GM_PlayerYPos ds	1
     73 U008b
     74 U008b		       00 00	   GM_BirdPtr ds	2
     75 U008d		       00 00	   GM_BirdColorPtr ds	2
     76 U008f		       00	   GM_BirdYPos ds	1
     77 U0090		       00	   GM_BirdReflection ds	1
     78 U0091
     79 U0091		       00 00	   GM_BugColorPtr ds	2
     80 U0093		       00	   GM_BugXPos ds	1
     81 U0094		       00	   GM_BugYPos ds	1
     82 U0095		       00	   GM_PlayfieldIdx ds	1
     83 U0096
     84 U0096		       00	   PFCounter  ds	1
     85 U0097		       00	   Random     ds	1
     86 U0098
     87 U0098		       00	   GameOver   ds	1
     88 U0099		       00	   Score      ds	1	; stored as BCD
     89 U009a		       00	   Timer      ds	1	; stored as BCD
     90 U009b		       00	   TimerTick  ds	1
     91 U009c		       00 00	   OnesDigitOffset ds	2
     92 U009e		       00 00	   TensDigitOffset ds	2
     93 U00a0		       00	   Temp       ds	1
     94 U00a1		       00 00 00 00*ScoreSprite ds	6
     95 U00a7		       00 00 00 00*TimerSprite ds	6
     96 U00ad
     97 U00ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     98 U00ad							;; Program start - Located at top of ROM at address $F000
     99 U00ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    100 U00ad
    101  10000 ????				       seg	code
    102  f000					      org	$F000	; start address of ROM
    103  f000
    104  f000				   Reset
      0  f000					      CLEAN_START		; set machine to known state on startup
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
    106  f00a
    107  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    108  f00a							;; Init variables
    109  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    110  f00a
    111  f00a		       a9 72		      lda	#RANDOM_SEED
    112  f00c		       85 97		      sta	Random
    113  f00e
    114  f00e		       a9 04		      lda	#LOGO_FADE_INIT_STATE
    115  f010		       85 80		      sta	LM_LogoFadeState	; initialize logo fade state
    116  f012		       a9 28		      lda	#LOGO_FADE_INIT_DELAY
    117  f014		       85 81		      sta	LM_LogoFadeDelay	; initialize logo fade delay
    118  f016
      0  f016					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f016				   .POINTER   SET	GM_PlayerPtr
      2  f016				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f016
      4  f016		       a9 5e		      LDA	#<.ADDRESS
      5  f018		       85 85		      STA	.POINTER
      6  f01a		       a9 f4		      LDA	#>.ADDRESS
      7  f01c		       85 86		      STA	.POINTER+1
      8  f01e
      0  f01e					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f01e				   .POINTER   SET	GM_PlayerColorPtr
      2  f01e				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f01e
      4  f01e		       a9 c3		      LDA	#<.ADDRESS
      5  f020		       85 87		      STA	.POINTER
      6  f022		       a9 f4		      LDA	#>.ADDRESS
      7  f024		       85 88		      STA	.POINTER+1
      8  f026
    121  f026
      0  f026					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f026				   .POINTER   SET	GM_BugColorPtr
      2  f026				   .ADDRESS   SET	GM_BUG_COLOR
      3  f026
      4  f026		       a9 f9		      LDA	#<.ADDRESS
      5  f028		       85 91		      STA	.POINTER
      6  f02a		       a9 f4		      LDA	#>.ADDRESS
      7  f02c		       85 92		      STA	.POINTER+1
      8  f02e
    123  f02e
      0  f02e					      SET_POINTER	GM_BirdPtr, GM_BIRD_1
      1  f02e				   .POINTER   SET	GM_BirdPtr
      2  f02e				   .ADDRESS   SET	GM_BIRD_1
      3  f02e
      4  f02e		       a9 9d		      LDA	#<.ADDRESS
      5  f030		       85 8b		      STA	.POINTER
      6  f032		       a9 f4		      LDA	#>.ADDRESS
      7  f034		       85 8c		      STA	.POINTER+1
      8  f036
    125  f036
    126  f036		       a9 3e		      lda	#62
    127  f038		       85 89		      sta	GM_PlayerXPos
    128  f03a		       a9 15		      lda	#21
    129  f03c		       85 8a		      sta	GM_PlayerYPos
    130  f03e
    131  f03e		       a9 04		      lda	#4
    132  f040		       85 8f		      sta	GM_BirdYPos
    133  f042		       a9 00		      lda	#0
    134  f044		       85 90		      sta	GM_BirdReflection
    135  f046
    136  f046		       a9 01		      lda	#1
    137  f048		       85 9b		      sta	TimerTick
    138  f04a		       a9 10		      lda	#GAME_MAX_TIME
    139  f04c		       85 9a		      sta	Timer
    140  f04e
    141  f04e		       a9 01		      lda	#1
    142  f050		       85 98		      sta	GameOver
    143  f052
    144  f052		       a9 02		      lda	#2
    145  f054		       85 01		      sta	VBLANK	; turn on VBLANK
    146  f056
    147  f056							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    148  f056							;; LOGO MODE - LM
    149  f056							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    150  f056				   LM_NextFrame
      0  f056					      VERTICAL_SYNC		; vertical sync - 3 scanlines
      1  f056		       a9 0e		      lda	#%1110
      2  f058		       85 02	   .VSLP1     sta	WSYNC
      3  f05a		       85 00		      sta	VSYNC
      4  f05c		       4a		      lsr
      5  f05d		       d0 f9		      bne	.VSLP1
    152  f05f
    153  f05f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    154  f05f							;; Vertical Blank - 37 scanlines - 2812 mc
    155  f05f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    156  f05f		       a9 2b		      lda	#TIMER_VBLANK
    157  f061		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    158  f064
    159  f064				   .LM_Fade		; handles logo fade in
    160  f064		       a5 80		      lda	LM_LogoFadeState
    161  f066		       c9 00		      cmp	#0
    162  f068		       f0 0a		      beq	.LM_FadeDone	; if fade in is complete then jump out
    163  f06a		       c6 81		      dec	LM_LogoFadeDelay	; dec fade delay
    164  f06c		       d0 06		      bne	.LM_FadeDone	; if still waiting for delay then jump out
    165  f06e		       c6 80		      dec	LM_LogoFadeState	; dec fade in state
    166  f070		       a9 14		      lda	#LOGO_FADE_DELAY
    167  f072		       85 81		      sta	LM_LogoFadeDelay	; restore fade in delay
    168  f074				   .LM_FadeDone
    169  f074
    170  f074				   .LM_SetColor 		; set correct colors
    171  f074		       a4 80		      ldy	LM_LogoFadeState	; set Y = index of logo color
    172  f076		       ad 82 02 	      lda	SWCHB	; load console switches
    173  f079		       29 08		      and	#BW_MASK	; check if black & white
    174  f07b		       f0 0c		      beq	.LM_BWMode
    175  f07d				   .LM_ColorMode
    176  f07d		       a9 38		      lda	#LOGO_BK_COLOR
    177  f07f		       85 09		      sta	COLUBK	; set background color
    178  f081		       b9 04 f4 	      lda	LM_LogoFade_Color,Y
    179  f084		       85 08		      sta	COLUPF	; set logo color
    180  f086		       4c 92 f0 	      jmp	.LM_SetColorDone
    181  f089				   .LM_BWMode
    182  f089		       a9 06		      lda	#LOGO_BK_BW
    183  f08b		       85 09		      sta	COLUBK	; set background color
    184  f08d		       b9 09 f4 	      lda	LM_LogoFade_BW,Y
    185  f090		       85 08		      sta	COLUPF	; set logo color
    186  f092				   .LM_SetColorDone
    187  f092
    188  f092		       e6 97		      inc	Random
    189  f094
    190  f094				   .LM_VBLankWait
    191  f094		       ae 84 02 	      ldx	INTIM
    192  f097		       d0 fb		      bne	.LM_VBLankWait	; wait until timer is done
    193  f099		       a9 00		      lda	#0
    194  f09b		       85 02		      sta	WSYNC	; get a fresh scanline
    195  f09d							; -------------------------
    196  f09d		       85 01		      sta	VBLANK	; turn off VBLANK
    197  f09f
    198  f09f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    199  f09f							;; Playfield - 192 scanlines - 14592 mc
    200  f09f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    201  f09f
    202  f09f				   .LM_Top		; waste 68 scanlines
    203  f09f		       a2 44		      ldx	#68
      0  f0a1					      WAIT_X_WSYNC
      1  f0a1				   .WaitX
      2  f0a1		       85 02		      sta	WSYNC
      3  f0a3		       ca		      dex
      4  f0a4		       d0 fb		      bne	.WaitX
    205  f0a6							; -------------------------
    206  f0a6
    207  f0a6				   .LM_Middle		; logo is a total of 36 scanlines
    208  f0a6		       a0 00		      ldy	#0	; Y = index to playfield bytes
    209  f0a8				   .LM_LoopY
    210  f0a8		       a2 04		      ldx	#4	; draw every logo line 4 scanlines
    211  f0aa				   .LM_LoopX
    212  f0aa		       85 02		      sta	WSYNC	; get fresh scanline
    213  f0ac							; -------------------------
    214  f0ac		       b9 ce f3 	      lda	LM_LogoPF0,Y
    215  f0af		       85 0d		      sta	PF0	; set first part of left playfield
    216  f0b1		       b9 e0 f3 	      lda	LM_LogoPF1,Y
    217  f0b4		       85 0e		      sta	PF1	; set second part of left playfield
    218  f0b6		       b9 f2 f3 	      lda	LM_LogoPF2,Y
    219  f0b9		       85 0f		      sta	PF2	; set third part of left playfield
    220  f0bb		       c8		      iny		; inc Y to get the right playfield bytes
    221  f0bc		       b9 ce f3 	      lda	LM_LogoPF0,Y
    222  f0bf		       85 0d		      sta	PF0	; set first part of right playfield
    223  f0c1		       b9 e0 f3 	      lda	LM_LogoPF1,Y
    224  f0c4		       85 0e		      sta	PF1	; set second part of right playfield
    225  f0c6		       b9 f2 f3 	      lda	LM_LogoPF2,Y
    226  f0c9		       88		      dey		; dec Y to bea able to repeat left/right for 4 lines
    227  f0ca		       ea		      nop		; just for timing
    228  f0cb		       85 0f		      sta	PF2	; set third part of right playfield
    229  f0cd
    230  f0cd		       ca		      dex
    231  f0ce		       d0 da		      bne	.LM_LoopX	; loop while we havn't drawn 4 scanlines
    232  f0d0		       c8		      iny
    233  f0d1		       c8		      iny		; inc y by 2 to get to the next playfield byte pairs
    234  f0d2		       c0 12		      cpy	#18	; all bytes drawn?
    235  f0d4		       d0 d2		      bne	.LM_LoopY	; loop until all logo bytes are drawn
    236  f0d6
    237  f0d6				   .LM_TurnOffLogo		; use 1 scanline to turn off logo
    238  f0d6		       a5 02		      lda	WSYNC	; get a fresh scanline
    239  f0d8							; -------------------------
    240  f0d8		       a9 00		      lda	#0
    241  f0da		       85 0d		      sta	PF0	; reset playfield graphics
    242  f0dc		       85 0e		      sta	PF1
    243  f0de		       85 0f		      sta	PF2
    244  f0e0
    245  f0e0				   .LM_Bottom
    246  f0e0		       a2 57		      ldx	#87	; waste remaining 87 scanlines
      0  f0e2					      WAIT_X_WSYNC
      1  f0e2				   .WaitX
      2  f0e2		       85 02		      sta	WSYNC
      3  f0e4		       ca		      dex
      4  f0e5		       d0 fb		      bne	.WaitX
    248  f0e7							; -------------------------
    249  f0e7
    250  f0e7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    251  f0e7							;; Overscan - 30 scanlines - 2280 mc
    252  f0e7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    253  f0e7		       a9 02		      lda	#2	; A = 2 = #%00000010
    254  f0e9		       85 01		      sta	VBLANK	; Turn on VBLANK
    255  f0eb		       a9 23		      lda	#TIMER_OVERSCAN
    256  f0ed		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    257  f0f0
    258  f0f0				   .LM_CheckReset
    259  f0f0		       ad 82 02 	      lda	SWCHB	; load console switches
    260  f0f3		       29 01		      and	#RESET_MASK
    261  f0f5		       d0 03		      bne	.LM_NoReset
    262  f0f7		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    263  f0fa				   .LM_NoReset
    264  f0fa
    265  f0fa				   .LM_CheckLeftButton
    266  f0fa		       a5 0c		      lda	INPT4	; load left joystick button
    267  f0fc		       29 80		      and	#LEFT_BTN_MASK
    268  f0fe		       d0 08		      bne	.LM_NoLeftButton
    269  f100		       85 02		      sta	WSYNC
    270  f102		       20 3a f3 	      jsr	PlaceBug
    271  f105		       4c 12 f1 	      jmp	GM_NextFrame	; start game if button is pressed
    272  f108				   .LM_NoLeftButton
    273  f108
    274  f108				   .LM_OverscanWait
    275  f108		       ae 84 02 	      ldx	INTIM
    276  f10b		       d0 fb		      bne	.LM_OverscanWait	; wait until timer is done
    277  f10d		       85 02		      sta	WSYNC
    278  f10f							; -------------------------
    279  f10f		       4c 56 f0 	      jmp	LM_NextFrame
    280  f112
    281  f112
    282  f112							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    283  f112							;; GAME MODE - GM
    284  f112							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    285  f112				   GM_NextFrame
      0  f112					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f112		       a9 0e		      lda	#%1110
      2  f114		       85 02	   .VSLP1     sta	WSYNC
      3  f116		       85 00		      sta	VSYNC
      4  f118		       4a		      lsr
      5  f119		       d0 f9		      bne	.VSLP1
    287  f11b
    288  f11b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    289  f11b							;; Vertical Blank - 37 scanlines - 2812 mc
    290  f11b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    291  f11b		       a9 2b		      lda	#TIMER_VBLANK
    292  f11d		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    293  f120
    294  f120
    295  f120				   .GM_CheckCollisions
    296  f120
    297  f120				   .GM_CheckColP0ToP1
    298  f120		       a5 07		      lda	CXPPMM
    299  f122		       29 80		      and	#%10000000
    300  f124		       f0 0c		      beq	.GM_CheckColP0ToP1Done
    301  f126		       f8		      sed
    302  f127		       a5 99		      lda	Score
    303  f129		       18		      clc
    304  f12a		       69 01		      adc	#1
    305  f12c		       85 99		      sta	Score
    306  f12e		       d8		      cld
    307  f12f		       20 3a f3 	      jsr	PlaceBug
    308  f132				   .GM_CheckColP0ToP1Done
    309  f132
    310  f132				   .GM_CheckCollisionsDone
    311  f132		       85 2c		      sta	CXCLR
    312  f134
    313  f134		       a5 89		      lda	GM_PlayerXPos	; load player x pos
    314  f136		       a0 00		      ldy	#0	; set Y = 0 for player 0
    315  f138		       20 5d f3 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    316  f13b
    317  f13b		       a5 93		      lda	GM_BugXPos	; load bug x pos
    318  f13d		       a0 01		      ldy	#1	; set Y = 1 for player 1
    319  f13f		       20 5d f3 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    320  f142
    321  f142		       85 02		      sta	WSYNC	; geta fresh scanline
    322  f144							; -------------------------
    323  f144		       85 2a		      sta	HMOVE	; apply positions offset
    324  f146
    325  f146				   .GM_HandleTimer
    326  f146		       a5 98		      lda	GameOver
    327  f148		       d0 19		      bne	.GM_HandleTimerDone
    328  f14a
    329  f14a		       c6 9b		      dec	TimerTick
    330  f14c		       d0 15		      bne	.GM_HandleTimerDone
    331  f14e
    332  f14e		       a9 3c		      lda	#60
    333  f150		       85 9b		      sta	TimerTick
    334  f152
    335  f152		       f8		      sed
    336  f153		       a5 9a		      lda	Timer
    337  f155		       38		      sec
    338  f156		       e9 01		      sbc	#1
    339  f158		       85 9a		      sta	Timer
    340  f15a		       d8		      cld
    341  f15b
    342  f15b		       a5 9a		      lda	Timer
    343  f15d		       d0 04		      bne	.GM_HandleTimerDone
    344  f15f		       a9 01		      lda	#1
    345  f161		       85 98		      sta	GameOver
    346  f163				   .GM_HandleTimerDone
    347  f163
    348  f163				   .GM_SetColor 		; set correct colors
    349  f163		       ad 82 02 	      lda	SWCHB
    350  f166		       25 08		      and	BW_MASK
    351  f168		       f0 36		      beq	.GM_BWMode
    352  f16a				   .GM_ColorMode
    353  f16a		       a9 78		      lda	#GAME_SKY_COLOR
    354  f16c		       85 84		      sta	GM_SkyColor
    355  f16e		       a9 c8		      lda	#GAME_BK_COLOR
    356  f170		       85 82		      sta	GM_BackgroundColor
    357  f172		       a9 c0		      lda	#GAME_PF_COLOR
    358  f174		       85 83		      sta	GM_TreeColor
      0  f176					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f176				   .POINTER   SET	GM_PlayerColorPtr
      2  f176				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f176
      4  f176		       a9 c3		      LDA	#<.ADDRESS
      5  f178		       85 87		      STA	.POINTER
      6  f17a		       a9 f4		      LDA	#>.ADDRESS
      7  f17c		       85 88		      STA	.POINTER+1
      8  f17e
      0  f17e					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f17e				   .POINTER   SET	GM_BugColorPtr
      2  f17e				   .ADDRESS   SET	GM_BUG_COLOR
      3  f17e
      4  f17e		       a9 f9		      LDA	#<.ADDRESS
      5  f180		       85 91		      STA	.POINTER
      6  f182		       a9 f4		      LDA	#>.ADDRESS
      7  f184		       85 92		      STA	.POINTER+1
      8  f186
      0  f186					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_COLOR
      1  f186				   .POINTER   SET	GM_BirdColorPtr
      2  f186				   .ADDRESS   SET	GM_BIRD_COLOR
      3  f186
      4  f186		       a9 0b		      LDA	#<.ADDRESS
      5  f188		       85 8d		      STA	.POINTER
      6  f18a		       a9 f5		      LDA	#>.ADDRESS
      7  f18c		       85 8e		      STA	.POINTER+1
      8  f18e
    362  f18e
    363  f18e				   .GM_SetCoreboardColorCM
    364  f18e		       a5 9a		      lda	Timer
    365  f190		       f0 07		      beq	.GM_GameOverCM
    366  f192		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    367  f194		       85 09		      sta	COLUBK
    368  f196		       4c 9d f1 	      jmp	.GM_SetScoreboardColorCMDone
    369  f199				   .GM_GameOverCM
    370  f199		       a9 20		      lda	#GAME_GAMEOVER_COLOR
    371  f19b		       85 09		      sta	COLUBK
    372  f19d				   .GM_SetScoreboardColorCMDone
    373  f19d
    374  f19d		       4c d3 f1 	      jmp	.GM_SetColorDone
    375  f1a0				   .GM_BWMode
    376  f1a0		       a9 04		      lda	#GAME_SKY_BW
    377  f1a2		       85 84		      sta	GM_SkyColor
    378  f1a4		       a9 08		      lda	#GAME_BK_BW
    379  f1a6		       85 82		      sta	GM_BackgroundColor
    380  f1a8		       a9 02		      lda	#GAME_PF_BW
    381  f1aa		       85 83		      sta	GM_TreeColor
      0  f1ac					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_BW_IDLE
      1  f1ac				   .POINTER   SET	GM_PlayerColorPtr
      2  f1ac				   .ADDRESS   SET	GM_PLAYER_BW_IDLE
      3  f1ac
      4  f1ac		       a9 de		      LDA	#<.ADDRESS
      5  f1ae		       85 87		      STA	.POINTER
      6  f1b0		       a9 f4		      LDA	#>.ADDRESS
      7  f1b2		       85 88		      STA	.POINTER+1
      8  f1b4
      0  f1b4					      SET_POINTER	GM_BugColorPtr, GM_BUG_BW
      1  f1b4				   .POINTER   SET	GM_BugColorPtr
      2  f1b4				   .ADDRESS   SET	GM_BUG_BW
      3  f1b4
      4  f1b4		       a9 02		      LDA	#<.ADDRESS
      5  f1b6		       85 91		      STA	.POINTER
      6  f1b8		       a9 f5		      LDA	#>.ADDRESS
      7  f1ba		       85 92		      STA	.POINTER+1
      8  f1bc
      0  f1bc					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_BW
      1  f1bc				   .POINTER   SET	GM_BirdColorPtr
      2  f1bc				   .ADDRESS   SET	GM_BIRD_BW
      3  f1bc
      4  f1bc		       a9 14		      LDA	#<.ADDRESS
      5  f1be		       85 8d		      STA	.POINTER
      6  f1c0		       a9 f5		      LDA	#>.ADDRESS
      7  f1c2		       85 8e		      STA	.POINTER+1
      8  f1c4
    385  f1c4
    386  f1c4				   .GM_SetCoreboardColorBW
    387  f1c4		       a5 9a		      lda	Timer
    388  f1c6		       f0 07		      beq	.GM_GameOverBW
    389  f1c8		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    390  f1ca		       85 09		      sta	COLUBK
    391  f1cc		       4c d3 f1 	      jmp	.GM_SetScoreboardColorBWDone
    392  f1cf				   .GM_GameOverBW
    393  f1cf		       a9 02		      lda	#GAME_GAMEOVER_BW
    394  f1d1		       85 09		      sta	COLUBK
    395  f1d3				   .GM_SetScoreboardColorBWDone
    396  f1d3
    397  f1d3				   .GM_SetColorDone
    398  f1d3
    399  f1d3				   .GM_SetGraphics
    400  f1d3		       ad 82 02 	      lda	SWCHB
    401  f1d6		       29 40		      and	#%01000000
    402  f1d8		       f0 0b		      beq	.GM_SetDress
    403  f1da				   .GM_SetPants
      0  f1da					      SET_POINTER	GM_PlayerPtr, GM_PANTS_IDLE
      1  f1da				   .POINTER   SET	GM_PlayerPtr
      2  f1da				   .ADDRESS   SET	GM_PANTS_IDLE
      3  f1da
      4  f1da		       a9 79		      LDA	#<.ADDRESS
      5  f1dc		       85 85		      STA	.POINTER
      6  f1de		       a9 f4		      LDA	#>.ADDRESS
      7  f1e0		       85 86		      STA	.POINTER+1
      8  f1e2
    405  f1e2		       4c ed f1 	      jmp	.GM_SetGraphicsDone
    406  f1e5				   .GM_SetDress
      0  f1e5					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f1e5				   .POINTER   SET	GM_PlayerPtr
      2  f1e5				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f1e5
      4  f1e5		       a9 5e		      LDA	#<.ADDRESS
      5  f1e7		       85 85		      STA	.POINTER
      6  f1e9		       a9 f4		      LDA	#>.ADDRESS
      7  f1eb		       85 86		      STA	.POINTER+1
      8  f1ed
    408  f1ed				   .GM_SetGraphicsDone
    409  f1ed
    410  f1ed				   .GM_PlayfieldInit
    411  f1ed		       a9 47		      lda	#71
    412  f1ef		       85 96		      sta	PFCounter	; 144/2 scanelines
    413  f1f1		       20 71 f3 	      jsr	PrepareScoreAndTimer
    414  f1f4
    415  f1f4				   .GM_VBLankWait
    416  f1f4		       ae 84 02 	      ldx	INTIM
    417  f1f7		       d0 fb		      bne	.GM_VBLankWait	; wait until timer is done
    418  f1f9		       a9 00		      lda	#0
    419  f1fb		       85 02		      sta	WSYNC	; get a fresh scanline
    420  f1fd							; -------------------------
    421  f1fd		       85 01		      sta	VBLANK	; turn off VBLANK
    422  f1ff
    423  f1ff							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    424  f1ff							;; Score Board - 20 scanlines - 1520 mc
    425  f1ff							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    426  f1ff		       a9 0e		      lda	#$0E
    427  f201		       85 08		      sta	COLUPF
    428  f203
    429  f203		       a9 00		      lda	#0
    430  f205		       85 0d		      sta	PF0
    431  f207		       85 0e		      sta	PF1
    432  f209		       85 0f		      sta	PF2
    433  f20b		       a9 00		      lda	#00000000
    434  f20d		       85 0a		      sta	CTRLPF	; disable playfield/scoreboard reflection
    435  f20f
    436  f20f		       a2 05		      ldx	#5
      0  f211					      WAIT_X_WSYNC
      1  f211				   .WaitX
      2  f211		       85 02		      sta	WSYNC
      3  f213		       ca		      dex
      4  f214		       d0 fb		      bne	.WaitX
    438  f216							; -------------------------
    439  f216
    440  f216		       a0 05		      ldy	#5
    441  f218				   .GM_ScoreboardLoop
    442  f218
    443  f218					      REPEAT	2
    444  f218		       b9 a1 00 	      lda	ScoreSprite,Y
    445  f21b		       85 0e		      sta	PF1
    446  f21d
    447  f21d					      REPEAT	13
    448  f21d		       ea		      nop
    447  f21d					      REPEND
    448  f21e		       ea		      nop
    447  f21e					      REPEND
    448  f21f		       ea		      nop
    447  f21f					      REPEND
    448  f220		       ea		      nop
    447  f220					      REPEND
    448  f221		       ea		      nop
    447  f221					      REPEND
    448  f222		       ea		      nop
    447  f222					      REPEND
    448  f223		       ea		      nop
    447  f223					      REPEND
    448  f224		       ea		      nop
    447  f224					      REPEND
    448  f225		       ea		      nop
    447  f225					      REPEND
    448  f226		       ea		      nop
    447  f226					      REPEND
    448  f227		       ea		      nop
    447  f227					      REPEND
    448  f228		       ea		      nop
    447  f228					      REPEND
    448  f229		       ea		      nop
    449  f22a					      REPEND
    450  f22a
    451  f22a		       b9 a7 00 	      lda	TimerSprite,Y
    452  f22d		       85 0e		      sta	PF1
    453  f22f
    454  f22f		       85 02		      sta	WSYNC
    455  f231							; -------------------------
    443  f231					      REPEND
    444  f231		       b9 a1 00 	      lda	ScoreSprite,Y
    445  f234		       85 0e		      sta	PF1
    446  f236
    447  f236					      REPEAT	13
    448  f236		       ea		      nop
    447  f236					      REPEND
    448  f237		       ea		      nop
    447  f237					      REPEND
    448  f238		       ea		      nop
    447  f238					      REPEND
    448  f239		       ea		      nop
    447  f239					      REPEND
    448  f23a		       ea		      nop
    447  f23a					      REPEND
    448  f23b		       ea		      nop
    447  f23b					      REPEND
    448  f23c		       ea		      nop
    447  f23c					      REPEND
    448  f23d		       ea		      nop
    447  f23d					      REPEND
    448  f23e		       ea		      nop
    447  f23e					      REPEND
    448  f23f		       ea		      nop
    447  f23f					      REPEND
    448  f240		       ea		      nop
    447  f240					      REPEND
    448  f241		       ea		      nop
    447  f241					      REPEND
    448  f242		       ea		      nop
    449  f243					      REPEND
    450  f243
    451  f243		       b9 a7 00 	      lda	TimerSprite,Y
    452  f246		       85 0e		      sta	PF1
    453  f248
    454  f248		       85 02		      sta	WSYNC
    455  f24a							; -------------------------
    456  f24a					      REPEND
    457  f24a
    458  f24a		       88		      dey
    459  f24b		       d0 cb		      bne	.GM_ScoreboardLoop
    460  f24d
    461  f24d		       a9 00		      lda	#0
    462  f24f		       85 0e		      sta	PF1
    463  f251
    464  f251		       a2 05		      ldx	#5
      0  f253					      WAIT_X_WSYNC
      1  f253				   .WaitX
      2  f253		       85 02		      sta	WSYNC
      3  f255		       ca		      dex
      4  f256		       d0 fb		      bne	.WaitX
    466  f258
    467  f258							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    468  f258							;; Sky - 30 scanlines - 1520 mc
    469  f258							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    470  f258		       a5 84		      lda	GM_SkyColor
    471  f25a		       85 09		      sta	COLUBK
    472  f25c		       a2 0e		      ldx	#14
    473  f25e		       a9 00		      lda	#0
    474  f260		       85 25		      sta	VDELP0	; clear vertical delay för player 0
    475  f262
    476  f262		       a5 90		      lda	GM_BirdReflection
    477  f264		       85 0b		      sta	REFP0
    478  f266
    479  f266				   .GM_SkyLoop
    480  f266
    481  f266				   .GM_DrawBird
    482  f266		       8a		      txa		; transfer X to A
    483  f267		       38		      sec		; make sure carry flag is set
    484  f268		       e5 8f		      sbc	GM_BirdYPos	; subtract sprite Y coordinate
    485  f26a		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    486  f26c		       90 02		      bcc	.GM_WriteBird	; if result < SpriteHeight, call subroutine
    487  f26e		       a9 00		      lda	#0	; else, set index to 0
    488  f270				   .GM_WriteBird
    489  f270		       a8		      tay
    490  f271		       b1 8b		      lda	(GM_BirdPtr),Y	; load player bitmap slice of data
    491  f273		       85 02		      sta	WSYNC	; wait for next scanline
    492  f275							; -------------------------
    493  f275		       85 1b		      sta	GRP0	; set graphics for player 0 slice
    494  f277		       b1 8d		      lda	(GM_BirdColorPtr),Y	; load player color from lookup table
    495  f279		       85 06		      sta	COLUP0	; set color for player 1 slice
    496  f27b				   .GM_DrawBirdDone
    497  f27b		       85 02		      sta	WSYNC	; wait for next scanline
    498  f27d							; -------------------------
    499  f27d		       ca		      dex
    500  f27e		       d0 e6		      bne	.GM_SkyLoop
    501  f280
    502  f280
    503  f280							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    504  f280							;; Playfield - 152 scanlines - 11552 mc
    505  f280							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    506  f280
    507  f280		       a9 01		      lda	#1
    508  f282		       85 25		      sta	VDELP0	; set vertical delay för player 0
    509  f284		       a9 00		      lda	#0
    510  f286		       85 0b		      sta	REFP0
    511  f288		       85 02		      sta	WSYNC
    512  f28a		       a5 83		      lda	GM_TreeColor
    513  f28c		       85 08		      sta	COLUPF
    514  f28e		       a9 05		      lda	#%00000101
    515  f290		       85 0a		      sta	CTRLPF	; enable playfield reflection
    516  f292		       85 02		      sta	WSYNC
    517  f294		       a5 82		      lda	GM_BackgroundColor
    518  f296		       85 09		      sta	COLUBK
    519  f298
    520  f298				   .GM_PlayfieldLoop
    521  f298
    522  f298				   .GM_DrawPlayer
    523  f298		       a5 96		      lda	PFCounter	; A = current scanline in playfield
    524  f29a		       38		      sec		; make sure carry flag is set
    525  f29b		       e5 8a		      sbc	GM_PlayerYPos	; subtract sprite Y coordinate
    526  f29d		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    527  f29f		       90 02		      bcc	.GM_WritePlayer	; if result < height then A contains the index
    528  f2a1		       a9 00		      lda	#0	; else, set A to 0
    529  f2a3				   .GM_WritePlayer
    530  f2a3		       a8		      tay
    531  f2a4		       b1 85		      lda	(GM_PlayerPtr),Y	; load player bitmap slice of data
    532  f2a6		       85 1b		      sta	GRP0	; set graphics for player 0 slice - delayed
    533  f2a8		       b1 87		      lda	(GM_PlayerColorPtr),Y	; load player color from lookup table
    534  f2aa		       aa		      tax
    535  f2ab				   .GM_DrawPlayerDone
    536  f2ab
    537  f2ab				   .GM_DrawBug
    538  f2ab		       a5 96		      lda	PFCounter	; transfer X to A
    539  f2ad		       38		      sec		; make sure carry flag is set
    540  f2ae		       e5 94		      sbc	GM_BugYPos	; subtract sprite Y coordinate
    541  f2b0		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    542  f2b2		       90 02		      bcc	.GM_WriteBug	; if result < SpriteHeight, call subroutine
    543  f2b4		       a9 00		      lda	#0	; else, set index to 0
    544  f2b6				   .GM_WriteBug
    545  f2b6		       a8		      tay
    546  f2b7		       b9 94 f4 	      lda	GM_BUG,Y	; load player bitmap slice of data
    547  f2ba		       85 02		      sta	WSYNC	; wait for next scanline
    548  f2bc							; -------------------------
    549  f2bc		       85 1c		      sta	GRP1	; set graphics for player 1 + 0 slice
    550  f2be		       86 06		      stx	COLUP0	; set color for player 0 slice
    551  f2c0		       b1 91		      lda	(GM_BugColorPtr),Y	; load player color from lookup table
    552  f2c2		       85 07		      sta	COLUP1	; set color for player 1 slice
    553  f2c4				   .GM_DrawBugDone
    554  f2c4
    555  f2c4				   .GM_DrawTree
    556  f2c4		       a5 96		      lda	PFCounter	; A = current scanline in playfield
    557  f2c6		       38		      sec		; make sure carry flag is set
    558  f2c7		       e9 1c		      sbc	#28	; subtract sprite Y coordinate
    559  f2c9		       c9 14		      cmp	#20	; are we inside the sprite height bounds?
    560  f2cb		       90 02		      bcc	.GM_WriteTree	; if result < height then A contains the index
    561  f2cd		       a9 00		      lda	#0	; else, set A to 0
    562  f2cf				   .GM_WriteTree
    563  f2cf		       a8		      tay
    564  f2d0		       b9 af f4 	      lda	GM_TREE,y
    565  f2d3		       85 0f		      sta	PF2
    566  f2d5				   .GM_DrawTreeDone
    567  f2d5
    568  f2d5		       85 02		      sta	WSYNC
    569  f2d7							; -------------------------
    570  f2d7
    571  f2d7		       c6 96		      dec	PFCounter
    572  f2d9		       d0 bd		      bne	.GM_PlayfieldLoop	; repeat next scanline until finished
    573  f2db
    574  f2db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    575  f2db							;; Overscan - 30 scanlines - 2280 mc
    576  f2db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    577  f2db		       a9 02		      lda	#2	; A = 2 = #%00000010
    578  f2dd		       85 01		      sta	VBLANK	; Turn on VBLANK
    579  f2df		       a9 23		      lda	#TIMER_OVERSCAN
    580  f2e1		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    581  f2e4
    582  f2e4				   .GM_CheckReset
    583  f2e4		       ad 82 02 	      lda	SWCHB	; load console switches
    584  f2e7		       29 01		      and	#RESET_MASK
    585  f2e9		       d0 03		      bne	.GM_NoReset
    586  f2eb		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    587  f2ee				   .GM_NoReset
    588  f2ee
    589  f2ee		       a2 00		      ldx	#0
    590  f2f0				   .GM_CheckInputUp
    591  f2f0		       a9 10		      lda	#%00010000
    592  f2f2		       2c 80 02 	      bit	SWCHA
    593  f2f5		       d0 04		      bne	.GM_CheckInputDown
    594  f2f7		       a2 01		      ldx	#1
    595  f2f9		       e6 8a		      inc	GM_PlayerYPos
    596  f2fb
    597  f2fb				   .GM_CheckInputDown
    598  f2fb		       a9 20		      lda	#%00100000
    599  f2fd		       2c 80 02 	      bit	SWCHA
    600  f300		       d0 04		      bne	.GM_CheckInputLeft
    601  f302		       a2 01		      ldx	#1
    602  f304		       c6 8a		      dec	GM_PlayerYPos
    603  f306
    604  f306				   .GM_CheckInputLeft
    605  f306		       a9 40		      lda	#%01000000
    606  f308		       2c 80 02 	      bit	SWCHA
    607  f30b		       d0 08		      bne	.GM_CheckInputRight
    608  f30d		       a9 08		      lda	#%00001000
    609  f30f		       85 90		      sta	GM_BirdReflection
    610  f311		       a2 01		      ldx	#1
    611  f313		       c6 89		      dec	GM_PlayerXPos
    612  f315
    613  f315				   .GM_CheckInputRight
    614  f315		       a9 80		      lda	#%10000000
    615  f317		       2c 80 02 	      bit	SWCHA
    616  f31a		       d0 08		      bne	.GM_CheckInputDone
    617  f31c		       a9 00		      lda	#0
    618  f31e		       85 90		      sta	GM_BirdReflection
    619  f320		       a2 01		      ldx	#1
    620  f322		       e6 89		      inc	GM_PlayerXPos
    621  f324
    622  f324				   .GM_CheckInputDone
    623  f324
    624  f324		       e0 01		      cpx	#1
    625  f326		       d0 08		      bne	.GM_Continue
    626  f328		       a5 9a		      lda	Timer
    627  f32a		       f0 04		      beq	.GM_Continue
    628  f32c		       a9 00		      lda	#0
    629  f32e		       85 98		      sta	GameOver
    630  f330				   .GM_Continue
    631  f330
    632  f330				   .GM_OverscanWait
    633  f330		       ae 84 02 	      ldx	INTIM
    634  f333		       d0 fb		      bne	.GM_OverscanWait	; wait until timer is done
    635  f335		       85 02		      sta	WSYNC
    636  f337							; -------------------------
    637  f337		       4c 12 f1 	      jmp	GM_NextFrame
    638  f33a
    639  f33a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    640  f33a							;; Subruotines
    641  f33a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    642  f33a
    643  f33a				   PlaceBug   subroutine
    644  f33a		       20 4d f3 	      jsr	Randomize
    645  f33d		       a5 97		      lda	Random
    646  f33f		       29 7f		      and	#%01111111
    647  f341		       85 93		      sta	GM_BugXPos
    648  f343		       20 4d f3 	      jsr	Randomize
    649  f346		       a5 97		      lda	Random
    650  f348		       29 3f		      and	#%00111111
    651  f34a		       85 94		      sta	GM_BugYPos
    652  f34c		       60		      rts
    653  f34d
    654  f34d				   Randomize  subroutine
    655  f34d		       a5 97		      lda	Random
    656  f34f		       0a		      asl
    657  f350		       45 97		      eor	Random
    658  f352		       0a		      asl
    659  f353		       45 97		      eor	Random
    660  f355		       0a		      asl
    661  f356		       0a		      asl
    662  f357		       45 97		      eor	Random
    663  f359		       0a		      asl
    664  f35a		       26 97		      rol	Random	; performs a series of shifts and bit operations
    665  f35c		       60		      rts
    666  f35d
    667  f35d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    668  f35d							;; SetObjectXPos
    669  f35d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    670  f35d							;; A : Contains the the desired x-coordinate
    671  f35d							;; Y=0 : Player0
    672  f35d							;; Y=1 : Player1
    673  f35d							;; Y=2 : Missile0
    674  f35d							;; Y=3 : Missile1
    675  f35d							;; Y=4 : Ball
    676  f35d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    677  f35d
    678  f35d				   SetObjectXPos subroutine
    679  f35d		       38		      sec		; Set carry flag
    680  f35e		       85 02		      sta	WSYNC	; Get fresh scanline
    681  f360							; -------------------------
    682  f360				   .Div15Loop		; Divide A with 15 by subtraction in loop
    683  f360		       e9 0f		      sbc	#15	; Subtract 15 from A
    684  f362		       b0 fc		      bcs	.Div15Loop	; Loop if carry flag is set
    685  f364		       49 07		      eor	#7	; Adjust the remainder in A between -8 and 7
    686  f366					      REPEAT	4	; Repeat 4 times
    687  f366		       0a		      asl		; Shift bits left by one
    686  f366					      REPEND		; End of repeat
    687  f367		       0a		      asl		; Shift bits left by one
    686  f367					      REPEND		; End of repeat
    687  f368		       0a		      asl		; Shift bits left by one
    686  f368					      REPEND		; End of repeat
    687  f369		       0a		      asl		; Shift bits left by one
    688  f36a					      REPEND		; End of repeat
    689  f36a		       99 20 00 	      sta	HMP0,Y	; Set fine position value for object HMP0+Y
    690  f36d		       99 10 00 	      sta	RESP0,Y	; Seset rough position for object HMP0+Y
    691  f370		       60		      rts
    692  f371
    693  f371							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    694  f371							;; Subroutine to handle scoreboard digits to be displayed on the screen
    695  f371							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    696  f371							;; This is stored using BCD, so the display will be displayed in dec numbers.
    697  f371							;; Converts the high and low nibbles of the variables Score and Timer
    698  f371							;; into offsets into the digit lookup table so the values can be displayed.
    699  f371							;; Each digit has a height of 5 bytes in the lookup table.
    700  f371							;;
    701  f371							;; For the low nibble we need to multiply by 5:
    702  f371							;;   - we can use left shifts to perform multiplation by 2
    703  f371							;;   - for any number N, the value of N*5 = (N*2*2)+N
    704  f371							;;
    705  f371							;; For the upper nibble, since it is already times 16, we need to divide it
    706  f371							;; and then multiply it by 5:
    707  f371							;;   - we can use right shift to perform division by 2
    708  f371							;;   - for any number N, the value of (N/16)*5 = (N/4)+(N/16)
    709  f371							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    710  f371				   PrepareScoreAndTimer subroutine
    711  f371		       a2 01		      ldx	#1	; X register is the loop counter
    712  f373				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    713  f373
    714  f373		       b5 99		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    715  f375		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111
    716  f377		       85 a0		      sta	Temp	; save the value of A into Temp
    717  f379		       0a		      asl		; shift left (it is now N*2)
    718  f37a		       0a		      asl		; shift left (it is now N*4)
    719  f37b		       65 a0		      adc	Temp	; add the value saved in Temp (+N)
    720  f37d		       95 9c		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset
    721  f37f
    722  f37f		       b5 99		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    723  f381		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    724  f383		       4a		      lsr		; shift right (it is now N/2)
    725  f384		       4a		      lsr		; shift right (it is now N/4)
    726  f385		       85 a0		      sta	Temp	; save the value of A into Temp
    727  f387		       4a		      lsr		; shift right (it is now N/8)
    728  f388		       4a		      lsr		; shift right (it is now N/16)
    729  f389		       65 a0		      adc	Temp	; add the value saved in Temp (N/16+N/4)
    730  f38b		       95 9e		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    731  f38d		       ca		      dex		; X--
    732  f38e		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    733  f390
    734  f390		       a2 05		      ldx	#5
    735  f392				   .SpriteLoop
    736  f392
    737  f392		       a4 9e		      ldy	TensDigitOffset
    738  f394		       b9 0e f4 	      lda	Digits,y
    739  f397		       29 f0		      and	#$F0
    740  f399		       85 a0		      sta	Temp
    741  f39b
    742  f39b		       a4 9c		      ldy	OnesDigitOffset
    743  f39d		       b9 0e f4 	      lda	Digits,y
    744  f3a0		       29 0f		      and	#$0F
    745  f3a2		       05 a0		      ora	Temp
    746  f3a4		       85 a0		      sta	Temp
    747  f3a6
    748  f3a6		       a5 a0		      lda	Temp
    749  f3a8		       95 a1		      sta	ScoreSprite,X
    750  f3aa
    751  f3aa		       a4 9f		      ldy	TensDigitOffset+1
    752  f3ac		       b9 0e f4 	      lda	Digits,y
    753  f3af		       29 f0		      and	#$F0
    754  f3b1		       85 a0		      sta	Temp
    755  f3b3
    756  f3b3		       a4 9d		      ldy	OnesDigitOffset+1
    757  f3b5		       b9 0e f4 	      lda	Digits,y
    758  f3b8		       29 0f		      and	#$0F
    759  f3ba		       05 a0		      ora	Temp
    760  f3bc		       85 a0		      sta	Temp
    761  f3be
    762  f3be		       a5 a0		      lda	Temp
    763  f3c0		       95 a7		      sta	TimerSprite,X
    764  f3c2
    765  f3c2		       e6 9e		      inc	TensDigitOffset
    766  f3c4		       e6 9f		      inc	TensDigitOffset+1
    767  f3c6		       e6 9c		      inc	OnesDigitOffset
    768  f3c8		       e6 9d		      inc	OnesDigitOffset+1
    769  f3ca
    770  f3ca		       ca		      dex
    771  f3cb		       d0 c5		      bne	.SpriteLoop
    772  f3cd
    773  f3cd		       60		      rts
    774  f3ce
    775  f3ce							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    776  f3ce							;; Lookup tabes
    777  f3ce							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    778  f3ce
    779  f3ce							; https://www.masswerk.at/vcs-tools/TinyPlayfieldEditor/
    780  f3ce							; mode: asymmetric repeat line-height 4
    781  f3ce				   LM_LogoPF0
    782  f3ce		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$90
    783  f3d6		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$40,$00,$40
    784  f3de		       00 70		      .byte.b	$00,$70
    785  f3e0				   LM_LogoPF1
    786  f3e0		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$00,$05,$DE
    787  f3e8		       0a 42 0a 4e*	      .byte.b	$0A,$42,$0A,$4E,$08,$52,$08,$56
    788  f3f0		       38 7b		      .byte.b	$38,$7B
    789  f3f2				   LM_LogoPF2
    790  f3f2		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$80,$00,$F8,$00
    791  f3fa		       a5 00 a5 00*	      .byte.b	$A5,$00,$A5,$00,$BF,$00,$85,$00
    792  f402		       39 03		      .byte.b	$39,$03
    793  f404
    794  f404				   LM_LogoFade_Color
    795  f404		       0e 3e 3c 3a*	      .byte.b	$0E,$3E,$3C,$3A,$38
    796  f409
    797  f409				   LM_LogoFade_BW
    798  f409		       0e 0c 0a 08*	      .byte.b	$0E,$0C,$0A,$08,$06
    799  f40e
    800  f40e				   Digits
    801  f40e		       77		      .byte.b	%01110111	; ### ###
    802  f40f		       55		      .byte.b	%01010101	; # # # #
    803  f410		       55		      .byte.b	%01010101	; # # # #
    804  f411		       55		      .byte.b	%01010101	; # # # #
    805  f412		       77		      .byte.b	%01110111	; ### ###
    806  f413
    807  f413		       11		      .byte.b	%00010001	;   #	 #
    808  f414		       11		      .byte.b	%00010001	;   #	 #
    809  f415		       11		      .byte.b	%00010001	;   #	 #
    810  f416		       11		      .byte.b	%00010001	;   #	 #
    811  f417		       11		      .byte.b	%00010001	;   #	 #
    812  f418
    813  f418		       77		      .byte.b	%01110111	; ### ###
    814  f419		       11		      .byte.b	%00010001	;   #	 #
    815  f41a		       77		      .byte.b	%01110111	; ### ###
    816  f41b		       44		      .byte.b	%01000100	; #   #
    817  f41c		       77		      .byte.b	%01110111	; ### ###
    818  f41d
    819  f41d		       77		      .byte.b	%01110111	; ### ###
    820  f41e		       11		      .byte.b	%00010001	;   #	 #
    821  f41f		       33		      .byte.b	%00110011	;  ##	##
    822  f420		       11		      .byte.b	%00010001	;   #	 #
    823  f421		       77		      .byte.b	%01110111	; ### ###
    824  f422
    825  f422		       55		      .byte.b	%01010101	; # # # #
    826  f423		       55		      .byte.b	%01010101	; # # # #
    827  f424		       77		      .byte.b	%01110111	; ### ###
    828  f425		       11		      .byte.b	%00010001	;   #	 #
    829  f426		       11		      .byte.b	%00010001	;   #	 #
    830  f427
    831  f427		       77		      .byte.b	%01110111	; ### ###
    832  f428		       44		      .byte.b	%01000100	; #   #
    833  f429		       77		      .byte.b	%01110111	; ### ###
    834  f42a		       11		      .byte.b	%00010001	;   #	 #
    835  f42b		       77		      .byte.b	%01110111	; ### ###
    836  f42c
    837  f42c		       77		      .byte.b	%01110111	; ### ###
    838  f42d		       44		      .byte.b	%01000100	; #   #
    839  f42e		       77		      .byte.b	%01110111	; ### ###
    840  f42f		       55		      .byte.b	%01010101	; # # # #
    841  f430		       77		      .byte.b	%01110111	; ### ###
    842  f431
    843  f431		       77		      .byte.b	%01110111	; ### ###
    844  f432		       11		      .byte.b	%00010001	;   #	 #
    845  f433		       11		      .byte.b	%00010001	;   #	 #
    846  f434		       11		      .byte.b	%00010001	;   #	 #
    847  f435		       11		      .byte.b	%00010001	;   #	 #
    848  f436
    849  f436		       77		      .byte.b	%01110111	; ### ###
    850  f437		       55		      .byte.b	%01010101	; # # # #
    851  f438		       77		      .byte.b	%01110111	; ### ###
    852  f439		       55		      .byte.b	%01010101	; # # # #
    853  f43a		       77		      .byte.b	%01110111	; ### ###
    854  f43b
    855  f43b		       77		      .byte.b	%01110111	; ### ###
    856  f43c		       55		      .byte.b	%01010101	; # # # #
    857  f43d		       77		      .byte.b	%01110111	; ### ###
    858  f43e		       11		      .byte.b	%00010001	;   #	 #
    859  f43f		       77		      .byte.b	%01110111	; ### ###
    860  f440
    861  f440		       22		      .byte.b	%00100010	;  #	#
    862  f441		       55		      .byte.b	%01010101	; # # # #
    863  f442		       77		      .byte.b	%01110111	; ### ###
    864  f443		       55		      .byte.b	%01010101	; # # # #
    865  f444		       55		      .byte.b	%01010101	; # # # #
    866  f445
    867  f445		       77		      .byte.b	%01110111	; ### ###
    868  f446		       55		      .byte.b	%01010101	; # # # #
    869  f447		       66		      .byte.b	%01100110	; ##  ##
    870  f448		       55		      .byte.b	%01010101	; # # # #
    871  f449		       77		      .byte.b	%01110111	; ### ###
    872  f44a
    873  f44a		       77		      .byte.b	%01110111	; ### ###
    874  f44b		       44		      .byte.b	%01000100	; #   #
    875  f44c		       44		      .byte.b	%01000100	; #   #
    876  f44d		       44		      .byte.b	%01000100	; #   #
    877  f44e		       77		      .byte.b	%01110111	; ### ###
    878  f44f
    879  f44f		       66		      .byte.b	%01100110	; ##  ##
    880  f450		       55		      .byte.b	%01010101	; # # # #
    881  f451		       55		      .byte.b	%01010101	; # # # #
    882  f452		       55		      .byte.b	%01010101	; # # # #
    883  f453		       66		      .byte.b	%01100110	; ##  ##
    884  f454
    885  f454		       77		      .byte.b	%01110111	; ### ###
    886  f455		       44		      .byte.b	%01000100	; #   #
    887  f456		       77		      .byte.b	%01110111	; ### ###
    888  f457		       44		      .byte.b	%01000100	; #   #
    889  f458		       77		      .byte.b	%01110111	; ### ###
    890  f459
    891  f459		       77		      .byte.b	%01110111	; ### ###
    892  f45a		       44		      .byte.b	%01000100	; #   #
    893  f45b		       66		      .byte.b	%01100110	; ##  ##
    894  f45c		       44		      .byte.b	%01000100	; #   #
    895  f45d		       44		      .byte.b	%01000100	; #   #
    896  f45e
    897  f45e							;---Graphics Data from PlayerPal 2600---
    898  f45e
    899  f45e				   GM_DRESS_IDLE
    900  f45e		       00		      .byte.b	#0
    901  f45f		       7e		      .byte.b	#%01111110	;$70
    902  f460		       7e		      .byte.b	#%01111110	;$70
    903  f461		       3c		      .byte.b	#%00111100	;$70
    904  f462		       5a		      .byte.b	#%01011010	;$84
    905  f463		       7e		      .byte.b	#%01111110	;$84
    906  f464		       18		      .byte.b	#%00011000	;$F4
    907  f465		       3c		      .byte.b	#%00111100	;$00
    908  f466		       18		      .byte.b	#%00011000	;$00
    909  f467				   GM_DRESS_WALK1
    910  f467		       00		      .byte.b	#0
    911  f468		       78		      .byte.b	#%01111000	;$70
    912  f469		       7e		      .byte.b	#%01111110	;$70
    913  f46a		       3c		      .byte.b	#%00111100	;$70
    914  f46b		       1a		      .byte.b	#%00011010	;$84
    915  f46c		       7e		      .byte.b	#%01111110	;$84
    916  f46d		       18		      .byte.b	#%00011000	;$F4
    917  f46e		       3c		      .byte.b	#%00111100	;$00
    918  f46f		       18		      .byte.b	#%00011000	;$00
    919  f470				   GM_DRESS_WALK2
    920  f470		       00		      .byte.b	#0
    921  f471		       1e		      .byte.b	#%00011110	;$70
    922  f472		       7e		      .byte.b	#%01111110	;$70
    923  f473		       3c		      .byte.b	#%00111100	;$70
    924  f474		       58		      .byte.b	#%01011000	;$84
    925  f475		       7e		      .byte.b	#%01111110	;$84
    926  f476		       18		      .byte.b	#%00011000	;$F4
    927  f477		       3c		      .byte.b	#%00111100	;$00
    928  f478		       18		      .byte.b	#%00011000	;$00
    929  f479				   GM_PANTS_IDLE
    930  f479		       00		      .byte.b	#0
    931  f47a		       66		      .byte.b	#%01100110	;$70
    932  f47b		       24		      .byte.b	#%00100100	;$70
    933  f47c		       3c		      .byte.b	#%00111100	;$70
    934  f47d		       5a		      .byte.b	#%01011010	;$84
    935  f47e		       7e		      .byte.b	#%01111110	;$84
    936  f47f		       18		      .byte.b	#%00011000	;$F4
    937  f480		       3c		      .byte.b	#%00111100	;$00
    938  f481		       18		      .byte.b	#%00011000	;$00
    939  f482				   GM_PANTS_WALK1
    940  f482		       00		      .byte.b	#0
    941  f483		       60		      .byte.b	#%01100000	;$70
    942  f484		       26		      .byte.b	#%00100110	;$70
    943  f485		       3c		      .byte.b	#%00111100	;$70
    944  f486		       1a		      .byte.b	#%00011010	;$84
    945  f487		       7e		      .byte.b	#%01111110	;$84
    946  f488		       18		      .byte.b	#%00011000	;$F4
    947  f489		       3c		      .byte.b	#%00111100	;$00
    948  f48a		       18		      .byte.b	#%00011000	;$00
    949  f48b				   GM_PANTS_WALK2
    950  f48b		       00		      .byte.b	#0
    951  f48c		       06		      .byte.b	#%00000110	;$70
    952  f48d		       64		      .byte.b	#%01100100	;$70
    953  f48e		       3c		      .byte.b	#%00111100	;$70
    954  f48f		       58		      .byte.b	#%01011000	;$84
    955  f490		       7e		      .byte.b	#%01111110	;$84
    956  f491		       18		      .byte.b	#%00011000	;$F4
    957  f492		       3c		      .byte.b	#%00111100	;$00
    958  f493		       18		      .byte.b	#%00011000	;$00
    959  f494				   GM_BUG
    960  f494		       00		      .byte.b	#0
    961  f495		       00		      .byte.b	#%00000000	;$00
    962  f496		       00		      .byte.b	#%00000000	;$00
    963  f497		       52		      .byte.b	#%01010010	;$F0
    964  f498		       3c		      .byte.b	#%00111100	;$F0
    965  f499		       3c		      .byte.b	#%00111100	;$F2
    966  f49a		       52		      .byte.b	#%01010010	;$F0
    967  f49b		       00		      .byte.b	#%00000000	;$00
    968  f49c		       00		      .byte.b	#%00000000	;$00
    969  f49d				   GM_BIRD_1
    970  f49d		       00		      .byte.b	#0
    971  f49e		       00		      .byte.b	#%00000000	;$1C
    972  f49f		       01		      .byte.b	#%00000001	;$1C
    973  f4a0		       3f		      .byte.b	#%00111111	;$0E
    974  f4a1		       fe		      .byte.b	#%11111110	;$0A
    975  f4a2		       18		      .byte.b	#%00011000	;$0E
    976  f4a3		       76		      .byte.b	#%01110110	;$0E
    977  f4a4		       00		      .byte.b	#%00000000	;$0E
    978  f4a5		       00		      .byte.b	#%00000000	;$0E
    979  f4a6				   GM_BIRD_2
    980  f4a6		       00		      .byte.b	#0
    981  f4a7		       00		      .byte.b	#%00000000	;$1C
    982  f4a8		       01		      .byte.b	#%00000001	;$1C
    983  f4a9		       3f		      .byte.b	#%00111111	;$0E
    984  f4aa		       fe		      .byte.b	#%11111110	;$0A
    985  f4ab		       f8		      .byte.b	#%11111000	;$0E
    986  f4ac		       00		      .byte.b	#%00000000	;$0E
    987  f4ad		       00		      .byte.b	#%00000000	;$0E
    988  f4ae		       00		      .byte.b	#%00000000	;$0E
    989  f4af
    990  f4af							;---End Graphics Data---
    991  f4af
    992  f4af
    993  f4af				   GM_TREE
    994  f4af		       00 80 80 80	      .byte.b	$00,$80,$80,$80
    995  f4b3		       80 80 80 80*	      .byte.b	$80,$80,$80,$80,$D0,$F8,$F8,$F8
    996  f4bb		       f8 f0 f0 f0*	      .byte.b	$F8,$F0,$F0,$F0,$E0,$C0,$C0,$80
    997  f4c3
    998  f4c3							;---Color Data from PlayerPal 2600---
    999  f4c3				   GM_PLAYER_COLOR_IDLE
   1000  f4c3		       00		      .byte.b	#0
   1001  f4c4		       70		      .byte.b	#$70	;
   1002  f4c5		       70		      .byte.b	#$70	;
   1003  f4c6		       70		      .byte.b	#$70	;
   1004  f4c7		       84		      .byte.b	#$84	;
   1005  f4c8		       84		      .byte.b	#$84	;
   1006  f4c9		       f4		      .byte.b	#$F4	;
   1007  f4ca		       00		      .byte.b	#$00	;
   1008  f4cb		       00		      .byte.b	#$00	;
   1009  f4cc				   GM_PLAYER_COLOR_WALK1
   1010  f4cc		       00		      .byte.b	#0
   1011  f4cd		       70		      .byte.b	#$70	;
   1012  f4ce		       70		      .byte.b	#$70	;
   1013  f4cf		       70		      .byte.b	#$70	;
   1014  f4d0		       84		      .byte.b	#$84	;
   1015  f4d1		       84		      .byte.b	#$84	;
   1016  f4d2		       f4		      .byte.b	#$F4	;
   1017  f4d3		       00		      .byte.b	#$00	;
   1018  f4d4		       00		      .byte.b	#$00	;
   1019  f4d5				   GM_PLAYER_COLOR_WALK2
   1020  f4d5		       00		      .byte.b	#0
   1021  f4d6		       70		      .byte.b	#$70	;
   1022  f4d7		       70		      .byte.b	#$70	;
   1023  f4d8		       70		      .byte.b	#$70	;
   1024  f4d9		       84		      .byte.b	#$84	;
   1025  f4da		       84		      .byte.b	#$84	;
   1026  f4db		       f4		      .byte.b	#$F4	;
   1027  f4dc		       00		      .byte.b	#$00	;
   1028  f4dd		       00		      .byte.b	#$00	;
   1029  f4de				   GM_PLAYER_BW_IDLE
   1030  f4de		       00		      .byte.b	#0
   1031  f4df		       00		      .byte.b	#$0	;
   1032  f4e0		       00		      .byte.b	#$0	;
   1033  f4e1		       00		      .byte.b	#$0	;
   1034  f4e2		       02		      .byte.b	#$02	;
   1035  f4e3		       02		      .byte.b	#$02	;
   1036  f4e4		       04		      .byte.b	#$04	;
   1037  f4e5		       00		      .byte.b	#$00	;
   1038  f4e6		       00		      .byte.b	#$00	;
   1039  f4e7				   GM_PLAYER_BW_WALK1
   1040  f4e7		       00		      .byte.b	#0
   1041  f4e8		       00		      .byte.b	#$0	;
   1042  f4e9		       00		      .byte.b	#$0	;
   1043  f4ea		       00		      .byte.b	#$0	;
   1044  f4eb		       02		      .byte.b	#$02	;
   1045  f4ec		       02		      .byte.b	#$02	;
   1046  f4ed		       04		      .byte.b	#$04	;
   1047  f4ee		       00		      .byte.b	#$00	;
   1048  f4ef		       00		      .byte.b	#$00	;
   1049  f4f0				   GM_PLAYER_BW_WALK2
   1050  f4f0		       00		      .byte.b	#0
   1051  f4f1		       00		      .byte.b	#$0	;
   1052  f4f2		       00		      .byte.b	#$0	;
   1053  f4f3		       00		      .byte.b	#$0	;
   1054  f4f4		       02		      .byte.b	#$02	;
   1055  f4f5		       02		      .byte.b	#$02	;
   1056  f4f6		       04		      .byte.b	#$04	;
   1057  f4f7		       00		      .byte.b	#$00	;
   1058  f4f8		       00		      .byte.b	#$00	;
   1059  f4f9				   GM_BUG_COLOR
   1060  f4f9		       00		      .byte.b	#0
   1061  f4fa		       00		      .byte.b	#$00	;
   1062  f4fb		       00		      .byte.b	#$00	;
   1063  f4fc		       f0		      .byte.b	#$F0	;
   1064  f4fd		       f0		      .byte.b	#$F0	;
   1065  f4fe		       f2		      .byte.b	#$F2	;
   1066  f4ff		       f0		      .byte.b	#$F0	;
   1067  f500		       00		      .byte.b	#$00	;
   1068  f501		       00		      .byte.b	#$00	;
   1069  f502				   GM_BUG_BW
   1070  f502		       00		      .byte.b	#0
   1071  f503		       00		      .byte.b	#$00	;
   1072  f504		       00		      .byte.b	#$00	;
   1073  f505		       00		      .byte.b	#$00	;
   1074  f506		       00		      .byte.b	#$00	;
   1075  f507		       02		      .byte.b	#$02	;
   1076  f508		       00		      .byte.b	#$00	;
   1077  f509		       00		      .byte.b	#$00	;
   1078  f50a		       00		      .byte.b	#$00	;
   1079  f50b				   GM_BIRD_COLOR
   1080  f50b		       00		      .byte.b	#0
   1081  f50c		       1c		      .byte.b	#$1C	;
   1082  f50d		       1c		      .byte.b	#$1C	;
   1083  f50e		       0e		      .byte.b	#$0E	;
   1084  f50f		       0a		      .byte.b	#$0A	;
   1085  f510		       0e		      .byte.b	#$0E	;
   1086  f511		       0e		      .byte.b	#$0E	;
   1087  f512		       0e		      .byte.b	#$0E	;
   1088  f513		       0e		      .byte.b	#$0E	;
   1089  f514				   GM_BIRD_BW
   1090  f514		       00		      .byte.b	#0
   1091  f515		       0c		      .byte.b	#$0C	;
   1092  f516		       0c		      .byte.b	#$0C	;
   1093  f517		       0e		      .byte.b	#$0E	;
   1094  f518		       0a		      .byte.b	#$0A	;
   1095  f519		       0e		      .byte.b	#$0E	;
   1096  f51a		       0e		      .byte.b	#$0E	;
   1097  f51b		       0e		      .byte.b	#$0E	;
   1098  f51c		       0e		      .byte.b	#$0E	;
   1099  f51d
   1100  f51d
   1101  f51d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1102  f51d							;; Fill the 4K ROM
   1103  f51d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1104  fffc					      org	$FFFC	; insert two pointers at the end of ROM
   1105  fffc		       00 f0		      .word.w	Reset	; reset vector
   1106  fffe		       00 f0		      .word.w	Reset	; interrupt Vector
   1107  10000
   1108  10000
