------- FILE metria.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE metria.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE metria.asm
      5  0000 ????
      6  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  0000 ????						;; Macros
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????
     10  0000 ????				      MAC	wait_x_wsync
     11  0000 ????			   .WaitX
     12  0000 ????				      sta	WSYNC	; Wait for horizontal blank
     13  0000 ????				      dex		; X--
     14  0000 ????				      bne	.WaitX	; Loop until X = 0
     15  0000 ????				      ENDM
     16  0000 ????
     17  0000 ????				      MAC	fire_missile
     18  0000 ????				      lda	GM_MissileActive
     19  0000 ????				      bne	.NoMissile
     20  0000 ????				      lda	GM_PlayerXPos
     21  0000 ????				      clc
     22  0000 ????				      adc	#5
     23  0000 ????				      sta	GM_MissileXPos
     24  0000 ????				      lda	#70
     25  0000 ????				      sta	GM_MissileYPos
     26  0000 ????				      lda	#2
     27  0000 ????				      sta	GM_MissileActive
     28  0000 ????				      ldy	#sfxCOLLIDE
     29  0000 ????				      jsr	SFX_TRIGGER
     30  0000 ????			   .NoMissile
     31  0000 ????				      ENDM
     32  0000 ????
     33  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     34  0000 ????						;; Contants
     35  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     36  0000 ????
     37  0000 ????	       00 08	   BW_MASK    =	%00001000	; bitmask for black & white switch
     38  0000 ????	       00 01	   RESET_MASK =	%00000001	; bitmask for reset switch
     39  0000 ????	       00 80	   LEFT_BTN_MASK =	%10000000	; bitmask for left joystick button
     40  0000 ????	       00 2b	   TIMER_VBLANK =	43	; mc value for TIM64T vertical blank timer
     41  0000 ????	       00 23	   TIMER_OVERSCAN =	35	; mc value for TIM64T overscan timer
     42  0000 ????
     43  0000 ????	       00 72	   RANDOM_SEED =	$72	; initial value for random generator
     44  0000 ????
     45  0000 ????	       00 38	   LOGO_BK_COLOR =	$38	; logo mode background color - color mode
     46  0000 ????	       00 06	   LOGO_BK_BW =	$06	; logo mode background color - black & white
     47  0000 ????	       00 04	   LOGO_FADE_INIT_STATE =	4	; initial value for the logo fade-in state
     48  0000 ????	       00 28	   LOGO_FADE_INIT_DELAY =	40	; initial delay value before logo fades-in
     49  0000 ????	       00 14	   LOGO_FADE_DELAY =	20	; delay for each fade step - 20 frames/step
     50  0000 ????
     51  0000 ????	       00 c8	   GAME_BK_COLOR =	$C8	; game background color - color mode
     52  0000 ????	       00 08	   GAME_BK_BW =	$08	; game background color - black & white
     53  0000 ????	       00 c0	   GAME_PF_COLOR =	$C0	; game playfield color - color mode
     54  0000 ????	       00 02	   GAME_PF_BW =	$02	; game playfield color - black & white
     55  0000 ????	       00 78	   GAME_SKY_COLOR =	$78	; game sky color - color mode
     56  0000 ????	       00 04	   GAME_SKY_BW =	$04	; game sky color - black & white
     57  0000 ????
     58  0000 ????	       00 00	   GAME_SCOREBACK_COLOR =	$0	; game score board color - all modes
     59  0000 ????	       00 20	   GAME_GAMEOVER_COLOR =	$20	; game over color - color mode
     60  0000 ????	       00 02	   GAME_GAMEOVER_BW =	$02	; game over color - black & white
     61  0000 ????
     62  0000 ????	       00 09	   GAME_PLAYER_HEIGHT =	9	; player sprite height
     63  0000 ????	       00 09	   GAME_BUG_HEIGHT =	9	; bug sprite height
     64  0000 ????
     65  0000 ????	       00 00	   GAME_PLAYER_MIN_X =	0	; player minimun x
     66  0000 ????	       00 92	   GAME_PLAYER_MAX_X =	146	; player minimun x
     67  0000 ????	       00 02	   GAME_PLAYER_MIN_Y =	2	; player minimun x
     68  0000 ????	       00 3e	   GAME_PLAYER_MAX_Y =	62	; player minimun x
     69  0000 ????	       00 0a	   GAME_PLAYER_ANIM_SPEED =	10	; player animation speed
     70  0000 ????
     71  0000 ????	       00 00	   GAME_BUG_COLOR =	0	; bug and missile/poop color - all modes
     72  0000 ????
     73  0000 ????	       00 06	   GAME_BIRD_HEIGHT =	6	; bird sprite height
     74  0000 ????	       00 0a	   GAME_BIRD_TICK_LEN =	10	; bird anim speed
     75  0000 ????	       00 0c	   GAME_BIRD_YPOS_TBL_LEN =	12	; bird anim table length
     76  0000 ????
     77  0000 ????	       00 14	   GAME_TREE_HEIGHT =	20
     78  0000 ????	       00 1c	   GAME_TREE_Y_POS =	28
     79  0000 ????
     80  0000 ????	       00 05	   GAME_DIGIT_HEIGHT =	5	; digit height for score and timer
     81  0000 ????
     82  0000 ????	       00 60	   GAME_MAX_TIME =	%01100000	; initial game time in BCD - 60
     83  0000 ????
     84  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     85  0000 ????						;; RAM variables located outside ROM at address $0080
     86  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     87  0000 ????
     88 U00b4 ????				      seg.u	variables
     89 U0080					      org	$80	; RAM address memory start
     90 U0080
     91 U0080		       00	   LM_LogoFadeState ds	1	; current logo fade state
     92 U0081		       00	   LM_LogoFadeDelay ds	1	; current logo fade delay
     93 U0082
     94 U0082		       00	   GM_BackgroundColor ds	1	; current background color
     95 U0083		       00	   GM_PFColor ds	1	; current playfield color
     96 U0084		       00	   GM_SkyColor ds	1	; current sky color
     97 U0085
     98 U0085		       00 00	   GM_PlayerPtr ds	2	; pointer to active player sprite
     99 U0087		       00 00	   GM_PlayerColorPtr ds	2	; pointer to active player sprite color table
    100 U0089		       00	   GM_PlayerXPos ds	1	; players x position
    101 U008a		       00	   GM_PlayerYPos ds	1	; players y position
    102 U008b		       00	   GM_PlayerAnimOn ds	1	; flag to indicate if animation is active
    103 U008c		       00	   GM_PlayerAnimFrame ds	1	; current player animation frame
    104 U008d		       00	   GM_PlayerAnimTicks ds	1	; timer for player animation
    105 U008e
    106 U008e		       00 00	   GM_BirdPtr ds	2	; pointer to active bird sprite
    107 U0090		       00 00	   GM_BirdColorPtr ds	2	; pointer to active bird sprite color table
    108 U0092		       00	   GM_BirdYPos ds	1	; bird y position (x position is same as player)
    109 U0093		       00	   GM_BirdReflection ds	1	; bird direction
    110 U0094		       00	   GM_BirdTick ds	1	; bird timer
    111 U0095		       00	   GM_BirdYPosIdx ds	1	; index in bird y position table
    112 U0096
    113 U0096		       00	   GM_MissileXPos ds	1	; missile/poop x position
    114 U0097		       00	   GM_MissileYPos ds	1	; missile/poop y position
    115 U0098		       00	   GM_MissileActive ds	1	; flag to indicate if missile is active on screen
    116 U0099
    117 U0099		       00	   GM_BugColor ds	1	; bug and missile/poop color - all modes
    118 U009a		       00	   GM_BugXPos ds	1	; bug x position
    119 U009b		       00	   GM_BugYPos ds	1	; bug y position
    120 U009c
    121 U009c		       00	   Random     ds	1	; random value
    122 U009d
    123 U009d		       00	   GameOver   ds	1	; flag to indicate if game is over.
    124 U009e		       00	   Score      ds	1	; current score stored as BCD
    125 U009f		       00	   Timer      ds	1	; current timer stored as BCD
    126 U00a0		       00	   TimerTick  ds	1	; timer timer
    127 U00a1		       00 00	   OnesDigitOffset ds	2	; pointers to current score and timer ones digits
    128 U00a3		       00 00	   TensDigitOffset ds	2	; pointers to current score and timer tens digits
    129 U00a5		       00	   Temp       ds	1	; general temporary variable
    130 U00a6		       00 00 00 00*ScoreSprite ds	6	; current score sprite
    131 U00ac		       00 00 00 00*TimerSprite ds	6	; current timer sprite
    132 U00b2
    133 U00b2		       00	   SFX_LEFT   ds	1	; required variable for SFX-soundlib
    134 U00b3		       00	   SFX_RIGHT  ds	1	; required variable for SFX-soundlib
    135 U00b4
    136 U00b4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    137 U00b4							;; Program start - Located at top of ROM at address $F000
    138 U00b4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    139 U00b4
    140  10000 ????				       seg	code
    141  f000					      org	$F000	; start address of ROM
    142  f000
    143  f000				   Reset
      0  f000					      CLEAN_START		; set machine to known state on startup
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
    145  f00a
    146  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    147  f00a							;; Init variables
    148  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    149  f00a
    150  f00a		       a9 72		      lda	#RANDOM_SEED
    151  f00c		       85 9c		      sta	Random
    152  f00e
    153  f00e		       a9 04		      lda	#LOGO_FADE_INIT_STATE
    154  f010		       85 80		      sta	LM_LogoFadeState	; initialize logo fade state
    155  f012		       a9 28		      lda	#LOGO_FADE_INIT_DELAY
    156  f014		       85 81		      sta	LM_LogoFadeDelay	; initialize logo fade delay
    157  f016
      0  f016					      SET_POINTER	GM_PlayerPtr, GM_PLAYER1_IDLE
      1  f016				   .POINTER   SET	GM_PlayerPtr
      2  f016				   .ADDRESS   SET	GM_PLAYER1_IDLE
      3  f016
      4  f016		       a9 9d		      LDA	#<.ADDRESS
      5  f018		       85 85		      STA	.POINTER
      6  f01a		       a9 f6		      LDA	#>.ADDRESS
      7  f01c		       85 86		      STA	.POINTER+1
      8  f01e
      0  f01e					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER1_COLOR
      1  f01e				   .POINTER   SET	GM_PlayerColorPtr
      2  f01e				   .ADDRESS   SET	GM_PLAYER1_COLOR
      3  f01e
      4  f01e		       a9 fc		      LDA	#<.ADDRESS
      5  f020		       85 87		      STA	.POINTER
      6  f022		       a9 f6		      LDA	#>.ADDRESS
      7  f024		       85 88		      STA	.POINTER+1
      8  f026
    160  f026
      0  f026					      SET_POINTER	GM_BirdPtr, GM_BIRD_1
      1  f026				   .POINTER   SET	GM_BirdPtr
      2  f026				   .ADDRESS   SET	GM_BIRD_1
      3  f026
      4  f026		       a9 dc		      LDA	#<.ADDRESS
      5  f028		       85 8e		      STA	.POINTER
      6  f02a		       a9 f6		      LDA	#>.ADDRESS
      7  f02c		       85 8f		      STA	.POINTER+1
      8  f02e
    162  f02e
    163  f02e		       a9 3e		      lda	#62
    164  f030		       85 89		      sta	GM_PlayerXPos
    165  f032		       a9 15		      lda	#21
    166  f034		       85 8a		      sta	GM_PlayerYPos
    167  f036
    168  f036		       a9 00		      lda	#0
    169  f038		       85 92		      sta	GM_BirdYPos
    170  f03a		       a9 00		      lda	#0
    171  f03c		       85 93		      sta	GM_BirdReflection
    172  f03e		       85 98		      sta	GM_MissileActive
    173  f040		       a9 0a		      lda	#GAME_BIRD_TICK_LEN
    174  f042		       85 94		      sta	GM_BirdTick
    175  f044
    176  f044		       a9 01		      lda	#1
    177  f046		       85 a0		      sta	TimerTick
    178  f048		       a9 60		      lda	#GAME_MAX_TIME
    179  f04a		       85 9f		      sta	Timer
    180  f04c
    181  f04c		       a9 01		      lda	#1
    182  f04e		       85 9d		      sta	GameOver
    183  f050
    184  f050		       a9 02		      lda	#2
    185  f052		       85 01		      sta	VBLANK	; turn on VBLANK
    186  f054
    187  f054							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    188  f054							;; LOGO MODE - LM
    189  f054							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    190  f054				   LM_NextFrame
      0  f054					      VERTICAL_SYNC		; vertical sync - 3 scanlines
      1  f054		       a9 0e		      lda	#%1110
      2  f056		       85 02	   .VSLP1     sta	WSYNC
      3  f058		       85 00		      sta	VSYNC
      4  f05a		       4a		      lsr
      5  f05b		       d0 f9		      bne	.VSLP1
    192  f05d
    193  f05d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    194  f05d							;; Vertical Blank - 37 scanlines - 2812 mc
    195  f05d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    196  f05d		       a9 2b		      lda	#TIMER_VBLANK
    197  f05f		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    198  f062
    199  f062				   .LM_Fade		; handles logo fade in
    200  f062		       a5 80		      lda	LM_LogoFadeState
    201  f064		       c9 00		      cmp	#0
    202  f066		       f0 13		      beq	.LM_FadeDone	; if fade in is complete then jump out
    203  f068		       c6 81		      dec	LM_LogoFadeDelay	; dec fade delay
    204  f06a		       d0 0f		      bne	.LM_FadeDone	; if still waiting for delay then jump out
    205  f06c		       c6 80		      dec	LM_LogoFadeState	; dec fade in state
    206  f06e		       a9 14		      lda	#LOGO_FADE_DELAY
    207  f070		       85 81		      sta	LM_LogoFadeDelay	; restore fade in delay
    208  f072
    209  f072		       a5 80		      lda	LM_LogoFadeState
    210  f074		       d0 05		      bne	.LM_FadeDone
    211  f076		       a0 20		      ldy	#sfxPING
    212  f078		       20 b2 f5 	      jsr	SFX_TRIGGER
    213  f07b				   .LM_FadeDone
    214  f07b
    215  f07b				   .LM_SetColor 		; set correct colors
    216  f07b		       a4 80		      ldy	LM_LogoFadeState	; set Y = index of logo color
    217  f07d		       ad 82 02 	      lda	SWCHB	; load console switches
    218  f080		       29 08		      and	#BW_MASK	; check if black & white
    219  f082		       f0 0c		      beq	.LM_BWMode
    220  f084				   .LM_ColorMode
    221  f084		       a9 38		      lda	#LOGO_BK_COLOR
    222  f086		       85 09		      sta	COLUBK	; set background color
    223  f088		       b9 43 f6 	      lda	LM_LogoFade_Color,Y
    224  f08b		       85 08		      sta	COLUPF	; set logo color
    225  f08d		       4c 99 f0 	      jmp	.LM_SetColorDone
    226  f090				   .LM_BWMode
    227  f090		       a9 06		      lda	#LOGO_BK_BW
    228  f092		       85 09		      sta	COLUBK	; set background color
    229  f094		       b9 48 f6 	      lda	LM_LogoFade_BW,Y
    230  f097		       85 08		      sta	COLUPF	; set logo color
    231  f099				   .LM_SetColorDone
    232  f099
    233  f099		       e6 9c		      inc	Random
    234  f09b
    235  f09b				   .LM_VBLankWait
    236  f09b		       ae 84 02 	      ldx	INTIM
    237  f09e		       d0 fb		      bne	.LM_VBLankWait	; wait until timer is done
    238  f0a0		       a9 00		      lda	#0
    239  f0a2		       85 02		      sta	WSYNC	; get a fresh scanline
    240  f0a4							; -------------------------
    241  f0a4		       85 01		      sta	VBLANK	; turn off VBLANK
    242  f0a6
    243  f0a6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    244  f0a6							;; Playfield - 192 scanlines - 14592 mc
    245  f0a6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    246  f0a6
    247  f0a6				   .LM_Top		; waste 68 scanlines
    248  f0a6		       a2 44		      ldx	#68
      0  f0a8					      WAIT_X_WSYNC
      1  f0a8				   .WaitX
      2  f0a8		       85 02		      sta	WSYNC
      3  f0aa		       ca		      dex
      4  f0ab		       d0 fb		      bne	.WaitX
    250  f0ad							; -------------------------
    251  f0ad
    252  f0ad				   .LM_Middle		; logo is a total of 36 scanlines
    253  f0ad		       a0 00		      ldy	#0	; Y = index to playfield bytes
    254  f0af				   .LM_LoopY
    255  f0af		       a2 04		      ldx	#4	; draw every logo line 4 scanlines
    256  f0b1				   .LM_LoopX
    257  f0b1		       85 02		      sta	WSYNC	; get fresh scanline
    258  f0b3							; -------------------------
    259  f0b3		       b9 0d f6 	      lda	LM_LogoPF0,Y
    260  f0b6		       85 0d		      sta	PF0	; set first part of left playfield
    261  f0b8		       b9 1f f6 	      lda	LM_LogoPF1,Y
    262  f0bb		       85 0e		      sta	PF1	; set second part of left playfield
    263  f0bd		       b9 31 f6 	      lda	LM_LogoPF2,Y
    264  f0c0		       85 0f		      sta	PF2	; set third part of left playfield
    265  f0c2		       c8		      iny		; inc Y to get the right playfield bytes
    266  f0c3		       b9 0d f6 	      lda	LM_LogoPF0,Y
    267  f0c6		       85 0d		      sta	PF0	; set first part of right playfield
    268  f0c8		       b9 1f f6 	      lda	LM_LogoPF1,Y
    269  f0cb		       85 0e		      sta	PF1	; set second part of right playfield
    270  f0cd		       b9 31 f6 	      lda	LM_LogoPF2,Y
    271  f0d0		       88		      dey		; dec Y to bea able to repeat left/right for 4 lines
    272  f0d1		       ea		      nop		; just for timing
    273  f0d2		       85 0f		      sta	PF2	; set third part of right playfield
    274  f0d4
    275  f0d4		       ca		      dex
    276  f0d5		       d0 da		      bne	.LM_LoopX	; loop while we havn't drawn 4 scanlines
    277  f0d7		       c8		      iny
    278  f0d8		       c8		      iny		; inc y by 2 to get to the next playfield byte pairs
    279  f0d9		       c0 12		      cpy	#18	; all bytes drawn?
    280  f0db		       d0 d2		      bne	.LM_LoopY	; loop until all logo bytes are drawn
    281  f0dd
    282  f0dd				   .LM_TurnOffLogo		; use 1 scanline to turn off logo
    283  f0dd		       a5 02		      lda	WSYNC	; get a fresh scanline
    284  f0df							; -------------------------
    285  f0df		       a9 00		      lda	#0
    286  f0e1		       85 0d		      sta	PF0	; reset playfield graphics
    287  f0e3		       85 0e		      sta	PF1
    288  f0e5		       85 0f		      sta	PF2
    289  f0e7
    290  f0e7				   .LM_Bottom
    291  f0e7		       a2 57		      ldx	#87	; waste remaining 87 scanlines
      0  f0e9					      WAIT_X_WSYNC
      1  f0e9				   .WaitX
      2  f0e9		       85 02		      sta	WSYNC
      3  f0eb		       ca		      dex
      4  f0ec		       d0 fb		      bne	.WaitX
    293  f0ee							; -------------------------
    294  f0ee
    295  f0ee							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    296  f0ee							;; Overscan - 30 scanlines - 2280 mc
    297  f0ee							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    298  f0ee		       a9 02		      lda	#2	; A = 2 = #%00000010
    299  f0f0		       85 01		      sta	VBLANK	; Turn on VBLANK
    300  f0f2		       a9 23		      lda	#TIMER_OVERSCAN
    301  f0f4		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    302  f0f7
    303  f0f7				   .LM_CheckReset
    304  f0f7		       ad 82 02 	      lda	SWCHB	; load console switches
    305  f0fa		       29 01		      and	#RESET_MASK
    306  f0fc		       d0 03		      bne	.LM_NoReset
    307  f0fe		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    308  f101				   .LM_NoReset
    309  f101
    310  f101				   .LM_CheckLeftButton
    311  f101		       a5 0c		      lda	INPT4	; load left joystick button
    312  f103		       29 80		      and	#LEFT_BTN_MASK
    313  f105		       d0 08		      bne	.LM_NoLeftButton
    314  f107		       85 02		      sta	WSYNC
    315  f109		       20 75 f4 	      jsr	PlaceBug
    316  f10c		       4c 1c f1 	      jmp	GM_NextFrame	; start game if button is pressed
    317  f10f				   .LM_NoLeftButton
    318  f10f
    319  f10f		       20 d4 f5 	      jsr	SFX_UPDATE	; update sound effects
    320  f112
    321  f112				   .LM_OverscanWait
    322  f112		       ae 84 02 	      ldx	INTIM
    323  f115		       d0 fb		      bne	.LM_OverscanWait	; wait until timer is done
    324  f117		       85 02		      sta	WSYNC
    325  f119							; -------------------------
    326  f119		       4c 54 f0 	      jmp	LM_NextFrame
    327  f11c
    328  f11c
    329  f11c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    330  f11c							;; GAME MODE - GM
    331  f11c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    332  f11c				   GM_NextFrame
      0  f11c					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f11c		       a9 0e		      lda	#%1110
      2  f11e		       85 02	   .VSLP1     sta	WSYNC
      3  f120		       85 00		      sta	VSYNC
      4  f122		       4a		      lsr
      5  f123		       d0 f9		      bne	.VSLP1
    334  f125
    335  f125							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    336  f125							;; Vertical Blank - 37 scanlines - 2812 mc
    337  f125							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    338  f125		       a9 2b		      lda	#TIMER_VBLANK
    339  f127		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    340  f12a
    341  f12a				   .GM_CheckCollisions
    342  f12a
    343  f12a				   .GM_CheckColP0ToP1
    344  f12a		       a5 07		      lda	CXPPMM
    345  f12c		       29 80		      and	#%10000000
    346  f12e		       f0 11		      beq	.GM_CheckColP0ToP1Done
    347  f130		       f8		      sed
    348  f131		       a5 9e		      lda	Score
    349  f133		       18		      clc
    350  f134		       69 01		      adc	#1
    351  f136		       85 9e		      sta	Score
    352  f138		       d8		      cld
    353  f139		       a0 10		      ldy	#sfxCOLLECT
    354  f13b		       20 b2 f5 	      jsr	SFX_TRIGGER
    355  f13e		       20 75 f4 	      jsr	PlaceBug
    356  f141				   .GM_CheckColP0ToP1Done
    357  f141
    358  f141				   .GM_CheckColM1ToP0
    359  f141		       a5 01		      lda	CXM1P
    360  f143		       29 80		      and	#%10000000
    361  f145		       f0 18		      beq	.GM_CheckColM1ToP0Done
    362  f147
    363  f147
    364  f147		       f8		      sed
    365  f148		       a5 9e		      lda	Score
    366  f14a		       38		      sec
    367  f14b		       e9 05		      sbc	#5
    368  f14d		       10 04		      bpl	.GM_ScoreSubOk
    369  f14f		       a9 00		      lda	#0
    370  f151		       85 9e		      sta	Score
    371  f153				   .GM_ScoreSubOk
    372  f153		       85 9e		      sta	Score
    373  f155		       d8		      cld
    374  f156
    375  f156		       a9 00		      lda	#0
    376  f158		       85 98		      sta	GM_MissileActive
    377  f15a		       a0 30		      ldy	#sfxGAMEOVER
    378  f15c		       20 b2 f5 	      jsr	SFX_TRIGGER
    379  f15f				   .GM_CheckColM1ToP0Done
    380  f15f
    381  f15f
    382  f15f				   .GM_CheckColM1ToPF
    383  f15f		       a5 05		      lda	CXM1FB
    384  f161		       29 80		      and	#%10000000
    385  f163		       f0 04		      beq	.GM_CheckColM1ToPFDone
    386  f165		       a9 00		      lda	#0
    387  f167		       85 98		      sta	GM_MissileActive
    388  f169				   .GM_CheckColM1ToPFDone
    389  f169
    390  f169
    391  f169				   .GM_CheckCollisionsDone
    392  f169		       85 2c		      sta	CXCLR
    393  f16b
    394  f16b		       a5 89		      lda	GM_PlayerXPos	; load player x pos
    395  f16d		       a0 00		      ldy	#0	; set Y = 0 for player 0
    396  f16f		       20 9e f4 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    397  f172
    398  f172		       a5 9a		      lda	GM_BugXPos	; load bug x pos
    399  f174		       a0 01		      ldy	#1	; set Y = 1 for player 1
    400  f176		       20 9e f4 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    401  f179
    402  f179		       a5 96		      lda	GM_MissileXPos	; load bug x pos
    403  f17b		       a0 03		      ldy	#3	; set Y = 2 for missile 0
    404  f17d		       20 9e f4 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    405  f180
    406  f180		       85 02		      sta	WSYNC	; geta fresh scanline
    407  f182							; -------------------------
    408  f182		       85 2a		      sta	HMOVE	; apply positions offset
    409  f184
    410  f184				   .GM_HandleTimer
    411  f184		       a5 9d		      lda	GameOver
    412  f186		       d0 1e		      bne	.GM_HandleTimerDone
    413  f188
    414  f188		       c6 a0		      dec	TimerTick
    415  f18a		       d0 1a		      bne	.GM_HandleTimerDone
    416  f18c
    417  f18c		       a9 3c		      lda	#60
    418  f18e		       85 a0		      sta	TimerTick
    419  f190
    420  f190		       f8		      sed
    421  f191		       a5 9f		      lda	Timer
    422  f193		       38		      sec
    423  f194		       e9 01		      sbc	#1
    424  f196		       85 9f		      sta	Timer
    425  f198		       d8		      cld
    426  f199
    427  f199		       a5 9f		      lda	Timer
    428  f19b		       d0 09		      bne	.GM_HandleTimerDone
    429  f19d		       a9 01		      lda	#1
    430  f19f		       85 9d		      sta	GameOver
    431  f1a1		       a0 49		      ldy	#sfxTEST
    432  f1a3		       20 b2 f5 	      jsr	SFX_TRIGGER
    433  f1a6
    434  f1a6				   .GM_HandleTimerDone
    435  f1a6
    436  f1a6				   .GM_SetColor 		; set correct colors
    437  f1a6		       ad 82 02 	      lda	SWCHB
    438  f1a9		       25 08		      and	BW_MASK
    439  f1ab		       f0 40		      beq	.GM_BWMode
    440  f1ad
    441  f1ad				   .GM_ColorMode
    442  f1ad		       a9 78		      lda	#GAME_SKY_COLOR
    443  f1af		       85 84		      sta	GM_SkyColor
    444  f1b1		       a9 c8		      lda	#GAME_BK_COLOR
    445  f1b3		       85 82		      sta	GM_BackgroundColor
    446  f1b5		       a9 c0		      lda	#GAME_PF_COLOR
    447  f1b7		       85 83		      sta	GM_PFColor
      0  f1b9					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_COLOR
      1  f1b9				   .POINTER   SET	GM_BirdColorPtr
      2  f1b9				   .ADDRESS   SET	GM_BIRD_COLOR
      3  f1b9
      4  f1b9		       a9 32		      LDA	#<.ADDRESS
      5  f1bb		       85 90		      STA	.POINTER
      6  f1bd		       a9 f7		      LDA	#>.ADDRESS
      7  f1bf		       85 91		      STA	.POINTER+1
      8  f1c1
    449  f1c1
    450  f1c1		       ad 82 02 	      lda	SWCHB
    451  f1c4		       29 40		      and	#%01000000
    452  f1c6		       f0 0b		      beq	.GM_SetPlayer1CM
      0  f1c8					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER2_COLOR
      1  f1c8				   .POINTER   SET	GM_PlayerColorPtr
      2  f1c8				   .ADDRESS   SET	GM_PLAYER2_COLOR
      3  f1c8
      4  f1c8		       a9 05		      LDA	#<.ADDRESS
      5  f1ca		       85 87		      STA	.POINTER
      6  f1cc		       a9 f7		      LDA	#>.ADDRESS
      7  f1ce		       85 88		      STA	.POINTER+1
      8  f1d0
    454  f1d0		       4c db f1 	      jmp	.GM_PlayerCMDone
    455  f1d3				   .GM_SetPlayer1CM
      0  f1d3					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER1_COLOR
      1  f1d3				   .POINTER   SET	GM_PlayerColorPtr
      2  f1d3				   .ADDRESS   SET	GM_PLAYER1_COLOR
      3  f1d3
      4  f1d3		       a9 fc		      LDA	#<.ADDRESS
      5  f1d5		       85 87		      STA	.POINTER
      6  f1d7		       a9 f6		      LDA	#>.ADDRESS
      7  f1d9		       85 88		      STA	.POINTER+1
      8  f1db
    457  f1db				   .GM_PlayerCMDone
    458  f1db
    459  f1db				   .GM_SetScoreboardColorCM
    460  f1db		       a5 9f		      lda	Timer
    461  f1dd		       f0 07		      beq	.GM_GameOverCM
    462  f1df		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    463  f1e1		       85 09		      sta	COLUBK
    464  f1e3		       4c ea f1 	      jmp	.GM_SetScoreboardColorCMDone
    465  f1e6				   .GM_GameOverCM
    466  f1e6		       a9 20		      lda	#GAME_GAMEOVER_COLOR
    467  f1e8		       85 09		      sta	COLUBK
    468  f1ea				   .GM_SetScoreboardColorCMDone
    469  f1ea		       4c 2a f2 	      jmp	.GM_SetColorDone
    470  f1ed
    471  f1ed				   .GM_BWMode
    472  f1ed		       a9 04		      lda	#GAME_SKY_BW
    473  f1ef		       85 84		      sta	GM_SkyColor
    474  f1f1		       a9 08		      lda	#GAME_BK_BW
    475  f1f3		       85 82		      sta	GM_BackgroundColor
    476  f1f5		       a9 02		      lda	#GAME_PF_BW
    477  f1f7		       85 83		      sta	GM_PFColor
      0  f1f9					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_BW
      1  f1f9				   .POINTER   SET	GM_BirdColorPtr
      2  f1f9				   .ADDRESS   SET	GM_BIRD_BW
      3  f1f9
      4  f1f9		       a9 38		      LDA	#<.ADDRESS
      5  f1fb		       85 90		      STA	.POINTER
      6  f1fd		       a9 f7		      LDA	#>.ADDRESS
      7  f1ff		       85 91		      STA	.POINTER+1
      8  f201
    479  f201
    480  f201		       ad 82 02 	      lda	SWCHB
    481  f204		       29 40		      and	#%01000000
    482  f206		       f0 0b		      beq	.GM_SetPlayer1BW
      0  f208					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER2_BW
      1  f208				   .POINTER   SET	GM_PlayerColorPtr
      2  f208				   .ADDRESS   SET	GM_PLAYER2_BW
      3  f208
      4  f208		       a9 17		      LDA	#<.ADDRESS
      5  f20a		       85 87		      STA	.POINTER
      6  f20c		       a9 f7		      LDA	#>.ADDRESS
      7  f20e		       85 88		      STA	.POINTER+1
      8  f210
    484  f210		       4c 1b f2 	      jmp	.GM_PlayerBWDone
    485  f213				   .GM_SetPlayer1BW
      0  f213					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER1_BW
      1  f213				   .POINTER   SET	GM_PlayerColorPtr
      2  f213				   .ADDRESS   SET	GM_PLAYER1_BW
      3  f213
      4  f213		       a9 0e		      LDA	#<.ADDRESS
      5  f215		       85 87		      STA	.POINTER
      6  f217		       a9 f7		      LDA	#>.ADDRESS
      7  f219		       85 88		      STA	.POINTER+1
      8  f21b
    487  f21b				   .GM_PlayerBWDone
    488  f21b
    489  f21b				   .GM_SetScoreboardColorBW
    490  f21b		       a5 9f		      lda	Timer
    491  f21d		       f0 07		      beq	.GM_GameOverBW
    492  f21f		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    493  f221		       85 09		      sta	COLUBK
    494  f223		       4c 2a f2 	      jmp	.GM_SetScoreboardColorBWDone
    495  f226				   .GM_GameOverBW
    496  f226		       a9 02		      lda	#GAME_GAMEOVER_BW
    497  f228		       85 09		      sta	COLUBK
    498  f22a				   .GM_SetScoreboardColorBWDone
    499  f22a
    500  f22a				   .GM_SetColorDone
    501  f22a
    502  f22a				   .GM_SetGraphics
    503  f22a		       ad 82 02 	      lda	SWCHB
    504  f22d		       29 40		      and	#%01000000
    505  f22f		       f0 26		      beq	.GM_SetPlayer1
    506  f231				   .GM_SetPlayer2
      0  f231					      SET_POINTER	GM_PlayerPtr, GM_PLAYER2_IDLE
      1  f231				   .POINTER   SET	GM_PlayerPtr
      2  f231				   .ADDRESS   SET	GM_PLAYER2_IDLE
      3  f231
      4  f231		       a9 b8		      LDA	#<.ADDRESS
      5  f233		       85 85		      STA	.POINTER
      6  f235		       a9 f6		      LDA	#>.ADDRESS
      7  f237		       85 86		      STA	.POINTER+1
      8  f239
    508  f239		       a5 8b		      lda	GM_PlayerAnimOn
    509  f23b		       f0 40		      beq	.GM_SetGraphicsDone
    510  f23d
    511  f23d		       a5 8c		      lda	GM_PlayerAnimFrame
    512  f23f		       d0 0b		      bne	.GM_Player2_Walk2
      0  f241					      SET_POINTER	GM_PlayerPtr, GM_PLAYER2_WALK1
      1  f241				   .POINTER   SET	GM_PlayerPtr
      2  f241				   .ADDRESS   SET	GM_PLAYER2_WALK1
      3  f241
      4  f241		       a9 c1		      LDA	#<.ADDRESS
      5  f243		       85 85		      STA	.POINTER
      6  f245		       a9 f6		      LDA	#>.ADDRESS
      7  f247		       85 86		      STA	.POINTER+1
      8  f249
    514  f249		       4c 7d f2 	      jmp	.GM_SetGraphicsDone
    515  f24c				   .GM_Player2_Walk2
      0  f24c					      SET_POINTER	GM_PlayerPtr, GM_PLAYER2_WALK2
      1  f24c				   .POINTER   SET	GM_PlayerPtr
      2  f24c				   .ADDRESS   SET	GM_PLAYER2_WALK2
      3  f24c
      4  f24c		       a9 ca		      LDA	#<.ADDRESS
      5  f24e		       85 85		      STA	.POINTER
      6  f250		       a9 f6		      LDA	#>.ADDRESS
      7  f252		       85 86		      STA	.POINTER+1
      8  f254
    517  f254
    518  f254		       4c 7d f2 	      jmp	.GM_SetGraphicsDone
    519  f257				   .GM_SetPlayer1
      0  f257					      SET_POINTER	GM_PlayerPtr, GM_PLAYER1_IDLE
      1  f257				   .POINTER   SET	GM_PlayerPtr
      2  f257				   .ADDRESS   SET	GM_PLAYER1_IDLE
      3  f257
      4  f257		       a9 9d		      LDA	#<.ADDRESS
      5  f259		       85 85		      STA	.POINTER
      6  f25b		       a9 f6		      LDA	#>.ADDRESS
      7  f25d		       85 86		      STA	.POINTER+1
      8  f25f
    521  f25f		       a5 8b		      lda	GM_PlayerAnimOn
    522  f261		       f0 1a		      beq	.GM_SetGraphicsDone
    523  f263
    524  f263		       a5 8c		      lda	GM_PlayerAnimFrame
    525  f265		       d0 0b		      bne	.GM_Player1_Walk2
      0  f267					      SET_POINTER	GM_PlayerPtr, GM_PLAYER1_WALK1
      1  f267				   .POINTER   SET	GM_PlayerPtr
      2  f267				   .ADDRESS   SET	GM_PLAYER1_WALK1
      3  f267
      4  f267		       a9 a6		      LDA	#<.ADDRESS
      5  f269		       85 85		      STA	.POINTER
      6  f26b		       a9 f6		      LDA	#>.ADDRESS
      7  f26d		       85 86		      STA	.POINTER+1
      8  f26f
    527  f26f		       4c 7d f2 	      jmp	.GM_SetGraphicsDone
    528  f272				   .GM_Player1_Walk2
      0  f272					      SET_POINTER	GM_PlayerPtr, GM_PLAYER1_WALK2
      1  f272				   .POINTER   SET	GM_PlayerPtr
      2  f272				   .ADDRESS   SET	GM_PLAYER1_WALK2
      3  f272
      4  f272		       a9 af		      LDA	#<.ADDRESS
      5  f274		       85 85		      STA	.POINTER
      6  f276		       a9 f6		      LDA	#>.ADDRESS
      7  f278		       85 86		      STA	.POINTER+1
      8  f27a
    530  f27a
    531  f27a		       4c 7d f2 	      jmp	.GM_SetGraphicsDone
    532  f27d				   .GM_SetGraphicsDone
    533  f27d
    534  f27d		       20 b2 f4 	      jsr	PrepareScoreAndTimer
    535  f280
    536  f280				   .GM_VBLankWait
    537  f280		       ae 84 02 	      ldx	INTIM
    538  f283		       d0 fb		      bne	.GM_VBLankWait	; wait until timer is done
    539  f285		       a9 00		      lda	#0
    540  f287		       85 02		      sta	WSYNC	; get a fresh scanline
    541  f289							; -------------------------
    542  f289		       85 01		      sta	VBLANK	; turn off VBLANK
    543  f28b
    544  f28b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    545  f28b							;; Score Board - 20 scanlines - 1520 mc
    546  f28b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    547  f28b		       a9 0e		      lda	#$0E
    548  f28d		       85 08		      sta	COLUPF
    549  f28f
    550  f28f		       a9 00		      lda	#0
    551  f291		       85 0d		      sta	PF0
    552  f293		       85 0e		      sta	PF1
    553  f295		       85 0f		      sta	PF2
    554  f297		       a9 00		      lda	#00000000
    555  f299		       85 0a		      sta	CTRLPF	; disable playfield/scoreboard reflection
    556  f29b
    557  f29b		       a2 05		      ldx	#5
      0  f29d					      WAIT_X_WSYNC
      1  f29d				   .WaitX
      2  f29d		       85 02		      sta	WSYNC
      3  f29f		       ca		      dex
      4  f2a0		       d0 fb		      bne	.WaitX
    559  f2a2							; -------------------------
    560  f2a2
    561  f2a2		       a0 05		      ldy	#5
    562  f2a4				   .GM_ScoreboardLoop
    563  f2a4
    564  f2a4					      REPEAT	2
    565  f2a4		       b9 a6 00 	      lda	ScoreSprite,Y
    566  f2a7		       85 0e		      sta	PF1
    567  f2a9
    568  f2a9					      REPEAT	13
    569  f2a9		       ea		      nop
    568  f2a9					      REPEND
    569  f2aa		       ea		      nop
    568  f2aa					      REPEND
    569  f2ab		       ea		      nop
    568  f2ab					      REPEND
    569  f2ac		       ea		      nop
    568  f2ac					      REPEND
    569  f2ad		       ea		      nop
    568  f2ad					      REPEND
    569  f2ae		       ea		      nop
    568  f2ae					      REPEND
    569  f2af		       ea		      nop
    568  f2af					      REPEND
    569  f2b0		       ea		      nop
    568  f2b0					      REPEND
    569  f2b1		       ea		      nop
    568  f2b1					      REPEND
    569  f2b2		       ea		      nop
    568  f2b2					      REPEND
    569  f2b3		       ea		      nop
    568  f2b3					      REPEND
    569  f2b4		       ea		      nop
    568  f2b4					      REPEND
    569  f2b5		       ea		      nop
    570  f2b6					      REPEND
    571  f2b6
    572  f2b6		       b9 ac 00 	      lda	TimerSprite,Y
    573  f2b9		       85 0e		      sta	PF1
    574  f2bb
    575  f2bb		       85 02		      sta	WSYNC
    576  f2bd							; -------------------------
    564  f2bd					      REPEND
    565  f2bd		       b9 a6 00 	      lda	ScoreSprite,Y
    566  f2c0		       85 0e		      sta	PF1
    567  f2c2
    568  f2c2					      REPEAT	13
    569  f2c2		       ea		      nop
    568  f2c2					      REPEND
    569  f2c3		       ea		      nop
    568  f2c3					      REPEND
    569  f2c4		       ea		      nop
    568  f2c4					      REPEND
    569  f2c5		       ea		      nop
    568  f2c5					      REPEND
    569  f2c6		       ea		      nop
    568  f2c6					      REPEND
    569  f2c7		       ea		      nop
    568  f2c7					      REPEND
    569  f2c8		       ea		      nop
    568  f2c8					      REPEND
    569  f2c9		       ea		      nop
    568  f2c9					      REPEND
    569  f2ca		       ea		      nop
    568  f2ca					      REPEND
    569  f2cb		       ea		      nop
    568  f2cb					      REPEND
    569  f2cc		       ea		      nop
    568  f2cc					      REPEND
    569  f2cd		       ea		      nop
    568  f2cd					      REPEND
    569  f2ce		       ea		      nop
    570  f2cf					      REPEND
    571  f2cf
    572  f2cf		       b9 ac 00 	      lda	TimerSprite,Y
    573  f2d2		       85 0e		      sta	PF1
    574  f2d4
    575  f2d4		       85 02		      sta	WSYNC
    576  f2d6							; -------------------------
    577  f2d6					      REPEND
    578  f2d6
    579  f2d6		       88		      dey
    580  f2d7		       d0 cb		      bne	.GM_ScoreboardLoop
    581  f2d9
    582  f2d9		       a9 00		      lda	#0
    583  f2db		       85 0e		      sta	PF1
    584  f2dd
    585  f2dd		       a2 05		      ldx	#5
      0  f2df					      WAIT_X_WSYNC
      1  f2df				   .WaitX
      2  f2df		       85 02		      sta	WSYNC
      3  f2e1		       ca		      dex
      4  f2e2		       d0 fb		      bne	.WaitX
    587  f2e4
    588  f2e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    589  f2e4							;; Sky - 30 scanlines - 1520 mc
    590  f2e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    591  f2e4		       a5 84		      lda	GM_SkyColor
    592  f2e6		       85 09		      sta	COLUBK
    593  f2e8		       a2 0e		      ldx	#14
    594  f2ea		       a9 00		      lda	#0
    595  f2ec		       85 25		      sta	VDELP0	; clear vertical delay för player 0
    596  f2ee
    597  f2ee		       a5 93		      lda	GM_BirdReflection
    598  f2f0		       85 0b		      sta	REFP0
    599  f2f2
    600  f2f2				   .GM_SkyLoop
    601  f2f2
    602  f2f2				   .GM_DrawBird
    603  f2f2		       8a		      txa		; transfer X to A
    604  f2f3		       38		      sec		; make sure carry flag is set
    605  f2f4		       e5 92		      sbc	GM_BirdYPos	; subtract sprite Y coordinate
    606  f2f6		       c5 06		      cmp	GAME_BIRD_HEIGHT	; are we inside the sprite height bounds?
    607  f2f8		       90 02		      bcc	.GM_WriteBird	; if result < SpriteHeight, call subroutine
    608  f2fa		       a9 00		      lda	#0	; else, set index to 0
    609  f2fc				   .GM_WriteBird
    610  f2fc		       a8		      tay
    611  f2fd		       b1 8e		      lda	(GM_BirdPtr),Y	; load player bitmap slice of data
    612  f2ff		       85 02		      sta	WSYNC	; wait for next scanline
    613  f301							; -------------------------
    614  f301		       85 1b		      sta	GRP0	; set graphics for player 0 slice
    615  f303		       b1 90		      lda	(GM_BirdColorPtr),Y	; load player color from lookup table
    616  f305		       85 06		      sta	COLUP0	; set color for player 1 slice
    617  f307				   .GM_DrawBirdDone
    618  f307		       85 02		      sta	WSYNC	; wait for next scanline
    619  f309							; -------------------------
    620  f309		       ca		      dex
    621  f30a		       d0 e6		      bne	.GM_SkyLoop
    622  f30c
    623  f30c
    624  f30c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    625  f30c							;; Playfield - 152 scanlines - 11552 mc
    626  f30c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    627  f30c
    628  f30c		       a9 01		      lda	#1
    629  f30e		       85 25		      sta	VDELP0	; set vertical delay för player 0
    630  f310		       a9 00		      lda	#0
    631  f312		       85 0b		      sta	REFP0
    632  f314		       85 02		      sta	WSYNC
    633  f316		       a5 83		      lda	GM_PFColor
    634  f318		       85 08		      sta	COLUPF
    635  f31a		       a9 00		      lda	#GAME_BUG_COLOR	; load player color from lookup table
    636  f31c		       85 07		      sta	COLUP1	; set color for player 1 slice
    637  f31e		       a9 01		      lda	#%00000001
    638  f320		       85 0a		      sta	CTRLPF	; enable playfield reflection
    639  f322		       85 02		      sta	WSYNC
    640  f324		       a5 82		      lda	GM_BackgroundColor
    641  f326		       85 09		      sta	COLUBK
    642  f328
    643  f328		       a2 47		      ldx	#71
    644  f32a				   .GM_PlayfieldLoop
    645  f32a
    646  f32a				   .GM_DrawMissile
    647  f32a		       8a		      txa
    648  f32b		       a0 00		      ldy	#0	; start accumualtor with 0 (null position)
    649  f32d		       c5 97		      cmp	GM_MissileYPos	; compare X/scanline with missile y-position
    650  f32f		       d0 02		      bne	.GM_DrawMissileDone	; if is not equal, skip the draw of missile0
    651  f331		       a4 98		      ldy	GM_MissileActive	; and set ENABL second bit to enable missile
    652  f333				   .GM_DrawMissileDone
    653  f333		       84 1e		      sty	ENAM1	; store correct value in the TIA missile register
    654  f335
    655  f335
    656  f335				   .GM_DrawPlayer
    657  f335		       8a		      txa
    658  f336		       38		      sec		; make sure carry flag is set
    659  f337		       e5 8a		      sbc	GM_PlayerYPos	; subtract sprite Y coordinate
    660  f339		       c9 09		      cmp	#GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    661  f33b		       90 02		      bcc	.GM_WritePlayer	; if result < height then A contains the index
    662  f33d		       a9 00		      lda	#0	; else, set A to 0
    663  f33f				   .GM_WritePlayer
    664  f33f		       a8		      tay
    665  f340		       b1 85		      lda	(GM_PlayerPtr),Y	; load player bitmap slice of data
    666  f342		       85 1b		      sta	GRP0	; set graphics for player 0 slice - delayed
    667  f344		       b1 87		      lda	(GM_PlayerColorPtr),Y	; load player color from lookup table
    668  f346		       85 a5		      sta	Temp
    669  f348				   .GM_DrawPlayerDone
    670  f348
    671  f348				   .GM_DrawBug
    672  f348		       8a		      txa		; transfer X to A
    673  f349		       38		      sec		; make sure carry flag is set
    674  f34a		       e5 9b		      sbc	GM_BugYPos	; subtract sprite Y coordinate
    675  f34c		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    676  f34e		       90 02		      bcc	.GM_WriteBug	; if result < SpriteHeight, call subroutine
    677  f350		       a9 00		      lda	#0	; else, set index to 0
    678  f352				   .GM_WriteBug
    679  f352		       a8		      tay
    680  f353		       b9 d3 f6 	      lda	GM_BUG,Y	; load player bitmap slice of data
    681  f356		       85 02		      sta	WSYNC	; wait for next scanline
    682  f358							; -------------------------
    683  f358		       85 1c		      sta	GRP1	; set graphics for player 1 + 0 slice
    684  f35a		       a5 a5		      lda	Temp
    685  f35c		       85 06		      sta	COLUP0	; set color for player 0 slice
    686  f35e				   .GM_DrawBugDone
    687  f35e
    688  f35e				   .GM_DrawTree
    689  f35e		       8a		      txa		; A = current scanline in playfield
    690  f35f		       38		      sec		; make sure carry flag is set
    691  f360		       e9 1c		      sbc	#GAME_TREE_Y_POS	; subtract sprite Y coordinate
    692  f362		       c9 14		      cmp	#GAME_TREE_HEIGHT	; are we inside the sprite height bounds?
    693  f364		       90 02		      bcc	.GM_WriteTree	; if result < height then A contains the index
    694  f366		       a9 00		      lda	#0	; else, set A to 0
    695  f368				   .GM_WriteTree
    696  f368		       a8		      tay
    697  f369		       b9 e8 f6 	      lda	GM_TREE,y
    698  f36c		       85 0f		      sta	PF2
    699  f36e				   .GM_DrawTreeDone
    700  f36e
    701  f36e		       85 02		      sta	WSYNC
    702  f370							; -------------------------
    703  f370
    704  f370		       ca		      dex
    705  f371		       d0 b7		      bne	.GM_PlayfieldLoop	; repeat next scanline until finished
    706  f373
    707  f373							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    708  f373							;; Overscan - 30 scanlines - 2280 mc
    709  f373							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    710  f373		       a9 02		      lda	#2	; A = 2 = #%00000010
    711  f375		       85 01		      sta	VBLANK	; Turn on VBLANK
    712  f377		       a9 23		      lda	#TIMER_OVERSCAN
    713  f379		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    714  f37c
    715  f37c				   .GM_CheckReset
    716  f37c		       ad 82 02 	      lda	SWCHB	; load console switches
    717  f37f		       29 01		      and	#RESET_MASK
    718  f381		       d0 03		      bne	.GM_NoReset
    719  f383		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    720  f386				   .GM_NoReset
    721  f386
    722  f386		       20 d4 f5 	      jsr	SFX_UPDATE
    723  f389
    724  f389		       a5 9d		      lda	GameOver
    725  f38b		       f0 07		      beq	.GM_NotGameOver
    726  f38d		       a5 9f		      lda	Timer
    727  f38f		       d0 03		      bne	.GM_NotGameOver
    728  f391		       4c 6b f4 	      jmp	.GM_Continue
    729  f394				   .GM_NotGameOver
    730  f394
    731  f394		       c6 94		      dec	GM_BirdTick
    732  f396		       d0 45		      bne	.GM_BirdAnimDone
    733  f398		       a9 0a		      lda	#GAME_BIRD_TICK_LEN
    734  f39a		       85 94		      sta	GM_BirdTick
    735  f39c		       e6 95		      inc	GM_BirdYPosIdx
    736  f39e		       a5 95		      lda	GM_BirdYPosIdx
    737  f3a0		       c9 0c		      cmp	#GAME_BIRD_YPOS_TBL_LEN
    738  f3a2		       d0 1c		      bne	.GM_BirdAnimSet
      0  f3a4					      FIRE_MISSILE
      1  f3a4		       a5 98		      lda	GM_MissileActive
      2  f3a6		       d0 14		      bne	.NoMissile
      3  f3a8		       a5 89		      lda	GM_PlayerXPos
      4  f3aa		       18		      clc
      5  f3ab		       69 05		      adc	#5
      6  f3ad		       85 96		      sta	GM_MissileXPos
      7  f3af		       a9 46		      lda	#70
      8  f3b1		       85 97		      sta	GM_MissileYPos
      9  f3b3		       a9 02		      lda	#2
     10  f3b5		       85 98		      sta	GM_MissileActive
     11  f3b7		       a0 03		      ldy	#sfxCOLLIDE
     12  f3b9		       20 b2 f5 	      jsr	SFX_TRIGGER
     13  f3bc				   .NoMissile
    740  f3bc		       a9 00		      lda	#0
    741  f3be		       85 95		      sta	GM_BirdYPosIdx
    742  f3c0				   .GM_BirdAnimSet
    743  f3c0		       a8		      tay
    744  f3c1
    745  f3c1		       29 01		      and	#1
    746  f3c3		       f0 0b		      beq	.GM_BirdFlap
      0  f3c5					      SET_POINTER	GM_BirdPtr, GM_BIRD_2
      1  f3c5				   .POINTER   SET	GM_BirdPtr
      2  f3c5				   .ADDRESS   SET	GM_BIRD_2
      3  f3c5
      4  f3c5		       a9 e2		      LDA	#<.ADDRESS
      5  f3c7		       85 8e		      STA	.POINTER
      6  f3c9		       a9 f6		      LDA	#>.ADDRESS
      7  f3cb		       85 8f		      STA	.POINTER+1
      8  f3cd
    748  f3cd		       4c d8 f3 	      jmp	.GM_BirdFlapDone
    749  f3d0				   .GM_BirdFlap
      0  f3d0					      SET_POINTER	GM_BirdPtr, GM_BIRD_1
      1  f3d0				   .POINTER   SET	GM_BirdPtr
      2  f3d0				   .ADDRESS   SET	GM_BIRD_1
      3  f3d0
      4  f3d0		       a9 dc		      LDA	#<.ADDRESS
      5  f3d2		       85 8e		      STA	.POINTER
      6  f3d4		       a9 f6		      LDA	#>.ADDRESS
      7  f3d6		       85 8f		      STA	.POINTER+1
      8  f3d8
    751  f3d8				   .GM_BirdFlapDone
    752  f3d8
    753  f3d8		       b9 01 f6 	      lda	GM_BIRD_ANIM,Y
    754  f3db		       85 92		      sta	GM_BirdYPos
    755  f3dd				   .GM_BirdAnimDone
    756  f3dd
    757  f3dd		       a9 02		      lda	#2
    758  f3df		       c5 97		      cmp	GM_MissileYPos
    759  f3e1		       f0 07		      beq	.GM_StopMisssile
    760  f3e3		       c6 97		      dec	GM_MissileYPos	; else, increase y-position of the bullet/ball
    761  f3e5		       c6 97		      dec	GM_MissileYPos	; else, increase y-position of the bullet/ball
    762  f3e7		       4c ee f3 	      jmp	.GM_MissileDone
    763  f3ea				   .GM_StopMisssile
    764  f3ea		       a9 00		      lda	#0
    765  f3ec		       85 98		      sta	GM_MissileActive
    766  f3ee				   .GM_MissileDone
    767  f3ee
    768  f3ee		       a2 00		      ldx	#0
    769  f3f0				   .GM_CheckInputUp
    770  f3f0		       a9 10		      lda	#%00010000
    771  f3f2		       2c 80 02 	      bit	SWCHA
    772  f3f5		       d0 0a		      bne	.GM_CheckInputDown
    773  f3f7		       a5 8a		      lda	GM_PlayerYPos
    774  f3f9		       c9 3e		      cmp	#GAME_PLAYER_MAX_Y
    775  f3fb		       f0 04		      beq	.GM_CheckInputDown
    776  f3fd		       a2 01		      ldx	#1
    777  f3ff		       e6 8a		      inc	GM_PlayerYPos
    778  f401
    779  f401				   .GM_CheckInputDown
    780  f401		       a9 20		      lda	#%00100000
    781  f403		       2c 80 02 	      bit	SWCHA
    782  f406		       d0 0a		      bne	.GM_CheckInputLeft
    783  f408		       a5 8a		      lda	GM_PlayerYPos
    784  f40a		       c9 02		      cmp	#GAME_PLAYER_MIN_Y
    785  f40c		       f0 04		      beq	.GM_CheckInputLeft
    786  f40e		       a2 01		      ldx	#1
    787  f410		       c6 8a		      dec	GM_PlayerYPos
    788  f412
    789  f412				   .GM_CheckInputLeft
    790  f412		       a9 40		      lda	#%01000000
    791  f414		       2c 80 02 	      bit	SWCHA
    792  f417		       d0 0e		      bne	.GM_CheckInputRight
    793  f419		       a5 89		      lda	GM_PlayerXPos
    794  f41b		       c9 00		      cmp	#GAME_PLAYER_MIN_X
    795  f41d		       f0 08		      beq	.GM_CheckInputRight
    796  f41f		       a9 08		      lda	#%00001000
    797  f421		       85 93		      sta	GM_BirdReflection
    798  f423		       a2 01		      ldx	#1
    799  f425		       c6 89		      dec	GM_PlayerXPos
    800  f427
    801  f427				   .GM_CheckInputRight
    802  f427		       a9 80		      lda	#%10000000
    803  f429		       2c 80 02 	      bit	SWCHA
    804  f42c		       d0 0e		      bne	.GM_CheckInputDone
    805  f42e		       a5 89		      lda	GM_PlayerXPos
    806  f430		       c9 92		      cmp	#GAME_PLAYER_MAX_X
    807  f432		       f0 08		      beq	.GM_CheckInputDone
    808  f434		       a9 00		      lda	#0
    809  f436		       85 93		      sta	GM_BirdReflection
    810  f438		       a2 01		      ldx	#1
    811  f43a		       e6 89		      inc	GM_PlayerXPos
    812  f43c
    813  f43c				   .GM_CheckInputDone
    814  f43c		       e0 00		      cpx	#0
    815  f43e		       f0 19		      beq	.GM_SetNoPlayerAnim
    816  f440		       a9 01		      lda	#1
    817  f442		       85 8b		      sta	GM_PlayerAnimOn
    818  f444
    819  f444		       a5 8d		      lda	GM_PlayerAnimTicks
    820  f446		       d0 0c		      bne	.GM_NoNewFrame
    821  f448		       a5 0a		      lda	GAME_PLAYER_ANIM_SPEED
    822  f44a		       85 8d		      sta	GM_PlayerAnimTicks
    823  f44c		       e6 8c		      inc	GM_PlayerAnimFrame
    824  f44e		       a5 8c		      lda	GM_PlayerAnimFrame
    825  f450		       29 01		      and	#1
    826  f452		       85 8c		      sta	GM_PlayerAnimFrame
    827  f454				   .GM_NoNewFrame
    828  f454		       c6 8d		      dec	GM_PlayerAnimTicks
    829  f456				   .GM_FrameDone
    830  f456
    831  f456
    832  f456		       4c 5f f4 	      jmp	.GM_SetPlayerAnimDone
    833  f459				   .GM_SetNoPlayerAnim
    834  f459		       a9 00		      lda	#0
    835  f45b		       85 8b		      sta	GM_PlayerAnimOn
    836  f45d		       85 8d		      sta	GM_PlayerAnimTicks
    837  f45f				   .GM_SetPlayerAnimDone
    838  f45f
    839  f45f		       e0 01		      cpx	#1
    840  f461		       d0 08		      bne	.GM_Continue
    841  f463		       a5 9f		      lda	Timer
    842  f465		       f0 04		      beq	.GM_Continue
    843  f467		       a9 00		      lda	#0
    844  f469		       85 9d		      sta	GameOver
    845  f46b				   .GM_Continue
    846  f46b
    847  f46b				   .GM_OverscanWait
    848  f46b		       ae 84 02 	      ldx	INTIM
    849  f46e		       d0 fb		      bne	.GM_OverscanWait	; wait until timer is done
    850  f470		       85 02		      sta	WSYNC
    851  f472							; -------------------------
    852  f472		       4c 1c f1 	      jmp	GM_NextFrame
    853  f475
    854  f475							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    855  f475							;; Subruotines
    856  f475							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    857  f475
    858  f475				   PlaceBug   subroutine
    859  f475		       20 88 f4 	      jsr	Randomize
    860  f478		       a5 9c		      lda	Random
    861  f47a		       29 7f		      and	#%01111111
    862  f47c		       85 9a		      sta	GM_BugXPos
    863  f47e		       20 88 f4 	      jsr	Randomize
    864  f481		       a5 9c		      lda	Random
    865  f483		       29 3f		      and	#%00111111
    866  f485		       85 9b		      sta	GM_BugYPos
    867  f487		       60		      rts
    868  f488
    869  f488				   Randomize  subroutine
    870  f488		       a5 9c		      lda	Random
    871  f48a		       0a		      asl
    872  f48b		       45 9c		      eor	Random
    873  f48d		       0a		      asl
    874  f48e		       45 9c		      eor	Random
    875  f490		       0a		      asl
    876  f491		       0a		      asl
    877  f492		       45 9c		      eor	Random
    878  f494		       0a		      asl
    879  f495		       26 9c		      rol	Random	; performs a series of shifts and bit operations
    880  f497
    881  f497		       d0 04		      bne	.RandomEnd
    882  f499		       a9 72		      lda	#RANDOM_SEED
    883  f49b		       85 9c		      sta	Random
    884  f49d
    885  f49d				   .RandomEnd
    886  f49d		       60		      rts
    887  f49e
    888  f49e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    889  f49e							;; SetObjectXPos
    890  f49e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    891  f49e							;; A : Contains the the desired x-coordinate
    892  f49e							;; Y=0 : Player0
    893  f49e							;; Y=1 : Player1
    894  f49e							;; Y=2 : Missile0
    895  f49e							;; Y=3 : Missile1
    896  f49e							;; Y=4 : Ball
    897  f49e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    898  f49e				   SetObjectXPos subroutine
    899  f49e		       38		      sec		; Set carry flag
    900  f49f		       85 02		      sta	WSYNC	; Get fresh scanline
    901  f4a1							; -------------------------
    902  f4a1				   .Div15Loop		; Divide A with 15 by subtraction in loop
    903  f4a1		       e9 0f		      sbc	#15	; Subtract 15 from A
    904  f4a3		       b0 fc		      bcs	.Div15Loop	; Loop if carry flag is set
    905  f4a5		       49 07		      eor	#7	; Adjust the remainder in A between -8 and 7
    906  f4a7					      REPEAT	4	; Repeat 4 times
    907  f4a7		       0a		      asl		; Shift bits left by one
    906  f4a7					      REPEND		; End of repeat
    907  f4a8		       0a		      asl		; Shift bits left by one
    906  f4a8					      REPEND		; End of repeat
    907  f4a9		       0a		      asl		; Shift bits left by one
    906  f4a9					      REPEND		; End of repeat
    907  f4aa		       0a		      asl		; Shift bits left by one
    908  f4ab					      REPEND		; End of repeat
    909  f4ab		       99 20 00 	      sta	HMP0,Y	; Set fine position value for object HMP0+Y
    910  f4ae		       99 10 00 	      sta	RESP0,Y	; Seset rough position for object HMP0+Y
    911  f4b1		       60		      rts
    912  f4b2
    913  f4b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    914  f4b2							;; Subroutine to handle scoreboard digits to be displayed on the screen
    915  f4b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    916  f4b2							;; This is stored using BCD, so the display will be displayed in dec numbers.
    917  f4b2							;; Converts the high and low nibbles of the variables Score and Timer
    918  f4b2							;; into offsets into the digit lookup table so the values can be displayed.
    919  f4b2							;; Each digit has a height of 5 bytes in the lookup table.
    920  f4b2							;;
    921  f4b2							;; For the low nibble we need to multiply by 5:
    922  f4b2							;;   - we can use left shifts to perform multiplation by 2
    923  f4b2							;;   - for any number N, the value of N*5 = (N*2*2)+N
    924  f4b2							;;
    925  f4b2							;; For the upper nibble, since it is already times 16, we need to divide it
    926  f4b2							;; and then multiply it by 5:
    927  f4b2							;;   - we can use right shift to perform division by 2
    928  f4b2							;;   - for any number N, the value of (N/16)*5 = (N/4)+(N/16)
    929  f4b2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    930  f4b2				   PrepareScoreAndTimer subroutine
    931  f4b2		       a2 01		      ldx	#1	; X register is the loop counter
    932  f4b4				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    933  f4b4
    934  f4b4		       b5 9e		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    935  f4b6		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111
    936  f4b8		       85 a5		      sta	Temp	; save the value of A into Temp
    937  f4ba		       0a		      asl		; shift left (it is now N*2)
    938  f4bb		       0a		      asl		; shift left (it is now N*4)
    939  f4bc		       65 a5		      adc	Temp	; add the value saved in Temp (+N)
    940  f4be		       95 a1		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset
    941  f4c0
    942  f4c0		       b5 9e		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    943  f4c2		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    944  f4c4		       4a		      lsr		; shift right (it is now N/2)
    945  f4c5		       4a		      lsr		; shift right (it is now N/4)
    946  f4c6		       85 a5		      sta	Temp	; save the value of A into Temp
    947  f4c8		       4a		      lsr		; shift right (it is now N/8)
    948  f4c9		       4a		      lsr		; shift right (it is now N/16)
    949  f4ca		       65 a5		      adc	Temp	; add the value saved in Temp (N/16+N/4)
    950  f4cc		       95 a3		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    951  f4ce		       ca		      dex		; X--
    952  f4cf		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    953  f4d1
    954  f4d1		       a2 05		      ldx	#5
    955  f4d3				   .SpriteLoop
    956  f4d3
    957  f4d3		       a4 a3		      ldy	TensDigitOffset
    958  f4d5		       b9 4d f6 	      lda	Digits,y
    959  f4d8		       29 f0		      and	#$F0
    960  f4da		       85 a5		      sta	Temp
    961  f4dc
    962  f4dc		       a4 a1		      ldy	OnesDigitOffset
    963  f4de		       b9 4d f6 	      lda	Digits,y
    964  f4e1		       29 0f		      and	#$0F
    965  f4e3		       05 a5		      ora	Temp
    966  f4e5		       85 a5		      sta	Temp
    967  f4e7
    968  f4e7		       a5 a5		      lda	Temp
    969  f4e9		       95 a6		      sta	ScoreSprite,X
    970  f4eb
    971  f4eb		       a4 a4		      ldy	TensDigitOffset+1
    972  f4ed		       b9 4d f6 	      lda	Digits,y
    973  f4f0		       29 f0		      and	#$F0
    974  f4f2		       85 a5		      sta	Temp
    975  f4f4
    976  f4f4		       a4 a2		      ldy	OnesDigitOffset+1
    977  f4f6		       b9 4d f6 	      lda	Digits,y
    978  f4f9		       29 0f		      and	#$0F
    979  f4fb		       05 a5		      ora	Temp
    980  f4fd		       85 a5		      sta	Temp
    981  f4ff
    982  f4ff		       a5 a5		      lda	Temp
    983  f501		       95 ac		      sta	TimerSprite,X
    984  f503
    985  f503		       e6 a3		      inc	TensDigitOffset
    986  f505		       e6 a4		      inc	TensDigitOffset+1
    987  f507		       e6 a1		      inc	OnesDigitOffset
    988  f509		       e6 a2		      inc	OnesDigitOffset+1
    989  f50b
    990  f50b		       ca		      dex
    991  f50c		       d0 c5		      bne	.SpriteLoop
    992  f50e
    993  f50e		       60		      rts
    994  f50f
------- FILE sfx.asm LEVEL 2 PASS 2
      0  f50f					      include	sfx.asm
      1  f50f							; Like player graphics, sound data is stored in reverse order.
      2  f50f							; two tables are used, SFX_F and SFX_CV.  Values in the tables are used in
      3  f50f							; pairs, one from SFX_F and one from SFX_CV.  As such, both tables must be the
      4  f50f							; same size.  Also, the size of each table is limited to just 256 bytes. DASM
      5  f50f							; will output a compile-time warning if it spots a size problem.
      6  f50f							;
      7  f50f							; Each pair of values are used for a single frame (ie: 1/60th of a secon).  A
      8  f50f							; 0 value in the SFX_CV table means "end of sound effect", though for clarity
      9  f50f							; it is recommended to also use a matching 0 in SFX_F.
     10  f50f							;
     11  f50f							; table SFX_F holds the Frequency for the sound effects.
     12  f50f							; each .byte line contains the Frequency data for a single sound effect.
     13  f50f							; Frequency values range from 0-31
     14  f50f				   SFX_F
     15  f50f		       00 0f 0f 0f	      .byte.b	0, 15, 15, 15	; collide
     16  f513		       00 00 00 00*	      .byte.b	0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3	; collect
     17  f520		       00 08 08 08*	      .byte.b	0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8	; ping
     18  f530		       00 1f 1f 1f*	      .byte.b	0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31	; game over
     19  f540		       00 1c 1c 1c*	      .byte.b	0, 28, 28, 28, 28 ,28 ,28 ,28, 28, 22, 22, 22, 22 ,22 ,22 ,22, 22, 18, 18, 18, 18 ,18 ,18 ,18, 18	; test
     20  f559
     21  f559							; calculate size of SFX_F table and validate size
     22  f559		       00 4a	   SFX_Fcount =	*-SFX_F
     23  f559				  -	      if	SFX_Fcount > 256
     24  f559				  -	      echo	"SFX Warning: table SFX_F is too large"
     25  f559					      endif
     26  f559
     27  f559
     28  f559							; table SFX_CV holds the sound effect Channel (tone) and Volume values.
     29  f559							; Both values range from 0-15, so they are combined together.
     30  f559							; The $ denotes a HEX value where the digits are 0123456789abcdef (a=10, f=15).
     31  f559							; the first digit is the Channel value.
     32  f559							; the second digit is the Volume value.
     33  f559							; each .byte line contains the Channel and Volume data for a single sound effect
     34  f559							; the first value of every .byte line should be 0, which denotes end-of-sfx
     35  f559							; the = line below each .byte line calculates the value used when calling
     36  f559							; sfxtrigger.
     37  f559							; Channel values are:
     38  f559							; 0 = No sound (silent).
     39  f559							; 1 = Buzzy tones.
     40  f559							; 2 = Carries distortion 1 downward into a rumble.
     41  f559							; 3 = Flangy wavering tones, like a UFO.
     42  f559							; 4 = Pure tone.
     43  f559							; 5 = Same as 4.
     44  f559							; 6 = Between pure tone and buzzy tone (Adventure death uses this).
     45  f559							; 7 = Reedy tones, much brighter, down to Enduro car rumble.
     46  f559							; 8 = White noise/explosions/lightning, jet/spacecraft engine.
     47  f559							; 9 = Same as 7.
     48  f559							; a = Same as 6.
     49  f559							; b = Same as 0.
     50  f559							; c = Pure tone, goes much lower in pitch than 4 & 5.
     51  f559							; d = Same as c.
     52  f559							; e = Electronic tones, mostly lows, extends to rumble.
     53  f559							; f = Electronic tones, mostly lows, extends to rumble.
     54  f559
     55  f559				   SFX_CV
     56  f559		       00 ef ef ef	      .byte.b	0,$ef,$ef,$ef	; collide
     57  f559		       00 03	   sfxCOLLIDE =	*-SFX_CV-1
     58  f55d		       00 6f 6f 6f*	      .byte.b	0,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f,$6f	; collect
     59  f55d		       00 10	   sfxCOLLECT =	*-SFX_CV-1
     60  f56a		       00 41 42 43*	      .byte.b	0,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f	; ping
     61  f56a		       00 20	   sfxPING    =	*-SFX_CV-1
     62  f57a		       00 cf cf cf*	      .byte.b	0,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf,$cf	; game over
     63  f57a		       00 30	   sfxGAMEOVER =	*-SFX_CV-1
     64  f58a		       00 4f 4f 4f*	      .byte.b	0,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f,$4f	; game over
     65  f58a		       00 49	   sfxTEST    =	*-SFX_CV-1
     66  f5a3
     67  f5a3							; calculate size of SFX_CV table and validate size
     68  f5a3		       00 4a	   SFX_CVcount =	*-SFX_CV
     69  f5a3
     70  f5a3				  -	      if	SFX_CVcount > 256
     71  f5a3				  -	      echo	"SFX Warning: table SFX_CV is too large"
     72  f5a3					      endif
     73  f5a3				  -	      if	SFX_CVcount != SFX_Fcount
     74  f5a3				  -	      echo	"SFX Warning: table SFX_F is not the same size as table SFX_CV"
     75  f5a3					      endif
     76  f5a3
     77  f5a3
     78  f5a3				   SFX_OFF
     79  f5a3		       a2 00		      ldx	#0	; silence sound output
     80  f5a5		       86 b2		      stx	SFX_LEFT
     81  f5a7		       86 b3		      stx	SFX_RIGHT
     82  f5a9		       86 19		      stx	AUDV0
     83  f5ab		       86 1a		      stx	AUDV1
     84  f5ad		       86 15		      stx	AUDC0
     85  f5af		       86 16		      stx	AUDC1
     86  f5b1		       60		      rts
     87  f5b2
     88  f5b2				   SFX_TRIGGER
     89  f5b2		       a6 b2		      ldx	SFX_LEFT	; test left channel
     90  f5b4		       bd 59 f5 	      lda	SFX_CV,x	; CV value will be 0 if channel is idle
     91  f5b7		       d0 03		      bne	.leftnotfree	; if not 0 then skip ahead
     92  f5b9		       84 b2		      sty	SFX_LEFT	; channel is idle, use it
     93  f5bb		       60		      rts		; all done
     94  f5bc				   .leftnotfree
     95  f5bc		       a6 b3		      ldx	SFX_RIGHT	; test right channel
     96  f5be		       bd 59 f5 	      lda	SFX_CV,x	; CV value will be 0 if channel is idle
     97  f5c1		       d0 03		      bne	.rightnotfree	; if not 0 then skip ahead
     98  f5c3		       84 b3		      sty	SFX_RIGHT	; channel is idle, use it
     99  f5c5		       60		      rts		; all done
    100  f5c6				   .rightnotfree
    101  f5c6		       c4 b2		      cpy	SFX_LEFT	; test sfx priority with left channel
    102  f5c8		       90 03		      bcc	.leftnotlower	; skip ahead if new sfx has lower priority than active sfx
    103  f5ca		       84 b2		      sty	SFX_LEFT	; new sfx has higher priority so use left channel
    104  f5cc		       60		      rts		; all done
    105  f5cd				   .leftnotlower
    106  f5cd		       c4 b3		      cpy	SFX_RIGHT	; test sfx with right channel
    107  f5cf		       90 02		      bcc	.rightnotlower	; skip ahead if new sfx has lower priority than active sfx
    108  f5d1		       84 b3		      sty	SFX_RIGHT	; new sfx has higher priority so use right channel
    109  f5d3				   .rightnotlower
    110  f5d3		       60		      rts
    111  f5d4
    112  f5d4				   SFX_UPDATE
    113  f5d4		       a6 b2		      ldx	SFX_LEFT	; get the pointer for the left channel
    114  f5d6		       bd 0f f5 	      lda	SFX_F,x	; get the Frequency value
    115  f5d9		       85 17		      sta	AUDF0	; update the Frequency register
    116  f5db		       bd 59 f5 	      lda	SFX_CV,x	; get the combined Control and Volume value
    117  f5de		       85 19		      sta	AUDV0	; update the Volume register
    118  f5e0		       4a		      lsr		; prep the Control value,
    119  f5e1		       4a		      lsr		;   it's stored in the upper nybble
    120  f5e2		       4a		      lsr		;   but must be in the lower nybble
    121  f5e3		       4a		      lsr		;   when Control is updated
    122  f5e4		       85 15		      sta	AUDC0	; update the Control register
    123  f5e6		       f0 02		      beq	.skipleftdec	; skip ahead if Control = 0
    124  f5e8		       c6 b2		      dec	SFX_LEFT	; update pointer for left channel
    125  f5ea				   .skipleftdec
    126  f5ea		       a6 b3		      ldx	SFX_RIGHT	; get the pointer for the right channel
    127  f5ec		       bd 0f f5 	      lda	SFX_F,x	; get the Frequency value
    128  f5ef		       85 18		      sta	AUDF1	; update the Frequency register
    129  f5f1		       bd 59 f5 	      lda	SFX_CV,x	; get the combined Control and Volume value
    130  f5f4		       85 1a		      sta	AUDV1	; update the Volume register
    131  f5f6		       4a		      lsr		; prep the Control value,
    132  f5f7		       4a		      lsr		;   it's stored in the upper nybble
    133  f5f8		       4a		      lsr		;   but must be in the lower nybble
    134  f5f9		       4a		      lsr		;   when Control is updated
    135  f5fa		       85 16		      sta	AUDC1	; update the Control register
    136  f5fc		       f0 02		      beq	.skiprightdec	; skip ahead if Control = 0
    137  f5fe		       c6 b3		      dec	SFX_RIGHT	; update pointer for right channel
    138  f600				   .skiprightdec
    139  f600		       60		      rts		; all done
    140  f601
------- FILE metria.asm
    996  f601
    997  f601							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    998  f601							;; Lookup tabes
    999  f601							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1000  f601
   1001  f601				   GM_BIRD_ANIM
   1002  f601		       02 05 07 08*	      .byte.b	#2,#5,#7,#8,#8,#8,#8,#8,#7,#5,#2,#1
   1003  f60d
   1004  f60d							; https://www.masswerk.at/vcs-tools/TinyPlayfieldEditor/
   1005  f60d							; mode: asymmetric repeat line-height 4
   1006  f60d				   LM_LogoPF0
   1007  f60d		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$90
   1008  f615		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$40,$00,$40
   1009  f61d		       00 70		      .byte.b	$00,$70
   1010  f61f				   LM_LogoPF1
   1011  f61f		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$00,$05,$DE
   1012  f627		       0a 42 0a 4e*	      .byte.b	$0A,$42,$0A,$4E,$08,$52,$08,$56
   1013  f62f		       38 7b		      .byte.b	$38,$7B
   1014  f631				   LM_LogoPF2
   1015  f631		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$80,$00,$F8,$00
   1016  f639		       a5 00 a5 00*	      .byte.b	$A5,$00,$A5,$00,$BF,$00,$85,$00
   1017  f641		       39 03		      .byte.b	$39,$03
   1018  f643
   1019  f643				   LM_LogoFade_Color
   1020  f643		       0e 3e 3c 3a*	      .byte.b	$0E,$3E,$3C,$3A,$38
   1021  f648
   1022  f648				   LM_LogoFade_BW
   1023  f648		       0e 0c 0a 08*	      .byte.b	$0E,$0C,$0A,$08,$06
   1024  f64d
   1025  f64d				   Digits
   1026  f64d		       77		      .byte.b	%01110111	; ### ###
   1027  f64e		       55		      .byte.b	%01010101	; # # # #
   1028  f64f		       55		      .byte.b	%01010101	; # # # #
   1029  f650		       55		      .byte.b	%01010101	; # # # #
   1030  f651		       77		      .byte.b	%01110111	; ### ###
   1031  f652
   1032  f652		       11		      .byte.b	%00010001	;   #	 #
   1033  f653		       11		      .byte.b	%00010001	;   #	 #
   1034  f654		       11		      .byte.b	%00010001	;   #	 #
   1035  f655		       11		      .byte.b	%00010001	;   #	 #
   1036  f656		       11		      .byte.b	%00010001	;   #	 #
   1037  f657
   1038  f657		       77		      .byte.b	%01110111	; ### ###
   1039  f658		       11		      .byte.b	%00010001	;   #	 #
   1040  f659		       77		      .byte.b	%01110111	; ### ###
   1041  f65a		       44		      .byte.b	%01000100	; #   #
   1042  f65b		       77		      .byte.b	%01110111	; ### ###
   1043  f65c
   1044  f65c		       77		      .byte.b	%01110111	; ### ###
   1045  f65d		       11		      .byte.b	%00010001	;   #	 #
   1046  f65e		       33		      .byte.b	%00110011	;  ##	##
   1047  f65f		       11		      .byte.b	%00010001	;   #	 #
   1048  f660		       77		      .byte.b	%01110111	; ### ###
   1049  f661
   1050  f661		       55		      .byte.b	%01010101	; # # # #
   1051  f662		       55		      .byte.b	%01010101	; # # # #
   1052  f663		       77		      .byte.b	%01110111	; ### ###
   1053  f664		       11		      .byte.b	%00010001	;   #	 #
   1054  f665		       11		      .byte.b	%00010001	;   #	 #
   1055  f666
   1056  f666		       77		      .byte.b	%01110111	; ### ###
   1057  f667		       44		      .byte.b	%01000100	; #   #
   1058  f668		       77		      .byte.b	%01110111	; ### ###
   1059  f669		       11		      .byte.b	%00010001	;   #	 #
   1060  f66a		       77		      .byte.b	%01110111	; ### ###
   1061  f66b
   1062  f66b		       77		      .byte.b	%01110111	; ### ###
   1063  f66c		       44		      .byte.b	%01000100	; #   #
   1064  f66d		       77		      .byte.b	%01110111	; ### ###
   1065  f66e		       55		      .byte.b	%01010101	; # # # #
   1066  f66f		       77		      .byte.b	%01110111	; ### ###
   1067  f670
   1068  f670		       77		      .byte.b	%01110111	; ### ###
   1069  f671		       11		      .byte.b	%00010001	;   #	 #
   1070  f672		       11		      .byte.b	%00010001	;   #	 #
   1071  f673		       11		      .byte.b	%00010001	;   #	 #
   1072  f674		       11		      .byte.b	%00010001	;   #	 #
   1073  f675
   1074  f675		       77		      .byte.b	%01110111	; ### ###
   1075  f676		       55		      .byte.b	%01010101	; # # # #
   1076  f677		       77		      .byte.b	%01110111	; ### ###
   1077  f678		       55		      .byte.b	%01010101	; # # # #
   1078  f679		       77		      .byte.b	%01110111	; ### ###
   1079  f67a
   1080  f67a		       77		      .byte.b	%01110111	; ### ###
   1081  f67b		       55		      .byte.b	%01010101	; # # # #
   1082  f67c		       77		      .byte.b	%01110111	; ### ###
   1083  f67d		       11		      .byte.b	%00010001	;   #	 #
   1084  f67e		       77		      .byte.b	%01110111	; ### ###
   1085  f67f
   1086  f67f		       22		      .byte.b	%00100010	;  #	#
   1087  f680		       55		      .byte.b	%01010101	; # # # #
   1088  f681		       77		      .byte.b	%01110111	; ### ###
   1089  f682		       55		      .byte.b	%01010101	; # # # #
   1090  f683		       55		      .byte.b	%01010101	; # # # #
   1091  f684
   1092  f684		       77		      .byte.b	%01110111	; ### ###
   1093  f685		       55		      .byte.b	%01010101	; # # # #
   1094  f686		       66		      .byte.b	%01100110	; ##  ##
   1095  f687		       55		      .byte.b	%01010101	; # # # #
   1096  f688		       77		      .byte.b	%01110111	; ### ###
   1097  f689
   1098  f689		       77		      .byte.b	%01110111	; ### ###
   1099  f68a		       44		      .byte.b	%01000100	; #   #
   1100  f68b		       44		      .byte.b	%01000100	; #   #
   1101  f68c		       44		      .byte.b	%01000100	; #   #
   1102  f68d		       77		      .byte.b	%01110111	; ### ###
   1103  f68e
   1104  f68e		       66		      .byte.b	%01100110	; ##  ##
   1105  f68f		       55		      .byte.b	%01010101	; # # # #
   1106  f690		       55		      .byte.b	%01010101	; # # # #
   1107  f691		       55		      .byte.b	%01010101	; # # # #
   1108  f692		       66		      .byte.b	%01100110	; ##  ##
   1109  f693
   1110  f693		       77		      .byte.b	%01110111	; ### ###
   1111  f694		       44		      .byte.b	%01000100	; #   #
   1112  f695		       77		      .byte.b	%01110111	; ### ###
   1113  f696		       44		      .byte.b	%01000100	; #   #
   1114  f697		       77		      .byte.b	%01110111	; ### ###
   1115  f698
   1116  f698		       77		      .byte.b	%01110111	; ### ###
   1117  f699		       44		      .byte.b	%01000100	; #   #
   1118  f69a		       66		      .byte.b	%01100110	; ##  ##
   1119  f69b		       44		      .byte.b	%01000100	; #   #
   1120  f69c		       44		      .byte.b	%01000100	; #   #
   1121  f69d
   1122  f69d							;---Graphics Data from PlayerPal 2600---
   1123  f69d
   1124  f69d				   GM_PLAYER1_IDLE
   1125  f69d		       00		      .byte.b	#0
   1126  f69e		       66		      .byte.b	#%01100110	;$70
   1127  f69f		       24		      .byte.b	#%00100100	;$70
   1128  f6a0		       3c		      .byte.b	#%00111100	;$70
   1129  f6a1		       5a		      .byte.b	#%01011010	;$84
   1130  f6a2		       7e		      .byte.b	#%01111110	;$84
   1131  f6a3		       18		      .byte.b	#%00011000	;$F4
   1132  f6a4		       3c		      .byte.b	#%00111100	;$00
   1133  f6a5		       18		      .byte.b	#%00011000	;$00
   1134  f6a6				   GM_PLAYER1_WALK1
   1135  f6a6		       00		      .byte.b	#0
   1136  f6a7		       60		      .byte.b	#%01100000	;$70
   1137  f6a8		       26		      .byte.b	#%00100110	;$70
   1138  f6a9		       3c		      .byte.b	#%00111100	;$70
   1139  f6aa		       1a		      .byte.b	#%00011010	;$84
   1140  f6ab		       7e		      .byte.b	#%01111110	;$84
   1141  f6ac		       18		      .byte.b	#%00011000	;$F4
   1142  f6ad		       3c		      .byte.b	#%00111100	;$00
   1143  f6ae		       18		      .byte.b	#%00011000	;$00
   1144  f6af				   GM_PLAYER1_WALK2
   1145  f6af		       00		      .byte.b	#0
   1146  f6b0		       06		      .byte.b	#%00000110	;$70
   1147  f6b1		       64		      .byte.b	#%01100100	;$70
   1148  f6b2		       3c		      .byte.b	#%00111100	;$70
   1149  f6b3		       58		      .byte.b	#%01011000	;$84
   1150  f6b4		       7e		      .byte.b	#%01111110	;$84
   1151  f6b5		       18		      .byte.b	#%00011000	;$F4
   1152  f6b6		       3c		      .byte.b	#%00111100	;$00
   1153  f6b7		       18		      .byte.b	#%00011000	;$00
   1154  f6b8				   GM_PLAYER2_IDLE
   1155  f6b8		       00		      .byte.b	#0
   1156  f6b9		       66		      .byte.b	#%01100110	;$70
   1157  f6ba		       24		      .byte.b	#%00100100	;$70
   1158  f6bb		       3c		      .byte.b	#%00111100	;$70
   1159  f6bc		       5a		      .byte.b	#%01011010	;$84
   1160  f6bd		       7e		      .byte.b	#%01111110	;$84
   1161  f6be		       18		      .byte.b	#%00011000	;$F4
   1162  f6bf		       3c		      .byte.b	#%00111100	;$00
   1163  f6c0		       18		      .byte.b	#%00011000	;$00
   1164  f6c1				   GM_PLAYER2_WALK1
   1165  f6c1		       00		      .byte.b	#0
   1166  f6c2		       60		      .byte.b	#%01100000	;$70
   1167  f6c3		       26		      .byte.b	#%00100110	;$70
   1168  f6c4		       3c		      .byte.b	#%00111100	;$70
   1169  f6c5		       1a		      .byte.b	#%00011010	;$84
   1170  f6c6		       7e		      .byte.b	#%01111110	;$84
   1171  f6c7		       18		      .byte.b	#%00011000	;$F4
   1172  f6c8		       3c		      .byte.b	#%00111100	;$00
   1173  f6c9		       18		      .byte.b	#%00011000	;$00
   1174  f6ca				   GM_PLAYER2_WALK2
   1175  f6ca		       00		      .byte.b	#0
   1176  f6cb		       06		      .byte.b	#%00000110	;$70
   1177  f6cc		       64		      .byte.b	#%01100100	;$70
   1178  f6cd		       3c		      .byte.b	#%00111100	;$70
   1179  f6ce		       58		      .byte.b	#%01011000	;$84
   1180  f6cf		       7e		      .byte.b	#%01111110	;$84
   1181  f6d0		       18		      .byte.b	#%00011000	;$F4
   1182  f6d1		       3c		      .byte.b	#%00111100	;$00
   1183  f6d2		       18		      .byte.b	#%00011000	;$00
   1184  f6d3				   GM_BUG
   1185  f6d3		       00		      .byte.b	#0
   1186  f6d4		       00		      .byte.b	#%00000000	;$00
   1187  f6d5		       00		      .byte.b	#%00000000	;$00
   1188  f6d6		       52		      .byte.b	#%01010010	;$F0
   1189  f6d7		       3c		      .byte.b	#%00111100	;$F0
   1190  f6d8		       3c		      .byte.b	#%00111100	;$F2
   1191  f6d9		       52		      .byte.b	#%01010010	;$F0
   1192  f6da		       00		      .byte.b	#%00000000	;$00
   1193  f6db		       00		      .byte.b	#%00000000	;$00
   1194  f6dc				   GM_BIRD_1
   1195  f6dc		       00		      .byte.b	#0
   1196  f6dd		       01		      .byte.b	#%00000001	;$1C
   1197  f6de		       3f		      .byte.b	#%00111111	;$0E
   1198  f6df		       fe		      .byte.b	#%11111110	;$0A
   1199  f6e0		       18		      .byte.b	#%00011000	;$0E
   1200  f6e1		       76		      .byte.b	#%01110110	;$0E
   1201  f6e2				   GM_BIRD_2
   1202  f6e2		       00		      .byte.b	#0
   1203  f6e3		       01		      .byte.b	#%00000001	;$1C
   1204  f6e4		       3f		      .byte.b	#%00111111	;$0E
   1205  f6e5		       fe		      .byte.b	#%11111110	;$0A
   1206  f6e6		       f8		      .byte.b	#%11111000	;$0E
   1207  f6e7		       00		      .byte.b	#%00000000	;$0E
   1208  f6e8
   1209  f6e8							;---End Graphics Data---
   1210  f6e8
   1211  f6e8
   1212  f6e8				   GM_TREE
   1213  f6e8		       00 80 80 80	      .byte.b	$00,$80,$80,$80
   1214  f6ec		       80 80 80 80*	      .byte.b	$80,$80,$80,$80,$D0,$F8,$F8,$F8
   1215  f6f4		       f8 f0 f0 f0*	      .byte.b	$F8,$F0,$F0,$F0,$E0,$C0,$C0,$80
   1216  f6fc
   1217  f6fc							;---Color Data from PlayerPal 2600---
   1218  f6fc				   GM_PLAYER1_COLOR
   1219  f6fc		       00		      .byte.b	#0
   1220  f6fd		       f4		      .byte.b	#$F4	;
   1221  f6fe		       f4		      .byte.b	#$F4	;
   1222  f6ff		       f4		      .byte.b	#$F4	;
   1223  f700		       70		      .byte.b	#$70	;
   1224  f701		       70		      .byte.b	#$70	;
   1225  f702		       f4		      .byte.b	#$F4	;
   1226  f703		       00		      .byte.b	#$00	;
   1227  f704		       00		      .byte.b	#$00	;
   1228  f705				   GM_PLAYER2_COLOR
   1229  f705		       00		      .byte.b	#0
   1230  f706		       70		      .byte.b	#$70	;
   1231  f707		       70		      .byte.b	#$70	;
   1232  f708		       70		      .byte.b	#$70	;
   1233  f709		       f4		      .byte.b	#$F4	;
   1234  f70a		       f4		      .byte.b	#$F4	;
   1235  f70b		       f4		      .byte.b	#$F4	;
   1236  f70c		       00		      .byte.b	#$00	;
   1237  f70d		       00		      .byte.b	#$00	;
   1238  f70e				   GM_PLAYER1_BW
   1239  f70e		       00		      .byte.b	#0
   1240  f70f		       04		      .byte.b	#$04	;
   1241  f710		       04		      .byte.b	#$04	;
   1242  f711		       04		      .byte.b	#$04	;
   1243  f712		       00		      .byte.b	#$00	;
   1244  f713		       00		      .byte.b	#$00	;
   1245  f714		       04		      .byte.b	#$04	;
   1246  f715		       00		      .byte.b	#$00	;
   1247  f716		       00		      .byte.b	#$00	;
   1248  f717				   GM_PLAYER2_BW
   1249  f717		       00		      .byte.b	#0
   1250  f718		       00		      .byte.b	#$00	;
   1251  f719		       00		      .byte.b	#$00	;
   1252  f71a		       00		      .byte.b	#$00	;
   1253  f71b		       04		      .byte.b	#$04	;
   1254  f71c		       04		      .byte.b	#$04	;
   1255  f71d		       04		      .byte.b	#$04	;
   1256  f71e		       00		      .byte.b	#$00	;
   1257  f71f		       00		      .byte.b	#$00	;
   1258  f720				   GM_BUG_COLOR
   1259  f720		       00		      .byte.b	#0
   1260  f721		       00		      .byte.b	#$00	;
   1261  f722		       00		      .byte.b	#$00	;
   1262  f723		       f0		      .byte.b	#$F0	;
   1263  f724		       f0		      .byte.b	#$F0	;
   1264  f725		       f2		      .byte.b	#$F2	;
   1265  f726		       f0		      .byte.b	#$F0	;
   1266  f727		       00		      .byte.b	#$00	;
   1267  f728		       00		      .byte.b	#$00	;
   1268  f729				   GM_BUG_BW
   1269  f729		       00		      .byte.b	#0
   1270  f72a		       00		      .byte.b	#$00	;
   1271  f72b		       00		      .byte.b	#$00	;
   1272  f72c		       00		      .byte.b	#$00	;
   1273  f72d		       00		      .byte.b	#$00	;
   1274  f72e		       02		      .byte.b	#$02	;
   1275  f72f		       00		      .byte.b	#$00	;
   1276  f730		       00		      .byte.b	#$00	;
   1277  f731		       00		      .byte.b	#$00	;
   1278  f732				   GM_BIRD_COLOR
   1279  f732		       00		      .byte.b	#0
   1280  f733		       1c		      .byte.b	#$1C	;
   1281  f734		       0e		      .byte.b	#$0E	;
   1282  f735		       0a		      .byte.b	#$0A	;
   1283  f736		       0e		      .byte.b	#$0E	;
   1284  f737		       0e		      .byte.b	#$0E	;
   1285  f738				   GM_BIRD_BW
   1286  f738		       00		      .byte.b	#0
   1287  f739		       0c		      .byte.b	#$0C	;
   1288  f73a		       0e		      .byte.b	#$0E	;
   1289  f73b		       0a		      .byte.b	#$0A	;
   1290  f73c		       0e		      .byte.b	#$0E	;
   1291  f73d		       0e		      .byte.b	#$0E	;
   1292  f73e
   1293  f73e
   1294  f73e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1295  f73e							;; Fill the 4K ROM
   1296  f73e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1297  fffc					      org	$FFFC	; insert two pointers at the end of ROM
   1298  fffc		       00 f0		      .word.w	Reset	; reset vector
   1299  fffe		       00 f0		      .word.w	Reset	; interrupt Vector
   1300  10000
   1301  10000
