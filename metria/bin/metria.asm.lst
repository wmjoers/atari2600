------- FILE metria.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE metria.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE metria.asm
      5  0000 ????
      6  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  0000 ????						;; Macros
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????
     10  0000 ????				      MAC	wait_x_wsync
     11  0000 ????			   .WaitX
     12  0000 ????				      sta	WSYNC	; Wait for horizontal blank
     13  0000 ????				      dex		; X--
     14  0000 ????				      bne	.WaitX	; Loop until X = 0
     15  0000 ????				      ENDM
     16  0000 ????
     17  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     18  0000 ????						;; Contants
     19  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     20  0000 ????
     21  0000 ????	       00 08	   BW_MASK    =	%00001000	; bitmask for black & white switch
     22  0000 ????	       00 01	   RESET_MASK =	%00000001	; bitmask for reset switch
     23  0000 ????	       00 80	   LEFT_BTN_MASK =	%10000000	; bitmask for left joystick button
     24  0000 ????	       00 2b	   TIMER_VBLANK =	43	; value for TIM64T vertical blank timer
     25  0000 ????	       00 23	   TIMER_OVERSCAN =	35	; value for TIM64T overscan timer
     26  0000 ????
     27  0000 ????	       00 72	   RANDOM_SEED =	$72
     28  0000 ????
     29  0000 ????	       00 38	   LOGO_BK_COLOR =	$38	; logo mode background color - color mode
     30  0000 ????	       00 06	   LOGO_BK_BW =	$06	; logo mode background color - black & white
     31  0000 ????	       00 04	   LOGO_FADE_INIT_STATE =	4	; initial value for the logo fade in state
     32  0000 ????	       00 28	   LOGO_FADE_INIT_DELAY =	40	; initial delay value before logo fades in
     33  0000 ????	       00 14	   LOGO_FADE_DELAY =	20	; delay for each fade step - 20 frames/step
     34  0000 ????
     35  0000 ????	       00 c8	   GAME_BK_COLOR =	$C8	; game background color - color mode
     36  0000 ????	       00 08	   GAME_BK_BW =	$08	; game background color - black & white
     37  0000 ????	       00 c0	   GAME_PF_COLOR =	$C0	; game playfield color - color mode
     38  0000 ????	       00 02	   GAME_PF_BW =	$02	; game playfield color - black & white
     39  0000 ????	       00 78	   GAME_SKY_COLOR =	$78	; game sky color - color mode
     40  0000 ????	       00 06	   GAME_SKY_BW =	$06	; game sky color - black & white
     41  0000 ????	       00 00	   GAME_SCOREBOARD_COLOR =	$0	; game score board color - all modes
     42  0000 ????
     43  0000 ????	       00 09	   GAME_PLAYER_HEIGHT =	9	; player sprite height
     44  0000 ????	       00 09	   GAME_BUG_HEIGHT =	9	; bug sprite height
     45  0000 ????
     46  0000 ????
     47  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     48  0000 ????						;; RAM variables located outside ROM at address $0080
     49  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     50  0000 ????
     51 U0097 ????				      seg.u	variables
     52 U0080					      org	$80	; RAM address memory start
     53 U0080
     54 U0080		       00	   LM_LogoFadeState ds	1	; current logo fade state
     55 U0081		       00	   LM_LogoFadeDelay ds	1	; current logo fade delay
     56 U0082
     57 U0082		       00	   GM_BackgroundColor ds	1
     58 U0083		       00	   GM_SkyColor ds	1
     59 U0084
     60 U0084		       00 00	   GM_PlayerPtr ds	2
     61 U0086		       00 00	   GM_PlayerColorPtr ds	2
     62 U0088		       00	   GM_PlayerXPos ds	1
     63 U0089		       00	   GM_PlayerYPos ds	1
     64 U008a
     65 U008a		       00 00	   GM_BirdPtr ds	2
     66 U008c		       00 00	   GM_BirdColorPtr ds	2
     67 U008e		       00	   GM_BirdYPos ds	1
     68 U008f		       00	   GM_BirdReflection ds	1
     69 U0090
     70 U0090		       00 00	   GM_BugColorPtr ds	2
     71 U0092		       00	   GM_BugXPos ds	1
     72 U0093		       00	   GM_BugYPos ds	1
     73 U0094		       00	   GM_PlayfieldIdx ds	1
     74 U0095
     75 U0095		       00	   PFCounter  ds	1
     76 U0096		       00	   Random     ds	1
     77 U0097
     78 U0097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     79 U0097							;; Program start - Located at top of ROM at address $F000
     80 U0097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     81 U0097
     82  10000 ????				       seg	code
     83  f000					      org	$F000	; start address of ROM
     84  f000
     85  f000				   Reset
      0  f000					      CLEAN_START		; set machine to known state on startup
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     87  f00a
     88  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     89  f00a							;; Init variables
     90  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     91  f00a
     92  f00a		       a9 72		      lda	#RANDOM_SEED
     93  f00c		       85 96		      sta	Random
     94  f00e
     95  f00e		       a9 04		      lda	#LOGO_FADE_INIT_STATE
     96  f010		       85 80		      sta	LM_LogoFadeState	; initialize logo fade state
     97  f012		       a9 28		      lda	#LOGO_FADE_INIT_DELAY
     98  f014		       85 81		      sta	LM_LogoFadeDelay	; initialize logo fade delay
     99  f016
      0  f016					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f016				   .POINTER   SET	GM_PlayerPtr
      2  f016				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f016
      4  f016		       a9 34		      LDA	#<.ADDRESS
      5  f018		       85 84		      STA	.POINTER
      6  f01a		       a9 f3		      LDA	#>.ADDRESS
      7  f01c		       85 85		      STA	.POINTER+1
      8  f01e
      0  f01e					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f01e				   .POINTER   SET	GM_PlayerColorPtr
      2  f01e				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f01e
      4  f01e		       a9 85		      LDA	#<.ADDRESS
      5  f020		       85 86		      STA	.POINTER
      6  f022		       a9 f3		      LDA	#>.ADDRESS
      7  f024		       85 87		      STA	.POINTER+1
      8  f026
    102  f026
      0  f026					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f026				   .POINTER   SET	GM_BugColorPtr
      2  f026				   .ADDRESS   SET	GM_BUG_COLOR
      3  f026
      4  f026		       a9 bb		      LDA	#<.ADDRESS
      5  f028		       85 90		      STA	.POINTER
      6  f02a		       a9 f3		      LDA	#>.ADDRESS
      7  f02c		       85 91		      STA	.POINTER+1
      8  f02e
    104  f02e
      0  f02e					      SET_POINTER	GM_BirdPtr, GM_BIRD_1
      1  f02e				   .POINTER   SET	GM_BirdPtr
      2  f02e				   .ADDRESS   SET	GM_BIRD_1
      3  f02e
      4  f02e		       a9 73		      LDA	#<.ADDRESS
      5  f030		       85 8a		      STA	.POINTER
      6  f032		       a9 f3		      LDA	#>.ADDRESS
      7  f034		       85 8b		      STA	.POINTER+1
      8  f036
    106  f036
    107  f036		       a9 3e		      lda	#62
    108  f038		       85 88		      sta	GM_PlayerXPos
    109  f03a		       a9 15		      lda	#21
    110  f03c		       85 89		      sta	GM_PlayerYPos
    111  f03e
    112  f03e		       a9 04		      lda	#4
    113  f040		       85 8e		      sta	GM_BirdYPos
    114  f042		       a9 00		      lda	#0
    115  f044		       85 8f		      sta	GM_BirdReflection
    116  f046
    117  f046		       a9 02		      lda	#2
    118  f048		       85 01		      sta	VBLANK	; turn on VBLANK
    119  f04a
    120  f04a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    121  f04a							;; LOGO MODE - LM
    122  f04a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    123  f04a				   LM_NextFrame
      0  f04a					      VERTICAL_SYNC		; vertical sync - 3 scanlines
      1  f04a		       a9 0e		      lda	#%1110
      2  f04c		       85 02	   .VSLP1     sta	WSYNC
      3  f04e		       85 00		      sta	VSYNC
      4  f050		       4a		      lsr
      5  f051		       d0 f9		      bne	.VSLP1
    125  f053
    126  f053							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    127  f053							;; Vertical Blank - 37 scanlines - 2812 mc
    128  f053							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    129  f053		       a9 2b		      lda	#TIMER_VBLANK
    130  f055		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    131  f058
    132  f058				   .LM_Fade		; handles logo fade in
    133  f058		       a5 80		      lda	LM_LogoFadeState
    134  f05a		       c9 00		      cmp	#0
    135  f05c		       f0 0a		      beq	.LM_FadeDone	; if fade in is complete then jump out
    136  f05e		       c6 81		      dec	LM_LogoFadeDelay	; dec fade delay
    137  f060		       d0 06		      bne	.LM_FadeDone	; if still waiting for delay then jump out
    138  f062		       c6 80		      dec	LM_LogoFadeState	; dec fade in state
    139  f064		       a9 14		      lda	#LOGO_FADE_DELAY
    140  f066		       85 81		      sta	LM_LogoFadeDelay	; restore fade in delay
    141  f068				   .LM_FadeDone
    142  f068
    143  f068				   .LM_SetColor 		; set correct colors
    144  f068		       a4 80		      ldy	LM_LogoFadeState	; set Y = index of logo color
    145  f06a		       ad 82 02 	      lda	SWCHB	; load console switches
    146  f06d		       29 08		      and	#BW_MASK	; check if black & white
    147  f06f		       f0 0c		      beq	.LM_BWMode
    148  f071				   .LM_ColorMode
    149  f071		       a9 38		      lda	#LOGO_BK_COLOR
    150  f073		       85 09		      sta	COLUBK	; set background color
    151  f075		       b9 da f2 	      lda	LM_LogoFade_Color,Y
    152  f078		       85 08		      sta	COLUPF	; set logo color
    153  f07a		       4c 86 f0 	      jmp	.LM_SetColorDone
    154  f07d				   .LM_BWMode
    155  f07d		       a9 06		      lda	#LOGO_BK_BW
    156  f07f		       85 09		      sta	COLUBK	; set background color
    157  f081		       b9 df f2 	      lda	LM_LogoFade_BW,Y
    158  f084		       85 08		      sta	COLUPF	; set logo color
    159  f086				   .LM_SetColorDone
    160  f086
    161  f086		       e6 96		      inc	Random
    162  f088
    163  f088				   .LM_VBLankWait
    164  f088		       ae 84 02 	      ldx	INTIM
    165  f08b		       d0 fb		      bne	.LM_VBLankWait	; wait until timer is done
    166  f08d		       a9 00		      lda	#0
    167  f08f		       85 02		      sta	WSYNC	; get a fresh scanline
    168  f091							; -------------------------
    169  f091		       85 01		      sta	VBLANK	; turn off VBLANK
    170  f093
    171  f093							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    172  f093							;; Playfield - 192 scanlines - 14592 mc
    173  f093							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    174  f093
    175  f093				   .LM_Top		; waste 68 scanlines
    176  f093		       a2 44		      ldx	#68
      0  f095					      WAIT_X_WSYNC
      1  f095				   .WaitX
      2  f095		       85 02		      sta	WSYNC
      3  f097		       ca		      dex
      4  f098		       d0 fb		      bne	.WaitX
    178  f09a							; -------------------------
    179  f09a
    180  f09a				   .LM_Middle		; logo is a total of 36 scanlines
    181  f09a		       a0 00		      ldy	#0	; Y = index to playfield bytes
    182  f09c				   .LM_LoopY
    183  f09c		       a2 04		      ldx	#4	; draw every logo line 4 scanlines
    184  f09e				   .LM_LoopX
    185  f09e		       85 02		      sta	WSYNC	; get fresh scanline
    186  f0a0							; -------------------------
    187  f0a0		       b9 a4 f2 	      lda	LM_LogoPF0,Y
    188  f0a3		       85 0d		      sta	PF0	; set first part of left playfield
    189  f0a5		       b9 b6 f2 	      lda	LM_LogoPF1,Y
    190  f0a8		       85 0e		      sta	PF1	; set second part of left playfield
    191  f0aa		       b9 c8 f2 	      lda	LM_LogoPF2,Y
    192  f0ad		       85 0f		      sta	PF2	; set third part of left playfield
    193  f0af		       c8		      iny		; inc Y to get the right playfield bytes
    194  f0b0		       b9 a4 f2 	      lda	LM_LogoPF0,Y
    195  f0b3		       85 0d		      sta	PF0	; set first part of right playfield
    196  f0b5		       b9 b6 f2 	      lda	LM_LogoPF1,Y
    197  f0b8		       85 0e		      sta	PF1	; set second part of right playfield
    198  f0ba		       b9 c8 f2 	      lda	LM_LogoPF2,Y
    199  f0bd		       88		      dey		; dec Y to bea able to repeat left/right for 4 lines
    200  f0be		       ea		      nop		; just for timing
    201  f0bf		       85 0f		      sta	PF2	; set third part of right playfield
    202  f0c1
    203  f0c1		       ca		      dex
    204  f0c2		       d0 da		      bne	.LM_LoopX	; loop while we havn't drawn 4 scanlines
    205  f0c4		       c8		      iny
    206  f0c5		       c8		      iny		; inc y by 2 to get to the next playfield byte pairs
    207  f0c6		       c0 12		      cpy	#18	; all bytes drawn?
    208  f0c8		       d0 d2		      bne	.LM_LoopY	; loop until all logo bytes are drawn
    209  f0ca
    210  f0ca				   .LM_TurnOffLogo		; use 1 scanline to turn off logo
    211  f0ca		       a5 02		      lda	WSYNC	; get a fresh scanline
    212  f0cc							; -------------------------
    213  f0cc		       a9 00		      lda	#0
    214  f0ce		       85 0d		      sta	PF0	; reset playfield graphics
    215  f0d0		       85 0e		      sta	PF1
    216  f0d2		       85 0f		      sta	PF2
    217  f0d4
    218  f0d4				   .LM_Bottom
    219  f0d4		       a2 57		      ldx	#87	; waste remaining 87 scanlines
      0  f0d6					      WAIT_X_WSYNC
      1  f0d6				   .WaitX
      2  f0d6		       85 02		      sta	WSYNC
      3  f0d8		       ca		      dex
      4  f0d9		       d0 fb		      bne	.WaitX
    221  f0db							; -------------------------
    222  f0db
    223  f0db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    224  f0db							;; Overscan - 30 scanlines - 2280 mc
    225  f0db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    226  f0db		       a9 02		      lda	#2	; A = 2 = #%00000010
    227  f0dd		       85 01		      sta	VBLANK	; Turn on VBLANK
    228  f0df		       a9 23		      lda	#TIMER_OVERSCAN
    229  f0e1		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    230  f0e4
    231  f0e4				   .LM_CheckReset
    232  f0e4		       ad 82 02 	      lda	SWCHB	; load console switches
    233  f0e7		       29 01		      and	#RESET_MASK
    234  f0e9		       d0 03		      bne	.LM_NoReset
    235  f0eb		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    236  f0ee				   .LM_NoReset
    237  f0ee
    238  f0ee				   .LM_CheckLeftButton
    239  f0ee		       a5 0c		      lda	INPT4	; load left joystick button
    240  f0f0		       29 80		      and	#LEFT_BTN_MASK
    241  f0f2		       d0 08		      bne	.LM_NoLeftButton
    242  f0f4		       85 02		      sta	WSYNC
    243  f0f6		       20 6d f2 	      jsr	PlaceBug
    244  f0f9		       4c 06 f1 	      jmp	GM_NextFrame	; start game if button is pressed
    245  f0fc				   .LM_NoLeftButton
    246  f0fc
    247  f0fc				   .LM_OverscanWait
    248  f0fc		       ae 84 02 	      ldx	INTIM
    249  f0ff		       d0 fb		      bne	.LM_OverscanWait	; wait until timer is done
    250  f101		       85 02		      sta	WSYNC
    251  f103							; -------------------------
    252  f103		       4c 4a f0 	      jmp	LM_NextFrame
    253  f106
    254  f106
    255  f106							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    256  f106							;; GAME MODE - GM
    257  f106							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    258  f106				   GM_NextFrame
      0  f106					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f106		       a9 0e		      lda	#%1110
      2  f108		       85 02	   .VSLP1     sta	WSYNC
      3  f10a		       85 00		      sta	VSYNC
      4  f10c		       4a		      lsr
      5  f10d		       d0 f9		      bne	.VSLP1
    260  f10f
    261  f10f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    262  f10f							;; Vertical Blank - 37 scanlines - 2812 mc
    263  f10f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    264  f10f		       a9 2b		      lda	#TIMER_VBLANK
    265  f111		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    266  f114
    267  f114		       a5 88		      lda	GM_PlayerXPos	; load player x pos
    268  f116		       a0 00		      ldy	#0	; set Y = 0 for player 0
    269  f118		       20 90 f2 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    270  f11b
    271  f11b		       a5 92		      lda	GM_BugXPos	; load bug x pos
    272  f11d		       a0 01		      ldy	#1	; set Y = 1 for player 1
    273  f11f		       20 90 f2 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    274  f122
    275  f122		       85 02		      sta	WSYNC	; geta fresh scanline
    276  f124							; -------------------------
    277  f124		       85 2a		      sta	HMOVE	; apply positions offset
    278  f126
    279  f126				   .GM_SetColor 		; set correct colors
    280  f126		       ad 82 02 	      lda	SWCHB
    281  f129		       25 08		      and	BW_MASK
    282  f12b		       f0 27		      beq	.GM_BWMode
    283  f12d				   .GM_ColorMode
    284  f12d		       a9 78		      lda	#GAME_SKY_COLOR
    285  f12f		       85 83		      sta	GM_SkyColor
    286  f131		       a9 c8		      lda	#GAME_BK_COLOR
    287  f133		       85 82		      sta	GM_BackgroundColor
    288  f135		       a9 c0		      lda	#GAME_PF_COLOR
    289  f137		       85 08		      sta	COLUPF
      0  f139					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f139				   .POINTER   SET	GM_PlayerColorPtr
      2  f139				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f139
      4  f139		       a9 85		      LDA	#<.ADDRESS
      5  f13b		       85 86		      STA	.POINTER
      6  f13d		       a9 f3		      LDA	#>.ADDRESS
      7  f13f		       85 87		      STA	.POINTER+1
      8  f141
      0  f141					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f141				   .POINTER   SET	GM_BugColorPtr
      2  f141				   .ADDRESS   SET	GM_BUG_COLOR
      3  f141
      4  f141		       a9 bb		      LDA	#<.ADDRESS
      5  f143		       85 90		      STA	.POINTER
      6  f145		       a9 f3		      LDA	#>.ADDRESS
      7  f147		       85 91		      STA	.POINTER+1
      8  f149
      0  f149					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_COLOR
      1  f149				   .POINTER   SET	GM_BirdColorPtr
      2  f149				   .ADDRESS   SET	GM_BIRD_COLOR
      3  f149
      4  f149		       a9 cd		      LDA	#<.ADDRESS
      5  f14b		       85 8c		      STA	.POINTER
      6  f14d		       a9 f3		      LDA	#>.ADDRESS
      7  f14f		       85 8d		      STA	.POINTER+1
      8  f151
    293  f151		       4c 78 f1 	      jmp	.GM_SetColorDone
    294  f154				   .GM_BWMode
    295  f154		       a9 06		      lda	#GAME_SKY_BW
    296  f156		       85 83		      sta	GM_SkyColor
    297  f158		       a9 08		      lda	#GAME_BK_BW
    298  f15a		       85 82		      sta	GM_BackgroundColor
    299  f15c		       a9 02		      lda	#GAME_PF_BW
    300  f15e		       85 08		      sta	COLUPF
      0  f160					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_BW_IDLE
      1  f160				   .POINTER   SET	GM_PlayerColorPtr
      2  f160				   .ADDRESS   SET	GM_PLAYER_BW_IDLE
      3  f160
      4  f160		       a9 a0		      LDA	#<.ADDRESS
      5  f162		       85 86		      STA	.POINTER
      6  f164		       a9 f3		      LDA	#>.ADDRESS
      7  f166		       85 87		      STA	.POINTER+1
      8  f168
      0  f168					      SET_POINTER	GM_BugColorPtr, GM_BUG_BW
      1  f168				   .POINTER   SET	GM_BugColorPtr
      2  f168				   .ADDRESS   SET	GM_BUG_BW
      3  f168
      4  f168		       a9 c4		      LDA	#<.ADDRESS
      5  f16a		       85 90		      STA	.POINTER
      6  f16c		       a9 f3		      LDA	#>.ADDRESS
      7  f16e		       85 91		      STA	.POINTER+1
      8  f170
      0  f170					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_BW
      1  f170				   .POINTER   SET	GM_BirdColorPtr
      2  f170				   .ADDRESS   SET	GM_BIRD_BW
      3  f170
      4  f170		       a9 d6		      LDA	#<.ADDRESS
      5  f172		       85 8c		      STA	.POINTER
      6  f174		       a9 f3		      LDA	#>.ADDRESS
      7  f176		       85 8d		      STA	.POINTER+1
      8  f178
    304  f178				   .GM_SetColorDone
    305  f178		       a9 00		      lda	#GAME_SCOREBOARD_COLOR
    306  f17a		       85 09		      sta	COLUBK
    307  f17c
    308  f17c				   .GM_SetGraphics
    309  f17c		       ad 82 02 	      lda	SWCHB
    310  f17f		       29 40		      and	#%01000000
    311  f181		       f0 0b		      beq	.GM_SetDress
    312  f183				   .GM_SetPants
      0  f183					      SET_POINTER	GM_PlayerPtr, GM_PANTS_IDLE
      1  f183				   .POINTER   SET	GM_PlayerPtr
      2  f183				   .ADDRESS   SET	GM_PANTS_IDLE
      3  f183
      4  f183		       a9 4f		      LDA	#<.ADDRESS
      5  f185		       85 84		      STA	.POINTER
      6  f187		       a9 f3		      LDA	#>.ADDRESS
      7  f189		       85 85		      STA	.POINTER+1
      8  f18b
    314  f18b		       4c 96 f1 	      jmp	.GM_SetGraphicsDone
    315  f18e				   .GM_SetDress
      0  f18e					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f18e				   .POINTER   SET	GM_PlayerPtr
      2  f18e				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f18e
      4  f18e		       a9 34		      LDA	#<.ADDRESS
      5  f190		       85 84		      STA	.POINTER
      6  f192		       a9 f3		      LDA	#>.ADDRESS
      7  f194		       85 85		      STA	.POINTER+1
      8  f196
    317  f196				   .GM_SetGraphicsDone
    318  f196
    319  f196				   .GM_CheckCollisions
    320  f196		       a5 07		      lda	CXPPMM
    321  f198		       29 80		      and	#%10000000
    322  f19a		       f0 03		      beq	.GM_CheckCollisionsDone
    323  f19c		       20 6d f2 	      jsr	PlaceBug
    324  f19f				   .GM_CheckCollisionsDone
    325  f19f		       85 2c		      sta	CXCLR
    326  f1a1
    327  f1a1				   .GM_PlayfieldInit
    328  f1a1		       a9 47		      lda	#71
    329  f1a3		       85 95		      sta	PFCounter	; 144/2 scanelines
    330  f1a5
    331  f1a5				   .GM_VBLankWait
    332  f1a5		       ae 84 02 	      ldx	INTIM
    333  f1a8		       d0 fb		      bne	.GM_VBLankWait	; wait until timer is done
    334  f1aa		       a9 00		      lda	#0
    335  f1ac		       85 02		      sta	WSYNC	; get a fresh scanline
    336  f1ae							; -------------------------
    337  f1ae		       85 01		      sta	VBLANK	; turn off VBLANK
    338  f1b0
    339  f1b0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    340  f1b0							;; Score Board - 20 scanlines - 1520 mc
    341  f1b0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    342  f1b0		       a9 17		      lda	#23
    343  f1b2		       8d 96 02 	      sta	TIM64T	; set timer to 23x64 = 1472 mc
    344  f1b5
    345  f1b5				   .GM_ScoreBoardWait
    346  f1b5		       ae 84 02 	      ldx	INTIM
    347  f1b8		       d0 fb		      bne	.GM_ScoreBoardWait	; wait until timer is done
    348  f1ba		       85 02		      sta	WSYNC	; get a fresh scanline
    349  f1bc							; -------------------------
    350  f1bc
    351  f1bc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    352  f1bc							;; Sky - 30 scanlines - 1520 mc
    353  f1bc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    354  f1bc		       a5 83		      lda	GM_SkyColor
    355  f1be		       85 09		      sta	COLUBK
    356  f1c0		       a2 0f		      ldx	#15
    357  f1c2		       a9 00		      lda	#0
    358  f1c4		       85 25		      sta	VDELP0	; clear vertical delay för player 0
    359  f1c6
    360  f1c6		       a5 8f		      lda	GM_BirdReflection
    361  f1c8		       85 0b		      sta	REFP0
    362  f1ca
    363  f1ca				   .GM_SkyLoop
    364  f1ca
    365  f1ca				   .GM_DrawBird
    366  f1ca		       8a		      txa		; transfer X to A
    367  f1cb		       38		      sec		; make sure carry flag is set
    368  f1cc		       e5 8e		      sbc	GM_BirdYPos	; subtract sprite Y coordinate
    369  f1ce		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    370  f1d0		       90 02		      bcc	.GM_WriteBird	; if result < SpriteHeight, call subroutine
    371  f1d2		       a9 00		      lda	#0	; else, set index to 0
    372  f1d4				   .GM_WriteBird
    373  f1d4		       a8		      tay
    374  f1d5		       b1 8a		      lda	(GM_BirdPtr),Y	; load player bitmap slice of data
    375  f1d7		       85 02		      sta	WSYNC	; wait for next scanline
    376  f1d9							; -------------------------
    377  f1d9		       85 1b		      sta	GRP0	; set graphics for player 0 slice
    378  f1db		       b1 8c		      lda	(GM_BirdColorPtr),Y	; load player color from lookup table
    379  f1dd		       85 06		      sta	COLUP0	; set color for player 1 slice
    380  f1df				   .GM_DrawBirdDone
    381  f1df		       85 02		      sta	WSYNC	; wait for next scanline
    382  f1e1							; -------------------------
    383  f1e1		       ca		      dex
    384  f1e2		       d0 e6		      bne	.GM_SkyLoop
    385  f1e4
    386  f1e4
    387  f1e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    388  f1e4							;; Playfield - 152 scanlines - 11552 mc
    389  f1e4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    390  f1e4		       a5 82		      lda	GM_BackgroundColor
    391  f1e6		       85 09		      sta	COLUBK
    392  f1e8		       a9 01		      lda	#1
    393  f1ea		       85 25		      sta	VDELP0	; set vertical delay för player 0
    394  f1ec		       a9 00		      lda	#0
    395  f1ee		       85 0b		      sta	REFP0
    396  f1f0
    397  f1f0				   .GM_PlayfieldLoop
    398  f1f0
    399  f1f0				   .GM_DrawPlayer
    400  f1f0		       a5 95		      lda	PFCounter	; A = current scanline in playfield
    401  f1f2		       38		      sec		; make sure carry flag is set
    402  f1f3		       e5 89		      sbc	GM_PlayerYPos	; subtract sprite Y coordinate
    403  f1f5		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    404  f1f7		       90 02		      bcc	.GM_WritePlayer	; if result < height then A contains the index
    405  f1f9		       a9 00		      lda	#0	; else, set A to 0
    406  f1fb				   .GM_WritePlayer
    407  f1fb		       a8		      tay
    408  f1fc		       b1 84		      lda	(GM_PlayerPtr),Y	; load player bitmap slice of data
    409  f1fe		       85 1b		      sta	GRP0	; set graphics for player 0 slice - delayed
    410  f200		       b1 86		      lda	(GM_PlayerColorPtr),Y	; load player color from lookup table
    411  f202		       aa		      tax
    412  f203				   .GM_DrawPlayerDone
    413  f203
    414  f203				   .GM_DrawBug
    415  f203		       a5 95		      lda	PFCounter	; transfer X to A
    416  f205		       38		      sec		; make sure carry flag is set
    417  f206		       e5 93		      sbc	GM_BugYPos	; subtract sprite Y coordinate
    418  f208		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    419  f20a		       90 02		      bcc	.GM_WriteBug	; if result < SpriteHeight, call subroutine
    420  f20c		       a9 00		      lda	#0	; else, set index to 0
    421  f20e				   .GM_WriteBug
    422  f20e		       a8		      tay
    423  f20f		       b9 6a f3 	      lda	GM_BUG,Y	; load player bitmap slice of data
    424  f212		       85 02		      sta	WSYNC	; wait for next scanline
    425  f214							; -------------------------
    426  f214		       85 1c		      sta	GRP1	; set graphics for player 1 + 0 slice
    427  f216		       86 06		      stx	COLUP0	; set color for player 0 slice
    428  f218		       b1 90		      lda	(GM_BugColorPtr),Y	; load player color from lookup table
    429  f21a		       85 07		      sta	COLUP1	; set color for player 1 slice
    430  f21c				   .GM_DrawBugDone
    431  f21c		       85 02		      sta	WSYNC
    432  f21e							; -------------------------
    433  f21e		       c6 95		      dec	PFCounter
    434  f220		       d0 ce		      bne	.GM_PlayfieldLoop	; repeat next scanline until finished
    435  f222		       85 02		      sta	WSYNC
    436  f224
    437  f224							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    438  f224							;; Overscan - 30 scanlines - 2280 mc
    439  f224							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    440  f224		       a9 02		      lda	#2	; A = 2 = #%00000010
    441  f226		       85 01		      sta	VBLANK	; Turn on VBLANK
    442  f228		       a9 23		      lda	#TIMER_OVERSCAN
    443  f22a		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    444  f22d
    445  f22d				   .GM_CheckReset
    446  f22d		       ad 82 02 	      lda	SWCHB	; load console switches
    447  f230		       29 01		      and	#RESET_MASK
    448  f232		       d0 03		      bne	.GM_NoReset
    449  f234		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    450  f237				   .GM_NoReset
    451  f237
    452  f237				   .GM_CheckInputUp
    453  f237		       a9 10		      lda	#%00010000
    454  f239		       2c 80 02 	      bit	SWCHA
    455  f23c		       d0 02		      bne	.GM_CheckInputDown
    456  f23e		       e6 89		      inc	GM_PlayerYPos
    457  f240
    458  f240				   .GM_CheckInputDown
    459  f240		       a9 20		      lda	#%00100000
    460  f242		       2c 80 02 	      bit	SWCHA
    461  f245		       d0 02		      bne	.GM_CheckInputLeft
    462  f247		       c6 89		      dec	GM_PlayerYPos
    463  f249
    464  f249				   .GM_CheckInputLeft
    465  f249		       a9 40		      lda	#%01000000
    466  f24b		       2c 80 02 	      bit	SWCHA
    467  f24e		       d0 06		      bne	.GM_CheckInputRight
    468  f250		       a9 08		      lda	#%00001000
    469  f252		       85 8f		      sta	GM_BirdReflection
    470  f254		       c6 88		      dec	GM_PlayerXPos
    471  f256
    472  f256				   .GM_CheckInputRight
    473  f256		       a9 80		      lda	#%10000000
    474  f258		       2c 80 02 	      bit	SWCHA
    475  f25b		       d0 06		      bne	.GM_CheckInputDone
    476  f25d		       a9 00		      lda	#0
    477  f25f		       85 8f		      sta	GM_BirdReflection
    478  f261		       e6 88		      inc	GM_PlayerXPos
    479  f263
    480  f263				   .GM_CheckInputDone
    481  f263
    482  f263				   .GM_OverscanWait
    483  f263		       ae 84 02 	      ldx	INTIM
    484  f266		       d0 fb		      bne	.GM_OverscanWait	; wait until timer is done
    485  f268		       85 02		      sta	WSYNC
    486  f26a							; -------------------------
    487  f26a		       4c 06 f1 	      jmp	GM_NextFrame
    488  f26d
    489  f26d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    490  f26d							;; Subruotines
    491  f26d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    492  f26d
    493  f26d				   PlaceBug   subroutine
    494  f26d		       20 80 f2 	      jsr	Randomize
    495  f270		       a5 96		      lda	Random
    496  f272		       29 7f		      and	#%01111111
    497  f274		       85 92		      sta	GM_BugXPos
    498  f276		       20 80 f2 	      jsr	Randomize
    499  f279		       a5 96		      lda	Random
    500  f27b		       29 3f		      and	#%00111111
    501  f27d		       85 93		      sta	GM_BugYPos
    502  f27f		       60		      rts
    503  f280
    504  f280				   Randomize  subroutine
    505  f280		       a5 96		      lda	Random
    506  f282		       0a		      asl
    507  f283		       45 96		      eor	Random
    508  f285		       0a		      asl
    509  f286		       45 96		      eor	Random
    510  f288		       0a		      asl
    511  f289		       0a		      asl
    512  f28a		       45 96		      eor	Random
    513  f28c		       0a		      asl
    514  f28d		       26 96		      rol	Random	; performs a series of shifts and bit operations
    515  f28f		       60		      rts
    516  f290
    517  f290							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    518  f290							;; SetObjectXPos
    519  f290							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    520  f290							;; A : Contains the the desired x-coordinate
    521  f290							;; Y=0 : Player0
    522  f290							;; Y=1 : Player1
    523  f290							;; Y=2 : Missile0
    524  f290							;; Y=3 : Missile1
    525  f290							;; Y=4 : Ball
    526  f290							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    527  f290
    528  f290				   SetObjectXPos subroutine
    529  f290		       38		      sec		; Set carry flag
    530  f291		       85 02		      sta	WSYNC	; Get fresh scanline
    531  f293							; -------------------------
    532  f293				   .Div15Loop		; Divide A with 15 by subtraction in loop
    533  f293		       e9 0f		      sbc	#15	; Subtract 15 from A
    534  f295		       b0 fc		      bcs	.Div15Loop	; Loop if carry flag is set
    535  f297		       49 07		      eor	#7	; Adjust the remainder in A between -8 and 7
    536  f299					      REPEAT	4	; Repeat 4 times
    537  f299		       0a		      asl		; Shift bits left by one
    536  f299					      REPEND		; End of repeat
    537  f29a		       0a		      asl		; Shift bits left by one
    536  f29a					      REPEND		; End of repeat
    537  f29b		       0a		      asl		; Shift bits left by one
    536  f29b					      REPEND		; End of repeat
    537  f29c		       0a		      asl		; Shift bits left by one
    538  f29d					      REPEND		; End of repeat
    539  f29d		       99 20 00 	      sta	HMP0,Y	; Set fine position value for object HMP0+Y
    540  f2a0		       99 10 00 	      sta	RESP0,Y	; Seset rough position for object HMP0+Y
    541  f2a3		       60		      rts
    542  f2a4
    543  f2a4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    544  f2a4							;; Lookup tabes
    545  f2a4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    546  f2a4
    547  f2a4							; https://www.masswerk.at/vcs-tools/TinyPlayfieldEditor/
    548  f2a4							; mode: asymmetric repeat line-height 4
    549  f2a4				   LM_LogoPF0
    550  f2a4		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$90
    551  f2ac		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$40,$00,$40
    552  f2b4		       00 70		      .byte.b	$00,$70
    553  f2b6				   LM_LogoPF1
    554  f2b6		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$00,$05,$DE
    555  f2be		       0a 42 0a 4e*	      .byte.b	$0A,$42,$0A,$4E,$08,$52,$08,$56
    556  f2c6		       38 7b		      .byte.b	$38,$7B
    557  f2c8				   LM_LogoPF2
    558  f2c8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$80,$00,$F8,$00
    559  f2d0		       a5 00 a5 00*	      .byte.b	$A5,$00,$A5,$00,$BF,$00,$85,$00
    560  f2d8		       39 03		      .byte.b	$39,$03
    561  f2da
    562  f2da				   LM_LogoFade_Color
    563  f2da		       0e 3e 3c 3a*	      .byte.b	$0E,$3E,$3C,$3A,$38
    564  f2df
    565  f2df				   LM_LogoFade_BW
    566  f2df		       0e 0c 0a 08*	      .byte.b	$0E,$0C,$0A,$08,$06
    567  f2e4
    568  f2e4				   Digits
    569  f2e4		       77		      .byte.b	%01110111	; ### ###
    570  f2e5		       55		      .byte.b	%01010101	; # # # #
    571  f2e6		       55		      .byte.b	%01010101	; # # # #
    572  f2e7		       55		      .byte.b	%01010101	; # # # #
    573  f2e8		       77		      .byte.b	%01110111	; ### ###
    574  f2e9
    575  f2e9		       11		      .byte.b	%00010001	;   #	 #
    576  f2ea		       11		      .byte.b	%00010001	;   #	 #
    577  f2eb		       11		      .byte.b	%00010001	;   #	 #
    578  f2ec		       11		      .byte.b	%00010001	;   #	 #
    579  f2ed		       11		      .byte.b	%00010001	;   #	 #
    580  f2ee
    581  f2ee		       77		      .byte.b	%01110111	; ### ###
    582  f2ef		       11		      .byte.b	%00010001	;   #	 #
    583  f2f0		       77		      .byte.b	%01110111	; ### ###
    584  f2f1		       44		      .byte.b	%01000100	; #   #
    585  f2f2		       77		      .byte.b	%01110111	; ### ###
    586  f2f3
    587  f2f3		       77		      .byte.b	%01110111	; ### ###
    588  f2f4		       11		      .byte.b	%00010001	;   #	 #
    589  f2f5		       33		      .byte.b	%00110011	;  ##	##
    590  f2f6		       11		      .byte.b	%00010001	;   #	 #
    591  f2f7		       77		      .byte.b	%01110111	; ### ###
    592  f2f8
    593  f2f8		       55		      .byte.b	%01010101	; # # # #
    594  f2f9		       55		      .byte.b	%01010101	; # # # #
    595  f2fa		       77		      .byte.b	%01110111	; ### ###
    596  f2fb		       11		      .byte.b	%00010001	;   #	 #
    597  f2fc		       11		      .byte.b	%00010001	;   #	 #
    598  f2fd
    599  f2fd		       77		      .byte.b	%01110111	; ### ###
    600  f2fe		       44		      .byte.b	%01000100	; #   #
    601  f2ff		       77		      .byte.b	%01110111	; ### ###
    602  f300		       11		      .byte.b	%00010001	;   #	 #
    603  f301		       77		      .byte.b	%01110111	; ### ###
    604  f302
    605  f302		       77		      .byte.b	%01110111	; ### ###
    606  f303		       44		      .byte.b	%01000100	; #   #
    607  f304		       77		      .byte.b	%01110111	; ### ###
    608  f305		       55		      .byte.b	%01010101	; # # # #
    609  f306		       77		      .byte.b	%01110111	; ### ###
    610  f307
    611  f307		       77		      .byte.b	%01110111	; ### ###
    612  f308		       11		      .byte.b	%00010001	;   #	 #
    613  f309		       11		      .byte.b	%00010001	;   #	 #
    614  f30a		       11		      .byte.b	%00010001	;   #	 #
    615  f30b		       11		      .byte.b	%00010001	;   #	 #
    616  f30c
    617  f30c		       77		      .byte.b	%01110111	; ### ###
    618  f30d		       55		      .byte.b	%01010101	; # # # #
    619  f30e		       77		      .byte.b	%01110111	; ### ###
    620  f30f		       55		      .byte.b	%01010101	; # # # #
    621  f310		       77		      .byte.b	%01110111	; ### ###
    622  f311
    623  f311		       77		      .byte.b	%01110111	; ### ###
    624  f312		       55		      .byte.b	%01010101	; # # # #
    625  f313		       77		      .byte.b	%01110111	; ### ###
    626  f314		       11		      .byte.b	%00010001	;   #	 #
    627  f315		       77		      .byte.b	%01110111	; ### ###
    628  f316
    629  f316		       22		      .byte.b	%00100010	;  #	#
    630  f317		       55		      .byte.b	%01010101	; # # # #
    631  f318		       77		      .byte.b	%01110111	; ### ###
    632  f319		       55		      .byte.b	%01010101	; # # # #
    633  f31a		       55		      .byte.b	%01010101	; # # # #
    634  f31b
    635  f31b		       77		      .byte.b	%01110111	; ### ###
    636  f31c		       55		      .byte.b	%01010101	; # # # #
    637  f31d		       66		      .byte.b	%01100110	; ##  ##
    638  f31e		       55		      .byte.b	%01010101	; # # # #
    639  f31f		       77		      .byte.b	%01110111	; ### ###
    640  f320
    641  f320		       77		      .byte.b	%01110111	; ### ###
    642  f321		       44		      .byte.b	%01000100	; #   #
    643  f322		       44		      .byte.b	%01000100	; #   #
    644  f323		       44		      .byte.b	%01000100	; #   #
    645  f324		       77		      .byte.b	%01110111	; ### ###
    646  f325
    647  f325		       66		      .byte.b	%01100110	; ##  ##
    648  f326		       55		      .byte.b	%01010101	; # # # #
    649  f327		       55		      .byte.b	%01010101	; # # # #
    650  f328		       55		      .byte.b	%01010101	; # # # #
    651  f329		       66		      .byte.b	%01100110	; ##  ##
    652  f32a
    653  f32a		       77		      .byte.b	%01110111	; ### ###
    654  f32b		       44		      .byte.b	%01000100	; #   #
    655  f32c		       77		      .byte.b	%01110111	; ### ###
    656  f32d		       44		      .byte.b	%01000100	; #   #
    657  f32e		       77		      .byte.b	%01110111	; ### ###
    658  f32f
    659  f32f		       77		      .byte.b	%01110111	; ### ###
    660  f330		       44		      .byte.b	%01000100	; #   #
    661  f331		       66		      .byte.b	%01100110	; ##  ##
    662  f332		       44		      .byte.b	%01000100	; #   #
    663  f333		       44		      .byte.b	%01000100	; #   #
    664  f334
    665  f334							;---Graphics Data from PlayerPal 2600---
    666  f334
    667  f334				   GM_DRESS_IDLE
    668  f334		       00		      .byte.b	#0
    669  f335		       7e		      .byte.b	#%01111110	;$70
    670  f336		       7e		      .byte.b	#%01111110	;$70
    671  f337		       3c		      .byte.b	#%00111100	;$70
    672  f338		       5a		      .byte.b	#%01011010	;$84
    673  f339		       7e		      .byte.b	#%01111110	;$84
    674  f33a		       18		      .byte.b	#%00011000	;$F4
    675  f33b		       3c		      .byte.b	#%00111100	;$00
    676  f33c		       18		      .byte.b	#%00011000	;$00
    677  f33d				   GM_DRESS_WALK1
    678  f33d		       00		      .byte.b	#0
    679  f33e		       78		      .byte.b	#%01111000	;$70
    680  f33f		       7e		      .byte.b	#%01111110	;$70
    681  f340		       3c		      .byte.b	#%00111100	;$70
    682  f341		       1a		      .byte.b	#%00011010	;$84
    683  f342		       7e		      .byte.b	#%01111110	;$84
    684  f343		       18		      .byte.b	#%00011000	;$F4
    685  f344		       3c		      .byte.b	#%00111100	;$00
    686  f345		       18		      .byte.b	#%00011000	;$00
    687  f346				   GM_DRESS_WALK2
    688  f346		       00		      .byte.b	#0
    689  f347		       1e		      .byte.b	#%00011110	;$70
    690  f348		       7e		      .byte.b	#%01111110	;$70
    691  f349		       3c		      .byte.b	#%00111100	;$70
    692  f34a		       58		      .byte.b	#%01011000	;$84
    693  f34b		       7e		      .byte.b	#%01111110	;$84
    694  f34c		       18		      .byte.b	#%00011000	;$F4
    695  f34d		       3c		      .byte.b	#%00111100	;$00
    696  f34e		       18		      .byte.b	#%00011000	;$00
    697  f34f				   GM_PANTS_IDLE
    698  f34f		       00		      .byte.b	#0
    699  f350		       66		      .byte.b	#%01100110	;$70
    700  f351		       24		      .byte.b	#%00100100	;$70
    701  f352		       3c		      .byte.b	#%00111100	;$70
    702  f353		       5a		      .byte.b	#%01011010	;$84
    703  f354		       7e		      .byte.b	#%01111110	;$84
    704  f355		       18		      .byte.b	#%00011000	;$F4
    705  f356		       3c		      .byte.b	#%00111100	;$00
    706  f357		       18		      .byte.b	#%00011000	;$00
    707  f358				   GM_PANTS_WALK1
    708  f358		       00		      .byte.b	#0
    709  f359		       60		      .byte.b	#%01100000	;$70
    710  f35a		       26		      .byte.b	#%00100110	;$70
    711  f35b		       3c		      .byte.b	#%00111100	;$70
    712  f35c		       1a		      .byte.b	#%00011010	;$84
    713  f35d		       7e		      .byte.b	#%01111110	;$84
    714  f35e		       18		      .byte.b	#%00011000	;$F4
    715  f35f		       3c		      .byte.b	#%00111100	;$00
    716  f360		       18		      .byte.b	#%00011000	;$00
    717  f361				   GM_PANTS_WALK2
    718  f361		       00		      .byte.b	#0
    719  f362		       06		      .byte.b	#%00000110	;$70
    720  f363		       64		      .byte.b	#%01100100	;$70
    721  f364		       3c		      .byte.b	#%00111100	;$70
    722  f365		       58		      .byte.b	#%01011000	;$84
    723  f366		       7e		      .byte.b	#%01111110	;$84
    724  f367		       18		      .byte.b	#%00011000	;$F4
    725  f368		       3c		      .byte.b	#%00111100	;$00
    726  f369		       18		      .byte.b	#%00011000	;$00
    727  f36a				   GM_BUG
    728  f36a		       00		      .byte.b	#0
    729  f36b		       00		      .byte.b	#%00000000	;$00
    730  f36c		       00		      .byte.b	#%00000000	;$00
    731  f36d		       52		      .byte.b	#%01010010	;$F0
    732  f36e		       3c		      .byte.b	#%00111100	;$F0
    733  f36f		       3c		      .byte.b	#%00111100	;$F2
    734  f370		       52		      .byte.b	#%01010010	;$F0
    735  f371		       00		      .byte.b	#%00000000	;$00
    736  f372		       00		      .byte.b	#%00000000	;$00
    737  f373				   GM_BIRD_1
    738  f373		       00		      .byte.b	#0
    739  f374		       00		      .byte.b	#%00000000	;$1C
    740  f375		       01		      .byte.b	#%00000001	;$1C
    741  f376		       3f		      .byte.b	#%00111111	;$0E
    742  f377		       fe		      .byte.b	#%11111110	;$0A
    743  f378		       18		      .byte.b	#%00011000	;$0E
    744  f379		       76		      .byte.b	#%01110110	;$0E
    745  f37a		       00		      .byte.b	#%00000000	;$0E
    746  f37b		       00		      .byte.b	#%00000000	;$0E
    747  f37c				   GM_BIRD_2
    748  f37c		       00		      .byte.b	#0
    749  f37d		       00		      .byte.b	#%00000000	;$1C
    750  f37e		       01		      .byte.b	#%00000001	;$1C
    751  f37f		       3f		      .byte.b	#%00111111	;$0E
    752  f380		       fe		      .byte.b	#%11111110	;$0A
    753  f381		       f8		      .byte.b	#%11111000	;$0E
    754  f382		       00		      .byte.b	#%00000000	;$0E
    755  f383		       00		      .byte.b	#%00000000	;$0E
    756  f384		       00		      .byte.b	#%00000000	;$0E
    757  f385
    758  f385							;---End Graphics Data---
    759  f385
    760  f385
    761  f385							;---Color Data from PlayerPal 2600---
    762  f385				   GM_PLAYER_COLOR_IDLE
    763  f385		       00		      .byte.b	#0
    764  f386		       70		      .byte.b	#$70	;
    765  f387		       70		      .byte.b	#$70	;
    766  f388		       70		      .byte.b	#$70	;
    767  f389		       84		      .byte.b	#$84	;
    768  f38a		       84		      .byte.b	#$84	;
    769  f38b		       f4		      .byte.b	#$F4	;
    770  f38c		       00		      .byte.b	#$00	;
    771  f38d		       00		      .byte.b	#$00	;
    772  f38e				   GM_PLAYER_COLOR_WALK1
    773  f38e		       00		      .byte.b	#0
    774  f38f		       70		      .byte.b	#$70	;
    775  f390		       70		      .byte.b	#$70	;
    776  f391		       70		      .byte.b	#$70	;
    777  f392		       84		      .byte.b	#$84	;
    778  f393		       84		      .byte.b	#$84	;
    779  f394		       f4		      .byte.b	#$F4	;
    780  f395		       00		      .byte.b	#$00	;
    781  f396		       00		      .byte.b	#$00	;
    782  f397				   GM_PLAYER_COLOR_WALK2
    783  f397		       00		      .byte.b	#0
    784  f398		       70		      .byte.b	#$70	;
    785  f399		       70		      .byte.b	#$70	;
    786  f39a		       70		      .byte.b	#$70	;
    787  f39b		       84		      .byte.b	#$84	;
    788  f39c		       84		      .byte.b	#$84	;
    789  f39d		       f4		      .byte.b	#$F4	;
    790  f39e		       00		      .byte.b	#$00	;
    791  f39f		       00		      .byte.b	#$00	;
    792  f3a0				   GM_PLAYER_BW_IDLE
    793  f3a0		       00		      .byte.b	#0
    794  f3a1		       00		      .byte.b	#$0	;
    795  f3a2		       00		      .byte.b	#$0	;
    796  f3a3		       00		      .byte.b	#$0	;
    797  f3a4		       02		      .byte.b	#$02	;
    798  f3a5		       02		      .byte.b	#$02	;
    799  f3a6		       04		      .byte.b	#$04	;
    800  f3a7		       00		      .byte.b	#$00	;
    801  f3a8		       00		      .byte.b	#$00	;
    802  f3a9				   GM_PLAYER_BW_WALK1
    803  f3a9		       00		      .byte.b	#0
    804  f3aa		       00		      .byte.b	#$0	;
    805  f3ab		       00		      .byte.b	#$0	;
    806  f3ac		       00		      .byte.b	#$0	;
    807  f3ad		       02		      .byte.b	#$02	;
    808  f3ae		       02		      .byte.b	#$02	;
    809  f3af		       04		      .byte.b	#$04	;
    810  f3b0		       00		      .byte.b	#$00	;
    811  f3b1		       00		      .byte.b	#$00	;
    812  f3b2				   GM_PLAYER_BW_WALK2
    813  f3b2		       00		      .byte.b	#0
    814  f3b3		       00		      .byte.b	#$0	;
    815  f3b4		       00		      .byte.b	#$0	;
    816  f3b5		       00		      .byte.b	#$0	;
    817  f3b6		       02		      .byte.b	#$02	;
    818  f3b7		       02		      .byte.b	#$02	;
    819  f3b8		       04		      .byte.b	#$04	;
    820  f3b9		       00		      .byte.b	#$00	;
    821  f3ba		       00		      .byte.b	#$00	;
    822  f3bb				   GM_BUG_COLOR
    823  f3bb		       00		      .byte.b	#0
    824  f3bc		       00		      .byte.b	#$00	;
    825  f3bd		       00		      .byte.b	#$00	;
    826  f3be		       f0		      .byte.b	#$F0	;
    827  f3bf		       f0		      .byte.b	#$F0	;
    828  f3c0		       f2		      .byte.b	#$F2	;
    829  f3c1		       f0		      .byte.b	#$F0	;
    830  f3c2		       00		      .byte.b	#$00	;
    831  f3c3		       00		      .byte.b	#$00	;
    832  f3c4				   GM_BUG_BW
    833  f3c4		       00		      .byte.b	#0
    834  f3c5		       00		      .byte.b	#$00	;
    835  f3c6		       00		      .byte.b	#$00	;
    836  f3c7		       00		      .byte.b	#$00	;
    837  f3c8		       00		      .byte.b	#$00	;
    838  f3c9		       02		      .byte.b	#$02	;
    839  f3ca		       00		      .byte.b	#$00	;
    840  f3cb		       00		      .byte.b	#$00	;
    841  f3cc		       00		      .byte.b	#$00	;
    842  f3cd				   GM_BIRD_COLOR
    843  f3cd		       00		      .byte.b	#0
    844  f3ce		       1c		      .byte.b	#$1C	;
    845  f3cf		       1c		      .byte.b	#$1C	;
    846  f3d0		       0e		      .byte.b	#$0E	;
    847  f3d1		       0a		      .byte.b	#$0A	;
    848  f3d2		       0e		      .byte.b	#$0E	;
    849  f3d3		       0e		      .byte.b	#$0E	;
    850  f3d4		       0e		      .byte.b	#$0E	;
    851  f3d5		       0e		      .byte.b	#$0E	;
    852  f3d6				   GM_BIRD_BW
    853  f3d6		       00		      .byte.b	#0
    854  f3d7		       0c		      .byte.b	#$0C	;
    855  f3d8		       0c		      .byte.b	#$0C	;
    856  f3d9		       0e		      .byte.b	#$0E	;
    857  f3da		       0a		      .byte.b	#$0A	;
    858  f3db		       0e		      .byte.b	#$0E	;
    859  f3dc		       0e		      .byte.b	#$0E	;
    860  f3dd		       0e		      .byte.b	#$0E	;
    861  f3de		       0e		      .byte.b	#$0E	;
    862  f3df
    863  f3df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    864  f3df							;; Fill the 4K ROM
    865  f3df							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    866  fffc					      org	$FFFC	; insert two pointers at the end of ROM
    867  fffc		       00 f0		      .word.w	Reset	; reset vector
    868  fffe		       00 f0		      .word.w	Reset	; interrupt Vector
    869  10000
    870  10000
