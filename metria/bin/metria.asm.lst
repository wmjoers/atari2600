------- FILE metria.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.06, 06/SEP/2020
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_VCS =	106
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE metria.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE metria.asm
      5  0000 ????
      6  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      7  0000 ????						;; Macros
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????
     10  0000 ????				      MAC	wait_x_wsync
     11  0000 ????			   .WaitX
     12  0000 ????				      sta	WSYNC	; Wait for horizontal blank
     13  0000 ????				      dex		; X--
     14  0000 ????				      bne	.WaitX	; Loop until X = 0
     15  0000 ????				      ENDM
     16  0000 ????
     17  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     18  0000 ????						;; Contants
     19  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     20  0000 ????
     21  0000 ????	       00 08	   BW_MASK    =	%00001000	; bitmask for black & white switch
     22  0000 ????	       00 01	   RESET_MASK =	%00000001	; bitmask for reset switch
     23  0000 ????	       00 80	   LEFT_BTN_MASK =	%10000000	; bitmask for left joystick button
     24  0000 ????	       00 2b	   TIMER_VBLANK =	43	; value for TIM64T vertical blank timer
     25  0000 ????	       00 23	   TIMER_OVERSCAN =	35	; value for TIM64T overscan timer
     26  0000 ????
     27  0000 ????	       00 72	   RANDOM_SEED =	$72
     28  0000 ????
     29  0000 ????	       00 38	   LOGO_BK_COLOR =	$38	; logo mode background color - color mode
     30  0000 ????	       00 06	   LOGO_BK_BW =	$06	; logo mode background color - black & white
     31  0000 ????	       00 04	   LOGO_FADE_INIT_STATE =	4	; initial value for the logo fade in state
     32  0000 ????	       00 28	   LOGO_FADE_INIT_DELAY =	40	; initial delay value before logo fades in
     33  0000 ????	       00 14	   LOGO_FADE_DELAY =	20	; delay for each fade step - 20 frames/step
     34  0000 ????
     35  0000 ????	       00 c8	   GAME_BK_COLOR =	$C8	; game background color - color mode
     36  0000 ????	       00 08	   GAME_BK_BW =	$08	; game background color - black & white
     37  0000 ????	       00 c0	   GAME_PF_COLOR =	$C0	; game playfield color - color mode
     38  0000 ????	       00 02	   GAME_PF_BW =	$02	; game playfield color - black & white
     39  0000 ????	       00 78	   GAME_SKY_COLOR =	$78	; game sky color - color mode
     40  0000 ????	       00 04	   GAME_SKY_BW =	$04	; game sky color - black & white
     41  0000 ????
     42  0000 ????	       00 00	   GAME_SCOREBACK_COLOR =	$0	; game score board color - all modes
     43  0000 ????	       00 20	   GAME_GAMEOVER_COLOR =	$20	; game over color - color mode
     44  0000 ????	       00 02	   GAME_GAMEOVER_BW =	$02	; game over color - black & white
     45  0000 ????
     46  0000 ????	       00 09	   GAME_PLAYER_HEIGHT =	9	; player sprite height
     47  0000 ????	       00 09	   GAME_BUG_HEIGHT =	9	; bug sprite height
     48  0000 ????
     49  0000 ????	       00 09	   GAME_BIRD_HEIGHT =	9	; bird sprite height
     50  0000 ????
     51  0000 ????	       00 05	   GAME_DIGIT_HEIGHT =	5	; digit height
     52  0000 ????
     53  0000 ????	       00 10	   GAME_MAX_TIME =	%00010000
     54  0000 ????
     55  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     56  0000 ????						;; RAM variables located outside ROM at address $0080
     57  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     58  0000 ????
     59 U00ac ????				      seg.u	variables
     60 U0080					      org	$80	; RAM address memory start
     61 U0080
     62 U0080		       00	   LM_LogoFadeState ds	1	; current logo fade state
     63 U0081		       00	   LM_LogoFadeDelay ds	1	; current logo fade delay
     64 U0082
     65 U0082		       00	   GM_BackgroundColor ds	1
     66 U0083		       00	   GM_SkyColor ds	1
     67 U0084
     68 U0084		       00 00	   GM_PlayerPtr ds	2
     69 U0086		       00 00	   GM_PlayerColorPtr ds	2
     70 U0088		       00	   GM_PlayerXPos ds	1
     71 U0089		       00	   GM_PlayerYPos ds	1
     72 U008a
     73 U008a		       00 00	   GM_BirdPtr ds	2
     74 U008c		       00 00	   GM_BirdColorPtr ds	2
     75 U008e		       00	   GM_BirdYPos ds	1
     76 U008f		       00	   GM_BirdReflection ds	1
     77 U0090
     78 U0090		       00 00	   GM_BugColorPtr ds	2
     79 U0092		       00	   GM_BugXPos ds	1
     80 U0093		       00	   GM_BugYPos ds	1
     81 U0094		       00	   GM_PlayfieldIdx ds	1
     82 U0095
     83 U0095		       00	   PFCounter  ds	1
     84 U0096		       00	   Random     ds	1
     85 U0097
     86 U0097		       00	   GameOver   ds	1
     87 U0098		       00	   Score      ds	1	; stored as BCD
     88 U0099		       00	   Timer      ds	1	; stored as BCD
     89 U009a		       00	   TimerTick  ds	1
     90 U009b		       00 00	   OnesDigitOffset ds	2
     91 U009d		       00 00	   TensDigitOffset ds	2
     92 U009f		       00	   Temp       ds	1
     93 U00a0		       00 00 00 00*ScoreSprite ds	6
     94 U00a6		       00 00 00 00*TimerSprite ds	6
     95 U00ac
     96 U00ac							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     97 U00ac							;; Program start - Located at top of ROM at address $F000
     98 U00ac							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     99 U00ac
    100  10000 ????				       seg	code
    101  f000					      org	$F000	; start address of ROM
    102  f000
    103  f000				   Reset
      0  f000					      CLEAN_START		; set machine to known state on startup
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
    105  f00a
    106  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    107  f00a							;; Init variables
    108  f00a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    109  f00a
    110  f00a		       a9 72		      lda	#RANDOM_SEED
    111  f00c		       85 96		      sta	Random
    112  f00e
    113  f00e		       a9 04		      lda	#LOGO_FADE_INIT_STATE
    114  f010		       85 80		      sta	LM_LogoFadeState	; initialize logo fade state
    115  f012		       a9 28		      lda	#LOGO_FADE_INIT_DELAY
    116  f014		       85 81		      sta	LM_LogoFadeDelay	; initialize logo fade delay
    117  f016
      0  f016					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f016				   .POINTER   SET	GM_PlayerPtr
      2  f016				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f016
      4  f016		       a9 43		      LDA	#<.ADDRESS
      5  f018		       85 84		      STA	.POINTER
      6  f01a		       a9 f4		      LDA	#>.ADDRESS
      7  f01c		       85 85		      STA	.POINTER+1
      8  f01e
      0  f01e					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f01e				   .POINTER   SET	GM_PlayerColorPtr
      2  f01e				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f01e
      4  f01e		       a9 94		      LDA	#<.ADDRESS
      5  f020		       85 86		      STA	.POINTER
      6  f022		       a9 f4		      LDA	#>.ADDRESS
      7  f024		       85 87		      STA	.POINTER+1
      8  f026
    120  f026
      0  f026					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f026				   .POINTER   SET	GM_BugColorPtr
      2  f026				   .ADDRESS   SET	GM_BUG_COLOR
      3  f026
      4  f026		       a9 ca		      LDA	#<.ADDRESS
      5  f028		       85 90		      STA	.POINTER
      6  f02a		       a9 f4		      LDA	#>.ADDRESS
      7  f02c		       85 91		      STA	.POINTER+1
      8  f02e
    122  f02e
      0  f02e					      SET_POINTER	GM_BirdPtr, GM_BIRD_1
      1  f02e				   .POINTER   SET	GM_BirdPtr
      2  f02e				   .ADDRESS   SET	GM_BIRD_1
      3  f02e
      4  f02e		       a9 82		      LDA	#<.ADDRESS
      5  f030		       85 8a		      STA	.POINTER
      6  f032		       a9 f4		      LDA	#>.ADDRESS
      7  f034		       85 8b		      STA	.POINTER+1
      8  f036
    124  f036
    125  f036		       a9 3e		      lda	#62
    126  f038		       85 88		      sta	GM_PlayerXPos
    127  f03a		       a9 15		      lda	#21
    128  f03c		       85 89		      sta	GM_PlayerYPos
    129  f03e
    130  f03e		       a9 04		      lda	#4
    131  f040		       85 8e		      sta	GM_BirdYPos
    132  f042		       a9 00		      lda	#0
    133  f044		       85 8f		      sta	GM_BirdReflection
    134  f046
    135  f046		       a9 01		      lda	#1
    136  f048		       85 9a		      sta	TimerTick
    137  f04a		       a9 10		      lda	#GAME_MAX_TIME
    138  f04c		       85 99		      sta	Timer
    139  f04e
    140  f04e		       a9 01		      lda	#1
    141  f050		       85 97		      sta	GameOver
    142  f052
    143  f052		       a9 02		      lda	#2
    144  f054		       85 01		      sta	VBLANK	; turn on VBLANK
    145  f056
    146  f056							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    147  f056							;; LOGO MODE - LM
    148  f056							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    149  f056				   LM_NextFrame
      0  f056					      VERTICAL_SYNC		; vertical sync - 3 scanlines
      1  f056		       a9 0e		      lda	#%1110
      2  f058		       85 02	   .VSLP1     sta	WSYNC
      3  f05a		       85 00		      sta	VSYNC
      4  f05c		       4a		      lsr
      5  f05d		       d0 f9		      bne	.VSLP1
    151  f05f
    152  f05f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    153  f05f							;; Vertical Blank - 37 scanlines - 2812 mc
    154  f05f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    155  f05f		       a9 2b		      lda	#TIMER_VBLANK
    156  f061		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    157  f064
    158  f064				   .LM_Fade		; handles logo fade in
    159  f064		       a5 80		      lda	LM_LogoFadeState
    160  f066		       c9 00		      cmp	#0
    161  f068		       f0 0a		      beq	.LM_FadeDone	; if fade in is complete then jump out
    162  f06a		       c6 81		      dec	LM_LogoFadeDelay	; dec fade delay
    163  f06c		       d0 06		      bne	.LM_FadeDone	; if still waiting for delay then jump out
    164  f06e		       c6 80		      dec	LM_LogoFadeState	; dec fade in state
    165  f070		       a9 14		      lda	#LOGO_FADE_DELAY
    166  f072		       85 81		      sta	LM_LogoFadeDelay	; restore fade in delay
    167  f074				   .LM_FadeDone
    168  f074
    169  f074				   .LM_SetColor 		; set correct colors
    170  f074		       a4 80		      ldy	LM_LogoFadeState	; set Y = index of logo color
    171  f076		       ad 82 02 	      lda	SWCHB	; load console switches
    172  f079		       29 08		      and	#BW_MASK	; check if black & white
    173  f07b		       f0 0c		      beq	.LM_BWMode
    174  f07d				   .LM_ColorMode
    175  f07d		       a9 38		      lda	#LOGO_BK_COLOR
    176  f07f		       85 09		      sta	COLUBK	; set background color
    177  f081		       b9 e9 f3 	      lda	LM_LogoFade_Color,Y
    178  f084		       85 08		      sta	COLUPF	; set logo color
    179  f086		       4c 92 f0 	      jmp	.LM_SetColorDone
    180  f089				   .LM_BWMode
    181  f089		       a9 06		      lda	#LOGO_BK_BW
    182  f08b		       85 09		      sta	COLUBK	; set background color
    183  f08d		       b9 ee f3 	      lda	LM_LogoFade_BW,Y
    184  f090		       85 08		      sta	COLUPF	; set logo color
    185  f092				   .LM_SetColorDone
    186  f092
    187  f092		       e6 96		      inc	Random
    188  f094
    189  f094				   .LM_VBLankWait
    190  f094		       ae 84 02 	      ldx	INTIM
    191  f097		       d0 fb		      bne	.LM_VBLankWait	; wait until timer is done
    192  f099		       a9 00		      lda	#0
    193  f09b		       85 02		      sta	WSYNC	; get a fresh scanline
    194  f09d							; -------------------------
    195  f09d		       85 01		      sta	VBLANK	; turn off VBLANK
    196  f09f
    197  f09f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    198  f09f							;; Playfield - 192 scanlines - 14592 mc
    199  f09f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    200  f09f
    201  f09f				   .LM_Top		; waste 68 scanlines
    202  f09f		       a2 44		      ldx	#68
      0  f0a1					      WAIT_X_WSYNC
      1  f0a1				   .WaitX
      2  f0a1		       85 02		      sta	WSYNC
      3  f0a3		       ca		      dex
      4  f0a4		       d0 fb		      bne	.WaitX
    204  f0a6							; -------------------------
    205  f0a6
    206  f0a6				   .LM_Middle		; logo is a total of 36 scanlines
    207  f0a6		       a0 00		      ldy	#0	; Y = index to playfield bytes
    208  f0a8				   .LM_LoopY
    209  f0a8		       a2 04		      ldx	#4	; draw every logo line 4 scanlines
    210  f0aa				   .LM_LoopX
    211  f0aa		       85 02		      sta	WSYNC	; get fresh scanline
    212  f0ac							; -------------------------
    213  f0ac		       b9 b3 f3 	      lda	LM_LogoPF0,Y
    214  f0af		       85 0d		      sta	PF0	; set first part of left playfield
    215  f0b1		       b9 c5 f3 	      lda	LM_LogoPF1,Y
    216  f0b4		       85 0e		      sta	PF1	; set second part of left playfield
    217  f0b6		       b9 d7 f3 	      lda	LM_LogoPF2,Y
    218  f0b9		       85 0f		      sta	PF2	; set third part of left playfield
    219  f0bb		       c8		      iny		; inc Y to get the right playfield bytes
    220  f0bc		       b9 b3 f3 	      lda	LM_LogoPF0,Y
    221  f0bf		       85 0d		      sta	PF0	; set first part of right playfield
    222  f0c1		       b9 c5 f3 	      lda	LM_LogoPF1,Y
    223  f0c4		       85 0e		      sta	PF1	; set second part of right playfield
    224  f0c6		       b9 d7 f3 	      lda	LM_LogoPF2,Y
    225  f0c9		       88		      dey		; dec Y to bea able to repeat left/right for 4 lines
    226  f0ca		       ea		      nop		; just for timing
    227  f0cb		       85 0f		      sta	PF2	; set third part of right playfield
    228  f0cd
    229  f0cd		       ca		      dex
    230  f0ce		       d0 da		      bne	.LM_LoopX	; loop while we havn't drawn 4 scanlines
    231  f0d0		       c8		      iny
    232  f0d1		       c8		      iny		; inc y by 2 to get to the next playfield byte pairs
    233  f0d2		       c0 12		      cpy	#18	; all bytes drawn?
    234  f0d4		       d0 d2		      bne	.LM_LoopY	; loop until all logo bytes are drawn
    235  f0d6
    236  f0d6				   .LM_TurnOffLogo		; use 1 scanline to turn off logo
    237  f0d6		       a5 02		      lda	WSYNC	; get a fresh scanline
    238  f0d8							; -------------------------
    239  f0d8		       a9 00		      lda	#0
    240  f0da		       85 0d		      sta	PF0	; reset playfield graphics
    241  f0dc		       85 0e		      sta	PF1
    242  f0de		       85 0f		      sta	PF2
    243  f0e0
    244  f0e0				   .LM_Bottom
    245  f0e0		       a2 57		      ldx	#87	; waste remaining 87 scanlines
      0  f0e2					      WAIT_X_WSYNC
      1  f0e2				   .WaitX
      2  f0e2		       85 02		      sta	WSYNC
      3  f0e4		       ca		      dex
      4  f0e5		       d0 fb		      bne	.WaitX
    247  f0e7							; -------------------------
    248  f0e7
    249  f0e7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    250  f0e7							;; Overscan - 30 scanlines - 2280 mc
    251  f0e7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    252  f0e7		       a9 02		      lda	#2	; A = 2 = #%00000010
    253  f0e9		       85 01		      sta	VBLANK	; Turn on VBLANK
    254  f0eb		       a9 23		      lda	#TIMER_OVERSCAN
    255  f0ed		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    256  f0f0
    257  f0f0				   .LM_CheckReset
    258  f0f0		       ad 82 02 	      lda	SWCHB	; load console switches
    259  f0f3		       29 01		      and	#RESET_MASK
    260  f0f5		       d0 03		      bne	.LM_NoReset
    261  f0f7		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    262  f0fa				   .LM_NoReset
    263  f0fa
    264  f0fa				   .LM_CheckLeftButton
    265  f0fa		       a5 0c		      lda	INPT4	; load left joystick button
    266  f0fc		       29 80		      and	#LEFT_BTN_MASK
    267  f0fe		       d0 08		      bne	.LM_NoLeftButton
    268  f100		       85 02		      sta	WSYNC
    269  f102		       20 1f f3 	      jsr	PlaceBug
    270  f105		       4c 12 f1 	      jmp	GM_NextFrame	; start game if button is pressed
    271  f108				   .LM_NoLeftButton
    272  f108
    273  f108				   .LM_OverscanWait
    274  f108		       ae 84 02 	      ldx	INTIM
    275  f10b		       d0 fb		      bne	.LM_OverscanWait	; wait until timer is done
    276  f10d		       85 02		      sta	WSYNC
    277  f10f							; -------------------------
    278  f10f		       4c 56 f0 	      jmp	LM_NextFrame
    279  f112
    280  f112
    281  f112							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    282  f112							;; GAME MODE - GM
    283  f112							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    284  f112				   GM_NextFrame
      0  f112					      VERTICAL_SYNC		; Vertical sync - 3 scanlines
      1  f112		       a9 0e		      lda	#%1110
      2  f114		       85 02	   .VSLP1     sta	WSYNC
      3  f116		       85 00		      sta	VSYNC
      4  f118		       4a		      lsr
      5  f119		       d0 f9		      bne	.VSLP1
    286  f11b
    287  f11b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    288  f11b							;; Vertical Blank - 37 scanlines - 2812 mc
    289  f11b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    290  f11b		       a9 2b		      lda	#TIMER_VBLANK
    291  f11d		       8d 96 02 	      sta	TIM64T	; set timer to 43x64 = 2752 mc
    292  f120
    293  f120		       a5 88		      lda	GM_PlayerXPos	; load player x pos
    294  f122		       a0 00		      ldy	#0	; set Y = 0 for player 0
    295  f124		       20 42 f3 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    296  f127
    297  f127		       a5 92		      lda	GM_BugXPos	; load bug x pos
    298  f129		       a0 01		      ldy	#1	; set Y = 1 for player 1
    299  f12b		       20 42 f3 	      jsr	SetObjectXPos	; call subroutine to set object x pos
    300  f12e
    301  f12e		       85 02		      sta	WSYNC	; geta fresh scanline
    302  f130							; -------------------------
    303  f130		       85 2a		      sta	HMOVE	; apply positions offset
    304  f132
    305  f132				   .GM_HandleTimer
    306  f132		       a5 97		      lda	GameOver
    307  f134		       d0 19		      bne	.GM_HandleTimerDone
    308  f136
    309  f136		       c6 9a		      dec	TimerTick
    310  f138		       d0 15		      bne	.GM_HandleTimerDone
    311  f13a
    312  f13a		       a9 3c		      lda	#60
    313  f13c		       85 9a		      sta	TimerTick
    314  f13e
    315  f13e		       f8		      sed
    316  f13f		       a5 99		      lda	Timer
    317  f141		       38		      sec
    318  f142		       e9 01		      sbc	#1
    319  f144		       85 99		      sta	Timer
    320  f146		       d8		      cld
    321  f147
    322  f147		       a5 99		      lda	Timer
    323  f149		       d0 04		      bne	.GM_HandleTimerDone
    324  f14b		       a9 01		      lda	#1
    325  f14d		       85 97		      sta	GameOver
    326  f14f				   .GM_HandleTimerDone
    327  f14f
    328  f14f				   .GM_SetColor 		; set correct colors
    329  f14f		       ad 82 02 	      lda	SWCHB
    330  f152		       25 08		      and	BW_MASK
    331  f154		       f0 36		      beq	.GM_BWMode
    332  f156				   .GM_ColorMode
    333  f156		       a9 78		      lda	#GAME_SKY_COLOR
    334  f158		       85 83		      sta	GM_SkyColor
    335  f15a		       a9 c8		      lda	#GAME_BK_COLOR
    336  f15c		       85 82		      sta	GM_BackgroundColor
    337  f15e		       a9 c0		      lda	#GAME_PF_COLOR
    338  f160		       85 08		      sta	COLUPF
      0  f162					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_COLOR_IDLE
      1  f162				   .POINTER   SET	GM_PlayerColorPtr
      2  f162				   .ADDRESS   SET	GM_PLAYER_COLOR_IDLE
      3  f162
      4  f162		       a9 94		      LDA	#<.ADDRESS
      5  f164		       85 86		      STA	.POINTER
      6  f166		       a9 f4		      LDA	#>.ADDRESS
      7  f168		       85 87		      STA	.POINTER+1
      8  f16a
      0  f16a					      SET_POINTER	GM_BugColorPtr, GM_BUG_COLOR
      1  f16a				   .POINTER   SET	GM_BugColorPtr
      2  f16a				   .ADDRESS   SET	GM_BUG_COLOR
      3  f16a
      4  f16a		       a9 ca		      LDA	#<.ADDRESS
      5  f16c		       85 90		      STA	.POINTER
      6  f16e		       a9 f4		      LDA	#>.ADDRESS
      7  f170		       85 91		      STA	.POINTER+1
      8  f172
      0  f172					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_COLOR
      1  f172				   .POINTER   SET	GM_BirdColorPtr
      2  f172				   .ADDRESS   SET	GM_BIRD_COLOR
      3  f172
      4  f172		       a9 dc		      LDA	#<.ADDRESS
      5  f174		       85 8c		      STA	.POINTER
      6  f176		       a9 f4		      LDA	#>.ADDRESS
      7  f178		       85 8d		      STA	.POINTER+1
      8  f17a
    342  f17a
    343  f17a				   .GM_SetCoreboardColorCM
    344  f17a		       a5 99		      lda	Timer
    345  f17c		       f0 07		      beq	.GM_GameOverCM
    346  f17e		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    347  f180		       85 09		      sta	COLUBK
    348  f182		       4c 89 f1 	      jmp	.GM_SetScoreboardColorCMDone
    349  f185				   .GM_GameOverCM
    350  f185		       a9 20		      lda	#GAME_GAMEOVER_COLOR
    351  f187		       85 09		      sta	COLUBK
    352  f189				   .GM_SetScoreboardColorCMDone
    353  f189
    354  f189		       4c bf f1 	      jmp	.GM_SetColorDone
    355  f18c				   .GM_BWMode
    356  f18c		       a9 04		      lda	#GAME_SKY_BW
    357  f18e		       85 83		      sta	GM_SkyColor
    358  f190		       a9 08		      lda	#GAME_BK_BW
    359  f192		       85 82		      sta	GM_BackgroundColor
    360  f194		       a9 02		      lda	#GAME_PF_BW
    361  f196		       85 08		      sta	COLUPF
      0  f198					      SET_POINTER	GM_PlayerColorPtr, GM_PLAYER_BW_IDLE
      1  f198				   .POINTER   SET	GM_PlayerColorPtr
      2  f198				   .ADDRESS   SET	GM_PLAYER_BW_IDLE
      3  f198
      4  f198		       a9 af		      LDA	#<.ADDRESS
      5  f19a		       85 86		      STA	.POINTER
      6  f19c		       a9 f4		      LDA	#>.ADDRESS
      7  f19e		       85 87		      STA	.POINTER+1
      8  f1a0
      0  f1a0					      SET_POINTER	GM_BugColorPtr, GM_BUG_BW
      1  f1a0				   .POINTER   SET	GM_BugColorPtr
      2  f1a0				   .ADDRESS   SET	GM_BUG_BW
      3  f1a0
      4  f1a0		       a9 d3		      LDA	#<.ADDRESS
      5  f1a2		       85 90		      STA	.POINTER
      6  f1a4		       a9 f4		      LDA	#>.ADDRESS
      7  f1a6		       85 91		      STA	.POINTER+1
      8  f1a8
      0  f1a8					      SET_POINTER	GM_BirdColorPtr, GM_BIRD_BW
      1  f1a8				   .POINTER   SET	GM_BirdColorPtr
      2  f1a8				   .ADDRESS   SET	GM_BIRD_BW
      3  f1a8
      4  f1a8		       a9 e5		      LDA	#<.ADDRESS
      5  f1aa		       85 8c		      STA	.POINTER
      6  f1ac		       a9 f4		      LDA	#>.ADDRESS
      7  f1ae		       85 8d		      STA	.POINTER+1
      8  f1b0
    365  f1b0
    366  f1b0				   .GM_SetCoreboardColorBW
    367  f1b0		       a5 99		      lda	Timer
    368  f1b2		       f0 07		      beq	.GM_GameOverBW
    369  f1b4		       a9 00		      lda	#GAME_SCOREBACK_COLOR
    370  f1b6		       85 09		      sta	COLUBK
    371  f1b8		       4c bf f1 	      jmp	.GM_SetScoreboardColorBWDone
    372  f1bb				   .GM_GameOverBW
    373  f1bb		       a9 02		      lda	#GAME_GAMEOVER_BW
    374  f1bd		       85 09		      sta	COLUBK
    375  f1bf				   .GM_SetScoreboardColorBWDone
    376  f1bf
    377  f1bf				   .GM_SetColorDone
    378  f1bf
    379  f1bf				   .GM_SetGraphics
    380  f1bf		       ad 82 02 	      lda	SWCHB
    381  f1c2		       29 40		      and	#%01000000
    382  f1c4		       f0 0b		      beq	.GM_SetDress
    383  f1c6				   .GM_SetPants
      0  f1c6					      SET_POINTER	GM_PlayerPtr, GM_PANTS_IDLE
      1  f1c6				   .POINTER   SET	GM_PlayerPtr
      2  f1c6				   .ADDRESS   SET	GM_PANTS_IDLE
      3  f1c6
      4  f1c6		       a9 5e		      LDA	#<.ADDRESS
      5  f1c8		       85 84		      STA	.POINTER
      6  f1ca		       a9 f4		      LDA	#>.ADDRESS
      7  f1cc		       85 85		      STA	.POINTER+1
      8  f1ce
    385  f1ce		       4c d9 f1 	      jmp	.GM_SetGraphicsDone
    386  f1d1				   .GM_SetDress
      0  f1d1					      SET_POINTER	GM_PlayerPtr, GM_DRESS_IDLE
      1  f1d1				   .POINTER   SET	GM_PlayerPtr
      2  f1d1				   .ADDRESS   SET	GM_DRESS_IDLE
      3  f1d1
      4  f1d1		       a9 43		      LDA	#<.ADDRESS
      5  f1d3		       85 84		      STA	.POINTER
      6  f1d5		       a9 f4		      LDA	#>.ADDRESS
      7  f1d7		       85 85		      STA	.POINTER+1
      8  f1d9
    388  f1d9				   .GM_SetGraphicsDone
    389  f1d9
    390  f1d9				   .GM_CheckCollisions
    391  f1d9		       a5 07		      lda	CXPPMM
    392  f1db		       29 80		      and	#%10000000
    393  f1dd		       f0 0c		      beq	.GM_CheckCollisionsDone
    394  f1df
    395  f1df		       f8		      sed
    396  f1e0		       a5 98		      lda	Score
    397  f1e2		       18		      clc
    398  f1e3		       69 01		      adc	#1
    399  f1e5		       85 98		      sta	Score
    400  f1e7		       d8		      cld
    401  f1e8
    402  f1e8		       20 1f f3 	      jsr	PlaceBug
    403  f1eb				   .GM_CheckCollisionsDone
    404  f1eb		       85 2c		      sta	CXCLR
    405  f1ed
    406  f1ed				   .GM_PlayfieldInit
    407  f1ed		       a9 47		      lda	#71
    408  f1ef		       85 95		      sta	PFCounter	; 144/2 scanelines
    409  f1f1		       20 56 f3 	      jsr	PrepareScoreAndTimer
    410  f1f4
    411  f1f4				   .GM_VBLankWait
    412  f1f4		       ae 84 02 	      ldx	INTIM
    413  f1f7		       d0 fb		      bne	.GM_VBLankWait	; wait until timer is done
    414  f1f9		       a9 00		      lda	#0
    415  f1fb		       85 02		      sta	WSYNC	; get a fresh scanline
    416  f1fd							; -------------------------
    417  f1fd		       85 01		      sta	VBLANK	; turn off VBLANK
    418  f1ff
    419  f1ff							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    420  f1ff							;; Score Board - 20 scanlines - 1520 mc
    421  f1ff							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    422  f1ff		       a9 0e		      lda	#$0E
    423  f201		       85 08		      sta	COLUPF
    424  f203
    425  f203		       a9 00		      lda	#0
    426  f205		       85 0d		      sta	PF0
    427  f207		       85 0e		      sta	PF1
    428  f209		       85 0f		      sta	PF2
    429  f20b		       a9 00		      lda	#00000000
    430  f20d		       85 0a		      sta	CTRLPF	; disable playfield/scoreboard reflection
    431  f20f
    432  f20f		       a2 05		      ldx	#5
      0  f211					      WAIT_X_WSYNC
      1  f211				   .WaitX
      2  f211		       85 02		      sta	WSYNC
      3  f213		       ca		      dex
      4  f214		       d0 fb		      bne	.WaitX
    434  f216							; -------------------------
    435  f216
    436  f216		       a0 05		      ldy	#5
    437  f218				   .GM_ScoreboardLoop
    438  f218
    439  f218					      REPEAT	2
    440  f218		       b9 a0 00 	      lda	ScoreSprite,Y
    441  f21b		       85 0e		      sta	PF1
    442  f21d
    443  f21d					      REPEAT	13
    444  f21d		       ea		      nop
    443  f21d					      REPEND
    444  f21e		       ea		      nop
    443  f21e					      REPEND
    444  f21f		       ea		      nop
    443  f21f					      REPEND
    444  f220		       ea		      nop
    443  f220					      REPEND
    444  f221		       ea		      nop
    443  f221					      REPEND
    444  f222		       ea		      nop
    443  f222					      REPEND
    444  f223		       ea		      nop
    443  f223					      REPEND
    444  f224		       ea		      nop
    443  f224					      REPEND
    444  f225		       ea		      nop
    443  f225					      REPEND
    444  f226		       ea		      nop
    443  f226					      REPEND
    444  f227		       ea		      nop
    443  f227					      REPEND
    444  f228		       ea		      nop
    443  f228					      REPEND
    444  f229		       ea		      nop
    445  f22a					      REPEND
    446  f22a
    447  f22a		       b9 a6 00 	      lda	TimerSprite,Y
    448  f22d		       85 0e		      sta	PF1
    449  f22f
    450  f22f		       85 02		      sta	WSYNC
    451  f231							; -------------------------
    439  f231					      REPEND
    440  f231		       b9 a0 00 	      lda	ScoreSprite,Y
    441  f234		       85 0e		      sta	PF1
    442  f236
    443  f236					      REPEAT	13
    444  f236		       ea		      nop
    443  f236					      REPEND
    444  f237		       ea		      nop
    443  f237					      REPEND
    444  f238		       ea		      nop
    443  f238					      REPEND
    444  f239		       ea		      nop
    443  f239					      REPEND
    444  f23a		       ea		      nop
    443  f23a					      REPEND
    444  f23b		       ea		      nop
    443  f23b					      REPEND
    444  f23c		       ea		      nop
    443  f23c					      REPEND
    444  f23d		       ea		      nop
    443  f23d					      REPEND
    444  f23e		       ea		      nop
    443  f23e					      REPEND
    444  f23f		       ea		      nop
    443  f23f					      REPEND
    444  f240		       ea		      nop
    443  f240					      REPEND
    444  f241		       ea		      nop
    443  f241					      REPEND
    444  f242		       ea		      nop
    445  f243					      REPEND
    446  f243
    447  f243		       b9 a6 00 	      lda	TimerSprite,Y
    448  f246		       85 0e		      sta	PF1
    449  f248
    450  f248		       85 02		      sta	WSYNC
    451  f24a							; -------------------------
    452  f24a					      REPEND
    453  f24a
    454  f24a		       88		      dey
    455  f24b		       d0 cb		      bne	.GM_ScoreboardLoop
    456  f24d
    457  f24d		       a9 00		      lda	#0
    458  f24f		       85 0e		      sta	PF1
    459  f251
    460  f251		       a2 05		      ldx	#5
      0  f253					      WAIT_X_WSYNC
      1  f253				   .WaitX
      2  f253		       85 02		      sta	WSYNC
      3  f255		       ca		      dex
      4  f256		       d0 fb		      bne	.WaitX
    462  f258
    463  f258							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    464  f258							;; Sky - 30 scanlines - 1520 mc
    465  f258							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    466  f258		       a5 83		      lda	GM_SkyColor
    467  f25a		       85 09		      sta	COLUBK
    468  f25c		       a2 0f		      ldx	#15
    469  f25e		       a9 00		      lda	#0
    470  f260		       85 25		      sta	VDELP0	; clear vertical delay för player 0
    471  f262
    472  f262		       a5 8f		      lda	GM_BirdReflection
    473  f264		       85 0b		      sta	REFP0
    474  f266
    475  f266				   .GM_SkyLoop
    476  f266
    477  f266				   .GM_DrawBird
    478  f266		       8a		      txa		; transfer X to A
    479  f267		       38		      sec		; make sure carry flag is set
    480  f268		       e5 8e		      sbc	GM_BirdYPos	; subtract sprite Y coordinate
    481  f26a		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    482  f26c		       90 02		      bcc	.GM_WriteBird	; if result < SpriteHeight, call subroutine
    483  f26e		       a9 00		      lda	#0	; else, set index to 0
    484  f270				   .GM_WriteBird
    485  f270		       a8		      tay
    486  f271		       b1 8a		      lda	(GM_BirdPtr),Y	; load player bitmap slice of data
    487  f273		       85 02		      sta	WSYNC	; wait for next scanline
    488  f275							; -------------------------
    489  f275		       85 1b		      sta	GRP0	; set graphics for player 0 slice
    490  f277		       b1 8c		      lda	(GM_BirdColorPtr),Y	; load player color from lookup table
    491  f279		       85 06		      sta	COLUP0	; set color for player 1 slice
    492  f27b				   .GM_DrawBirdDone
    493  f27b		       85 02		      sta	WSYNC	; wait for next scanline
    494  f27d							; -------------------------
    495  f27d		       ca		      dex
    496  f27e		       d0 e6		      bne	.GM_SkyLoop
    497  f280
    498  f280
    499  f280							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    500  f280							;; Playfield - 152 scanlines - 11552 mc
    501  f280							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    502  f280		       a5 82		      lda	GM_BackgroundColor
    503  f282		       85 09		      sta	COLUBK
    504  f284		       a9 01		      lda	#1
    505  f286		       85 25		      sta	VDELP0	; set vertical delay för player 0
    506  f288		       a9 00		      lda	#0
    507  f28a		       85 0b		      sta	REFP0
    508  f28c
    509  f28c				   .GM_PlayfieldLoop
    510  f28c
    511  f28c				   .GM_DrawPlayer
    512  f28c		       a5 95		      lda	PFCounter	; A = current scanline in playfield
    513  f28e		       38		      sec		; make sure carry flag is set
    514  f28f		       e5 89		      sbc	GM_PlayerYPos	; subtract sprite Y coordinate
    515  f291		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    516  f293		       90 02		      bcc	.GM_WritePlayer	; if result < height then A contains the index
    517  f295		       a9 00		      lda	#0	; else, set A to 0
    518  f297				   .GM_WritePlayer
    519  f297		       a8		      tay
    520  f298		       b1 84		      lda	(GM_PlayerPtr),Y	; load player bitmap slice of data
    521  f29a		       85 1b		      sta	GRP0	; set graphics for player 0 slice - delayed
    522  f29c		       b1 86		      lda	(GM_PlayerColorPtr),Y	; load player color from lookup table
    523  f29e		       aa		      tax
    524  f29f				   .GM_DrawPlayerDone
    525  f29f
    526  f29f				   .GM_DrawBug
    527  f29f		       a5 95		      lda	PFCounter	; transfer X to A
    528  f2a1		       38		      sec		; make sure carry flag is set
    529  f2a2		       e5 93		      sbc	GM_BugYPos	; subtract sprite Y coordinate
    530  f2a4		       c5 09		      cmp	GAME_PLAYER_HEIGHT	; are we inside the sprite height bounds?
    531  f2a6		       90 02		      bcc	.GM_WriteBug	; if result < SpriteHeight, call subroutine
    532  f2a8		       a9 00		      lda	#0	; else, set index to 0
    533  f2aa				   .GM_WriteBug
    534  f2aa		       a8		      tay
    535  f2ab		       b9 79 f4 	      lda	GM_BUG,Y	; load player bitmap slice of data
    536  f2ae		       85 02		      sta	WSYNC	; wait for next scanline
    537  f2b0							; -------------------------
    538  f2b0		       85 1c		      sta	GRP1	; set graphics for player 1 + 0 slice
    539  f2b2		       86 06		      stx	COLUP0	; set color for player 0 slice
    540  f2b4		       b1 90		      lda	(GM_BugColorPtr),Y	; load player color from lookup table
    541  f2b6		       85 07		      sta	COLUP1	; set color for player 1 slice
    542  f2b8				   .GM_DrawBugDone
    543  f2b8		       85 02		      sta	WSYNC
    544  f2ba							; -------------------------
    545  f2ba		       c6 95		      dec	PFCounter
    546  f2bc		       d0 ce		      bne	.GM_PlayfieldLoop	; repeat next scanline until finished
    547  f2be		       85 02		      sta	WSYNC
    548  f2c0
    549  f2c0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    550  f2c0							;; Overscan - 30 scanlines - 2280 mc
    551  f2c0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    552  f2c0		       a9 02		      lda	#2	; A = 2 = #%00000010
    553  f2c2		       85 01		      sta	VBLANK	; Turn on VBLANK
    554  f2c4		       a9 23		      lda	#TIMER_OVERSCAN
    555  f2c6		       8d 96 02 	      sta	TIM64T	; set timer to 35x64 = 2240 mc
    556  f2c9
    557  f2c9				   .GM_CheckReset
    558  f2c9		       ad 82 02 	      lda	SWCHB	; load console switches
    559  f2cc		       29 01		      and	#RESET_MASK
    560  f2ce		       d0 03		      bne	.GM_NoReset
    561  f2d0		       4c 00 f0 	      jmp	Reset	; jump to reset if reset button has been pressed
    562  f2d3				   .GM_NoReset
    563  f2d3
    564  f2d3		       a2 00		      ldx	#0
    565  f2d5
    566  f2d5				   .GM_CheckInputUp
    567  f2d5		       a9 10		      lda	#%00010000
    568  f2d7		       2c 80 02 	      bit	SWCHA
    569  f2da		       d0 04		      bne	.GM_CheckInputDown
    570  f2dc		       a2 01		      ldx	#1
    571  f2de		       e6 89		      inc	GM_PlayerYPos
    572  f2e0
    573  f2e0				   .GM_CheckInputDown
    574  f2e0		       a9 20		      lda	#%00100000
    575  f2e2		       2c 80 02 	      bit	SWCHA
    576  f2e5		       d0 04		      bne	.GM_CheckInputLeft
    577  f2e7		       a2 01		      ldx	#1
    578  f2e9		       c6 89		      dec	GM_PlayerYPos
    579  f2eb
    580  f2eb				   .GM_CheckInputLeft
    581  f2eb		       a9 40		      lda	#%01000000
    582  f2ed		       2c 80 02 	      bit	SWCHA
    583  f2f0		       d0 08		      bne	.GM_CheckInputRight
    584  f2f2		       a9 08		      lda	#%00001000
    585  f2f4		       85 8f		      sta	GM_BirdReflection
    586  f2f6		       a2 01		      ldx	#1
    587  f2f8		       c6 88		      dec	GM_PlayerXPos
    588  f2fa
    589  f2fa				   .GM_CheckInputRight
    590  f2fa		       a9 80		      lda	#%10000000
    591  f2fc		       2c 80 02 	      bit	SWCHA
    592  f2ff		       d0 08		      bne	.GM_CheckInputDone
    593  f301		       a9 00		      lda	#0
    594  f303		       85 8f		      sta	GM_BirdReflection
    595  f305		       a2 01		      ldx	#1
    596  f307		       e6 88		      inc	GM_PlayerXPos
    597  f309
    598  f309				   .GM_CheckInputDone
    599  f309
    600  f309		       e0 01		      cpx	#1
    601  f30b		       d0 08		      bne	.GM_Continue
    602  f30d		       a5 99		      lda	Timer
    603  f30f		       f0 04		      beq	.GM_Continue
    604  f311		       a9 00		      lda	#0
    605  f313		       85 97		      sta	GameOver
    606  f315				   .GM_Continue
    607  f315
    608  f315				   .GM_OverscanWait
    609  f315		       ae 84 02 	      ldx	INTIM
    610  f318		       d0 fb		      bne	.GM_OverscanWait	; wait until timer is done
    611  f31a		       85 02		      sta	WSYNC
    612  f31c							; -------------------------
    613  f31c		       4c 12 f1 	      jmp	GM_NextFrame
    614  f31f
    615  f31f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    616  f31f							;; Subruotines
    617  f31f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    618  f31f
    619  f31f				   PlaceBug   subroutine
    620  f31f		       20 32 f3 	      jsr	Randomize
    621  f322		       a5 96		      lda	Random
    622  f324		       29 7f		      and	#%01111111
    623  f326		       85 92		      sta	GM_BugXPos
    624  f328		       20 32 f3 	      jsr	Randomize
    625  f32b		       a5 96		      lda	Random
    626  f32d		       29 3f		      and	#%00111111
    627  f32f		       85 93		      sta	GM_BugYPos
    628  f331		       60		      rts
    629  f332
    630  f332				   Randomize  subroutine
    631  f332		       a5 96		      lda	Random
    632  f334		       0a		      asl
    633  f335		       45 96		      eor	Random
    634  f337		       0a		      asl
    635  f338		       45 96		      eor	Random
    636  f33a		       0a		      asl
    637  f33b		       0a		      asl
    638  f33c		       45 96		      eor	Random
    639  f33e		       0a		      asl
    640  f33f		       26 96		      rol	Random	; performs a series of shifts and bit operations
    641  f341		       60		      rts
    642  f342
    643  f342							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    644  f342							;; SetObjectXPos
    645  f342							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    646  f342							;; A : Contains the the desired x-coordinate
    647  f342							;; Y=0 : Player0
    648  f342							;; Y=1 : Player1
    649  f342							;; Y=2 : Missile0
    650  f342							;; Y=3 : Missile1
    651  f342							;; Y=4 : Ball
    652  f342							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    653  f342
    654  f342				   SetObjectXPos subroutine
    655  f342		       38		      sec		; Set carry flag
    656  f343		       85 02		      sta	WSYNC	; Get fresh scanline
    657  f345							; -------------------------
    658  f345				   .Div15Loop		; Divide A with 15 by subtraction in loop
    659  f345		       e9 0f		      sbc	#15	; Subtract 15 from A
    660  f347		       b0 fc		      bcs	.Div15Loop	; Loop if carry flag is set
    661  f349		       49 07		      eor	#7	; Adjust the remainder in A between -8 and 7
    662  f34b					      REPEAT	4	; Repeat 4 times
    663  f34b		       0a		      asl		; Shift bits left by one
    662  f34b					      REPEND		; End of repeat
    663  f34c		       0a		      asl		; Shift bits left by one
    662  f34c					      REPEND		; End of repeat
    663  f34d		       0a		      asl		; Shift bits left by one
    662  f34d					      REPEND		; End of repeat
    663  f34e		       0a		      asl		; Shift bits left by one
    664  f34f					      REPEND		; End of repeat
    665  f34f		       99 20 00 	      sta	HMP0,Y	; Set fine position value for object HMP0+Y
    666  f352		       99 10 00 	      sta	RESP0,Y	; Seset rough position for object HMP0+Y
    667  f355		       60		      rts
    668  f356
    669  f356							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    670  f356							;; Subroutine to handle scoreboard digits to be displayed on the screen
    671  f356							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    672  f356							;; This is stored using BCD, so the display will be displayed in dec numbers.
    673  f356							;; Converts the high and low nibbles of the variables Score and Timer
    674  f356							;; into offsets into the digit lookup table so the values can be displayed.
    675  f356							;; Each digit has a height of 5 bytes in the lookup table.
    676  f356							;;
    677  f356							;; For the low nibble we need to multiply by 5:
    678  f356							;;   - we can use left shifts to perform multiplation by 2
    679  f356							;;   - for any number N, the value of N*5 = (N*2*2)+N
    680  f356							;;
    681  f356							;; For the upper nibble, since it is already times 16, we need to divide it
    682  f356							;; and then multiply it by 5:
    683  f356							;;   - we can use right shift to perform division by 2
    684  f356							;;   - for any number N, the value of (N/16)*5 = (N/4)+(N/16)
    685  f356							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    686  f356				   PrepareScoreAndTimer subroutine
    687  f356		       a2 01		      ldx	#1	; X register is the loop counter
    688  f358				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    689  f358
    690  f358		       b5 98		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    691  f35a		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111
    692  f35c		       85 9f		      sta	Temp	; save the value of A into Temp
    693  f35e		       0a		      asl		; shift left (it is now N*2)
    694  f35f		       0a		      asl		; shift left (it is now N*4)
    695  f360		       65 9f		      adc	Temp	; add the value saved in Temp (+N)
    696  f362		       95 9b		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset
    697  f364
    698  f364		       b5 98		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    699  f366		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    700  f368		       4a		      lsr		; shift right (it is now N/2)
    701  f369		       4a		      lsr		; shift right (it is now N/4)
    702  f36a		       85 9f		      sta	Temp	; save the value of A into Temp
    703  f36c		       4a		      lsr		; shift right (it is now N/8)
    704  f36d		       4a		      lsr		; shift right (it is now N/16)
    705  f36e		       65 9f		      adc	Temp	; add the value saved in Temp (N/16+N/4)
    706  f370		       95 9d		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    707  f372		       ca		      dex		; X--
    708  f373		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    709  f375
    710  f375		       a2 05		      ldx	#5
    711  f377				   .SpriteLoop
    712  f377
    713  f377		       a4 9d		      ldy	TensDigitOffset
    714  f379		       b9 f3 f3 	      lda	Digits,y
    715  f37c		       29 f0		      and	#$F0
    716  f37e		       85 9f		      sta	Temp
    717  f380
    718  f380		       a4 9b		      ldy	OnesDigitOffset
    719  f382		       b9 f3 f3 	      lda	Digits,y
    720  f385		       29 0f		      and	#$0F
    721  f387		       05 9f		      ora	Temp
    722  f389		       85 9f		      sta	Temp
    723  f38b
    724  f38b		       a5 9f		      lda	Temp
    725  f38d		       95 a0		      sta	ScoreSprite,X
    726  f38f
    727  f38f		       a4 9e		      ldy	TensDigitOffset+1
    728  f391		       b9 f3 f3 	      lda	Digits,y
    729  f394		       29 f0		      and	#$F0
    730  f396		       85 9f		      sta	Temp
    731  f398
    732  f398		       a4 9c		      ldy	OnesDigitOffset+1
    733  f39a		       b9 f3 f3 	      lda	Digits,y
    734  f39d		       29 0f		      and	#$0F
    735  f39f		       05 9f		      ora	Temp
    736  f3a1		       85 9f		      sta	Temp
    737  f3a3
    738  f3a3		       a5 9f		      lda	Temp
    739  f3a5		       95 a6		      sta	TimerSprite,X
    740  f3a7
    741  f3a7		       e6 9d		      inc	TensDigitOffset
    742  f3a9		       e6 9e		      inc	TensDigitOffset+1
    743  f3ab		       e6 9b		      inc	OnesDigitOffset
    744  f3ad		       e6 9c		      inc	OnesDigitOffset+1
    745  f3af
    746  f3af		       ca		      dex
    747  f3b0		       d0 c5		      bne	.SpriteLoop
    748  f3b2
    749  f3b2		       60		      rts
    750  f3b3
    751  f3b3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    752  f3b3							;; Lookup tabes
    753  f3b3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    754  f3b3
    755  f3b3							; https://www.masswerk.at/vcs-tools/TinyPlayfieldEditor/
    756  f3b3							; mode: asymmetric repeat line-height 4
    757  f3b3				   LM_LogoPF0
    758  f3b3		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$90
    759  f3bb		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$40,$00,$40
    760  f3c3		       00 70		      .byte.b	$00,$70
    761  f3c5				   LM_LogoPF1
    762  f3c5		       00 40 00 40*	      .byte.b	$00,$40,$00,$40,$00,$00,$05,$DE
    763  f3cd		       0a 42 0a 4e*	      .byte.b	$0A,$42,$0A,$4E,$08,$52,$08,$56
    764  f3d5		       38 7b		      .byte.b	$38,$7B
    765  f3d7				   LM_LogoPF2
    766  f3d7		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$80,$00,$F8,$00
    767  f3df		       a5 00 a5 00*	      .byte.b	$A5,$00,$A5,$00,$BF,$00,$85,$00
    768  f3e7		       39 03		      .byte.b	$39,$03
    769  f3e9
    770  f3e9				   LM_LogoFade_Color
    771  f3e9		       0e 3e 3c 3a*	      .byte.b	$0E,$3E,$3C,$3A,$38
    772  f3ee
    773  f3ee				   LM_LogoFade_BW
    774  f3ee		       0e 0c 0a 08*	      .byte.b	$0E,$0C,$0A,$08,$06
    775  f3f3
    776  f3f3				   Digits
    777  f3f3		       77		      .byte.b	%01110111	; ### ###
    778  f3f4		       55		      .byte.b	%01010101	; # # # #
    779  f3f5		       55		      .byte.b	%01010101	; # # # #
    780  f3f6		       55		      .byte.b	%01010101	; # # # #
    781  f3f7		       77		      .byte.b	%01110111	; ### ###
    782  f3f8
    783  f3f8		       11		      .byte.b	%00010001	;   #	 #
    784  f3f9		       11		      .byte.b	%00010001	;   #	 #
    785  f3fa		       11		      .byte.b	%00010001	;   #	 #
    786  f3fb		       11		      .byte.b	%00010001	;   #	 #
    787  f3fc		       11		      .byte.b	%00010001	;   #	 #
    788  f3fd
    789  f3fd		       77		      .byte.b	%01110111	; ### ###
    790  f3fe		       11		      .byte.b	%00010001	;   #	 #
    791  f3ff		       77		      .byte.b	%01110111	; ### ###
    792  f400		       44		      .byte.b	%01000100	; #   #
    793  f401		       77		      .byte.b	%01110111	; ### ###
    794  f402
    795  f402		       77		      .byte.b	%01110111	; ### ###
    796  f403		       11		      .byte.b	%00010001	;   #	 #
    797  f404		       33		      .byte.b	%00110011	;  ##	##
    798  f405		       11		      .byte.b	%00010001	;   #	 #
    799  f406		       77		      .byte.b	%01110111	; ### ###
    800  f407
    801  f407		       55		      .byte.b	%01010101	; # # # #
    802  f408		       55		      .byte.b	%01010101	; # # # #
    803  f409		       77		      .byte.b	%01110111	; ### ###
    804  f40a		       11		      .byte.b	%00010001	;   #	 #
    805  f40b		       11		      .byte.b	%00010001	;   #	 #
    806  f40c
    807  f40c		       77		      .byte.b	%01110111	; ### ###
    808  f40d		       44		      .byte.b	%01000100	; #   #
    809  f40e		       77		      .byte.b	%01110111	; ### ###
    810  f40f		       11		      .byte.b	%00010001	;   #	 #
    811  f410		       77		      .byte.b	%01110111	; ### ###
    812  f411
    813  f411		       77		      .byte.b	%01110111	; ### ###
    814  f412		       44		      .byte.b	%01000100	; #   #
    815  f413		       77		      .byte.b	%01110111	; ### ###
    816  f414		       55		      .byte.b	%01010101	; # # # #
    817  f415		       77		      .byte.b	%01110111	; ### ###
    818  f416
    819  f416		       77		      .byte.b	%01110111	; ### ###
    820  f417		       11		      .byte.b	%00010001	;   #	 #
    821  f418		       11		      .byte.b	%00010001	;   #	 #
    822  f419		       11		      .byte.b	%00010001	;   #	 #
    823  f41a		       11		      .byte.b	%00010001	;   #	 #
    824  f41b
    825  f41b		       77		      .byte.b	%01110111	; ### ###
    826  f41c		       55		      .byte.b	%01010101	; # # # #
    827  f41d		       77		      .byte.b	%01110111	; ### ###
    828  f41e		       55		      .byte.b	%01010101	; # # # #
    829  f41f		       77		      .byte.b	%01110111	; ### ###
    830  f420
    831  f420		       77		      .byte.b	%01110111	; ### ###
    832  f421		       55		      .byte.b	%01010101	; # # # #
    833  f422		       77		      .byte.b	%01110111	; ### ###
    834  f423		       11		      .byte.b	%00010001	;   #	 #
    835  f424		       77		      .byte.b	%01110111	; ### ###
    836  f425
    837  f425		       22		      .byte.b	%00100010	;  #	#
    838  f426		       55		      .byte.b	%01010101	; # # # #
    839  f427		       77		      .byte.b	%01110111	; ### ###
    840  f428		       55		      .byte.b	%01010101	; # # # #
    841  f429		       55		      .byte.b	%01010101	; # # # #
    842  f42a
    843  f42a		       77		      .byte.b	%01110111	; ### ###
    844  f42b		       55		      .byte.b	%01010101	; # # # #
    845  f42c		       66		      .byte.b	%01100110	; ##  ##
    846  f42d		       55		      .byte.b	%01010101	; # # # #
    847  f42e		       77		      .byte.b	%01110111	; ### ###
    848  f42f
    849  f42f		       77		      .byte.b	%01110111	; ### ###
    850  f430		       44		      .byte.b	%01000100	; #   #
    851  f431		       44		      .byte.b	%01000100	; #   #
    852  f432		       44		      .byte.b	%01000100	; #   #
    853  f433		       77		      .byte.b	%01110111	; ### ###
    854  f434
    855  f434		       66		      .byte.b	%01100110	; ##  ##
    856  f435		       55		      .byte.b	%01010101	; # # # #
    857  f436		       55		      .byte.b	%01010101	; # # # #
    858  f437		       55		      .byte.b	%01010101	; # # # #
    859  f438		       66		      .byte.b	%01100110	; ##  ##
    860  f439
    861  f439		       77		      .byte.b	%01110111	; ### ###
    862  f43a		       44		      .byte.b	%01000100	; #   #
    863  f43b		       77		      .byte.b	%01110111	; ### ###
    864  f43c		       44		      .byte.b	%01000100	; #   #
    865  f43d		       77		      .byte.b	%01110111	; ### ###
    866  f43e
    867  f43e		       77		      .byte.b	%01110111	; ### ###
    868  f43f		       44		      .byte.b	%01000100	; #   #
    869  f440		       66		      .byte.b	%01100110	; ##  ##
    870  f441		       44		      .byte.b	%01000100	; #   #
    871  f442		       44		      .byte.b	%01000100	; #   #
    872  f443
    873  f443							;---Graphics Data from PlayerPal 2600---
    874  f443
    875  f443				   GM_DRESS_IDLE
    876  f443		       00		      .byte.b	#0
    877  f444		       7e		      .byte.b	#%01111110	;$70
    878  f445		       7e		      .byte.b	#%01111110	;$70
    879  f446		       3c		      .byte.b	#%00111100	;$70
    880  f447		       5a		      .byte.b	#%01011010	;$84
    881  f448		       7e		      .byte.b	#%01111110	;$84
    882  f449		       18		      .byte.b	#%00011000	;$F4
    883  f44a		       3c		      .byte.b	#%00111100	;$00
    884  f44b		       18		      .byte.b	#%00011000	;$00
    885  f44c				   GM_DRESS_WALK1
    886  f44c		       00		      .byte.b	#0
    887  f44d		       78		      .byte.b	#%01111000	;$70
    888  f44e		       7e		      .byte.b	#%01111110	;$70
    889  f44f		       3c		      .byte.b	#%00111100	;$70
    890  f450		       1a		      .byte.b	#%00011010	;$84
    891  f451		       7e		      .byte.b	#%01111110	;$84
    892  f452		       18		      .byte.b	#%00011000	;$F4
    893  f453		       3c		      .byte.b	#%00111100	;$00
    894  f454		       18		      .byte.b	#%00011000	;$00
    895  f455				   GM_DRESS_WALK2
    896  f455		       00		      .byte.b	#0
    897  f456		       1e		      .byte.b	#%00011110	;$70
    898  f457		       7e		      .byte.b	#%01111110	;$70
    899  f458		       3c		      .byte.b	#%00111100	;$70
    900  f459		       58		      .byte.b	#%01011000	;$84
    901  f45a		       7e		      .byte.b	#%01111110	;$84
    902  f45b		       18		      .byte.b	#%00011000	;$F4
    903  f45c		       3c		      .byte.b	#%00111100	;$00
    904  f45d		       18		      .byte.b	#%00011000	;$00
    905  f45e				   GM_PANTS_IDLE
    906  f45e		       00		      .byte.b	#0
    907  f45f		       66		      .byte.b	#%01100110	;$70
    908  f460		       24		      .byte.b	#%00100100	;$70
    909  f461		       3c		      .byte.b	#%00111100	;$70
    910  f462		       5a		      .byte.b	#%01011010	;$84
    911  f463		       7e		      .byte.b	#%01111110	;$84
    912  f464		       18		      .byte.b	#%00011000	;$F4
    913  f465		       3c		      .byte.b	#%00111100	;$00
    914  f466		       18		      .byte.b	#%00011000	;$00
    915  f467				   GM_PANTS_WALK1
    916  f467		       00		      .byte.b	#0
    917  f468		       60		      .byte.b	#%01100000	;$70
    918  f469		       26		      .byte.b	#%00100110	;$70
    919  f46a		       3c		      .byte.b	#%00111100	;$70
    920  f46b		       1a		      .byte.b	#%00011010	;$84
    921  f46c		       7e		      .byte.b	#%01111110	;$84
    922  f46d		       18		      .byte.b	#%00011000	;$F4
    923  f46e		       3c		      .byte.b	#%00111100	;$00
    924  f46f		       18		      .byte.b	#%00011000	;$00
    925  f470				   GM_PANTS_WALK2
    926  f470		       00		      .byte.b	#0
    927  f471		       06		      .byte.b	#%00000110	;$70
    928  f472		       64		      .byte.b	#%01100100	;$70
    929  f473		       3c		      .byte.b	#%00111100	;$70
    930  f474		       58		      .byte.b	#%01011000	;$84
    931  f475		       7e		      .byte.b	#%01111110	;$84
    932  f476		       18		      .byte.b	#%00011000	;$F4
    933  f477		       3c		      .byte.b	#%00111100	;$00
    934  f478		       18		      .byte.b	#%00011000	;$00
    935  f479				   GM_BUG
    936  f479		       00		      .byte.b	#0
    937  f47a		       00		      .byte.b	#%00000000	;$00
    938  f47b		       00		      .byte.b	#%00000000	;$00
    939  f47c		       52		      .byte.b	#%01010010	;$F0
    940  f47d		       3c		      .byte.b	#%00111100	;$F0
    941  f47e		       3c		      .byte.b	#%00111100	;$F2
    942  f47f		       52		      .byte.b	#%01010010	;$F0
    943  f480		       00		      .byte.b	#%00000000	;$00
    944  f481		       00		      .byte.b	#%00000000	;$00
    945  f482				   GM_BIRD_1
    946  f482		       00		      .byte.b	#0
    947  f483		       00		      .byte.b	#%00000000	;$1C
    948  f484		       01		      .byte.b	#%00000001	;$1C
    949  f485		       3f		      .byte.b	#%00111111	;$0E
    950  f486		       fe		      .byte.b	#%11111110	;$0A
    951  f487		       18		      .byte.b	#%00011000	;$0E
    952  f488		       76		      .byte.b	#%01110110	;$0E
    953  f489		       00		      .byte.b	#%00000000	;$0E
    954  f48a		       00		      .byte.b	#%00000000	;$0E
    955  f48b				   GM_BIRD_2
    956  f48b		       00		      .byte.b	#0
    957  f48c		       00		      .byte.b	#%00000000	;$1C
    958  f48d		       01		      .byte.b	#%00000001	;$1C
    959  f48e		       3f		      .byte.b	#%00111111	;$0E
    960  f48f		       fe		      .byte.b	#%11111110	;$0A
    961  f490		       f8		      .byte.b	#%11111000	;$0E
    962  f491		       00		      .byte.b	#%00000000	;$0E
    963  f492		       00		      .byte.b	#%00000000	;$0E
    964  f493		       00		      .byte.b	#%00000000	;$0E
    965  f494
    966  f494							;---End Graphics Data---
    967  f494
    968  f494
    969  f494							;---Color Data from PlayerPal 2600---
    970  f494				   GM_PLAYER_COLOR_IDLE
    971  f494		       00		      .byte.b	#0
    972  f495		       70		      .byte.b	#$70	;
    973  f496		       70		      .byte.b	#$70	;
    974  f497		       70		      .byte.b	#$70	;
    975  f498		       84		      .byte.b	#$84	;
    976  f499		       84		      .byte.b	#$84	;
    977  f49a		       f4		      .byte.b	#$F4	;
    978  f49b		       00		      .byte.b	#$00	;
    979  f49c		       00		      .byte.b	#$00	;
    980  f49d				   GM_PLAYER_COLOR_WALK1
    981  f49d		       00		      .byte.b	#0
    982  f49e		       70		      .byte.b	#$70	;
    983  f49f		       70		      .byte.b	#$70	;
    984  f4a0		       70		      .byte.b	#$70	;
    985  f4a1		       84		      .byte.b	#$84	;
    986  f4a2		       84		      .byte.b	#$84	;
    987  f4a3		       f4		      .byte.b	#$F4	;
    988  f4a4		       00		      .byte.b	#$00	;
    989  f4a5		       00		      .byte.b	#$00	;
    990  f4a6				   GM_PLAYER_COLOR_WALK2
    991  f4a6		       00		      .byte.b	#0
    992  f4a7		       70		      .byte.b	#$70	;
    993  f4a8		       70		      .byte.b	#$70	;
    994  f4a9		       70		      .byte.b	#$70	;
    995  f4aa		       84		      .byte.b	#$84	;
    996  f4ab		       84		      .byte.b	#$84	;
    997  f4ac		       f4		      .byte.b	#$F4	;
    998  f4ad		       00		      .byte.b	#$00	;
    999  f4ae		       00		      .byte.b	#$00	;
   1000  f4af				   GM_PLAYER_BW_IDLE
   1001  f4af		       00		      .byte.b	#0
   1002  f4b0		       00		      .byte.b	#$0	;
   1003  f4b1		       00		      .byte.b	#$0	;
   1004  f4b2		       00		      .byte.b	#$0	;
   1005  f4b3		       02		      .byte.b	#$02	;
   1006  f4b4		       02		      .byte.b	#$02	;
   1007  f4b5		       04		      .byte.b	#$04	;
   1008  f4b6		       00		      .byte.b	#$00	;
   1009  f4b7		       00		      .byte.b	#$00	;
   1010  f4b8				   GM_PLAYER_BW_WALK1
   1011  f4b8		       00		      .byte.b	#0
   1012  f4b9		       00		      .byte.b	#$0	;
   1013  f4ba		       00		      .byte.b	#$0	;
   1014  f4bb		       00		      .byte.b	#$0	;
   1015  f4bc		       02		      .byte.b	#$02	;
   1016  f4bd		       02		      .byte.b	#$02	;
   1017  f4be		       04		      .byte.b	#$04	;
   1018  f4bf		       00		      .byte.b	#$00	;
   1019  f4c0		       00		      .byte.b	#$00	;
   1020  f4c1				   GM_PLAYER_BW_WALK2
   1021  f4c1		       00		      .byte.b	#0
   1022  f4c2		       00		      .byte.b	#$0	;
   1023  f4c3		       00		      .byte.b	#$0	;
   1024  f4c4		       00		      .byte.b	#$0	;
   1025  f4c5		       02		      .byte.b	#$02	;
   1026  f4c6		       02		      .byte.b	#$02	;
   1027  f4c7		       04		      .byte.b	#$04	;
   1028  f4c8		       00		      .byte.b	#$00	;
   1029  f4c9		       00		      .byte.b	#$00	;
   1030  f4ca				   GM_BUG_COLOR
   1031  f4ca		       00		      .byte.b	#0
   1032  f4cb		       00		      .byte.b	#$00	;
   1033  f4cc		       00		      .byte.b	#$00	;
   1034  f4cd		       f0		      .byte.b	#$F0	;
   1035  f4ce		       f0		      .byte.b	#$F0	;
   1036  f4cf		       f2		      .byte.b	#$F2	;
   1037  f4d0		       f0		      .byte.b	#$F0	;
   1038  f4d1		       00		      .byte.b	#$00	;
   1039  f4d2		       00		      .byte.b	#$00	;
   1040  f4d3				   GM_BUG_BW
   1041  f4d3		       00		      .byte.b	#0
   1042  f4d4		       00		      .byte.b	#$00	;
   1043  f4d5		       00		      .byte.b	#$00	;
   1044  f4d6		       00		      .byte.b	#$00	;
   1045  f4d7		       00		      .byte.b	#$00	;
   1046  f4d8		       02		      .byte.b	#$02	;
   1047  f4d9		       00		      .byte.b	#$00	;
   1048  f4da		       00		      .byte.b	#$00	;
   1049  f4db		       00		      .byte.b	#$00	;
   1050  f4dc				   GM_BIRD_COLOR
   1051  f4dc		       00		      .byte.b	#0
   1052  f4dd		       1c		      .byte.b	#$1C	;
   1053  f4de		       1c		      .byte.b	#$1C	;
   1054  f4df		       0e		      .byte.b	#$0E	;
   1055  f4e0		       0a		      .byte.b	#$0A	;
   1056  f4e1		       0e		      .byte.b	#$0E	;
   1057  f4e2		       0e		      .byte.b	#$0E	;
   1058  f4e3		       0e		      .byte.b	#$0E	;
   1059  f4e4		       0e		      .byte.b	#$0E	;
   1060  f4e5				   GM_BIRD_BW
   1061  f4e5		       00		      .byte.b	#0
   1062  f4e6		       0c		      .byte.b	#$0C	;
   1063  f4e7		       0c		      .byte.b	#$0C	;
   1064  f4e8		       0e		      .byte.b	#$0E	;
   1065  f4e9		       0a		      .byte.b	#$0A	;
   1066  f4ea		       0e		      .byte.b	#$0E	;
   1067  f4eb		       0e		      .byte.b	#$0E	;
   1068  f4ec		       0e		      .byte.b	#$0E	;
   1069  f4ed		       0e		      .byte.b	#$0E	;
   1070  f4ee
   1071  f4ee							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1072  f4ee							;; Fill the 4K ROM
   1073  f4ee							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1074  fffc					      org	$FFFC	; insert two pointers at the end of ROM
   1075  fffc		       00 f0		      .word.w	Reset	; reset vector
   1076  fffe		       00 f0		      .word.w	Reset	; interrupt Vector
   1077  10000
   1078  10000
